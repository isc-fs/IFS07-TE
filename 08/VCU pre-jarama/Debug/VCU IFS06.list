
VCU IFS06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f4c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000037c  0801221c  0801221c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012598  08012598  00013598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080125a0  080125a0  000135a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080125a4  080125a4  000135a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  080125a8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000998  2400006c  08012614  0001406c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a04  08012614  00014a04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001406c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025813  00000000  00000000  0001409a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c9a  00000000  00000000  000398ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001db8  00000000  00000000  0003d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001727  00000000  00000000  0003f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000392df  00000000  00000000  00040a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026792  00000000  00000000  00079d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001792b4  00000000  00000000  000a0498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0021974c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086bc  00000000  00000000  00219790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  00221e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08012204 	.word	0x08012204

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	08012204 	.word	0x08012204

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f002 f9fc 	bl	8002aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 fa08 	bl	8000b08 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006f8:	f000 fa74 	bl	8000be4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f000 fed8 	bl	80014b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000700:	f000 feb6 	bl	8001470 <MX_DMA_Init>
  MX_ADC1_Init();
 8000704:	f000 faa0 	bl	8000c48 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000708:	f000 fb3a 	bl	8000d80 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800070c:	f000 fba0 	bl	8000e50 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000710:	f000 fc1c 	bl	8000f4c <MX_FDCAN2_Init>
  MX_TIM1_Init();
 8000714:	f000 fd34 	bl	8001180 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000718:	f000 fe5e 	bl	80013d8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800071c:	f000 fde8 	bl	80012f0 <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8000720:	f000 fe0e 	bl	8001340 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000724:	f000 fd0e 	bl	8001144 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000728:	f010 fe28 	bl	801137c <MX_FATFS_Init>
  MX_FDCAN3_Init();
 800072c:	f000 fc8c 	bl	8001048 <MX_FDCAN3_Init>
	//sprintf(buffer, "%u,1test,1test1,1test2\n", (unsigned)time(NULL));
	//SDCard_write("data.csv", "1test,1test1,1test2\n", 0); // el modo 0 asume que existe el archivo y añade datos
	//print(buffer);

	// HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)buffer_adc, 3) != HAL_OK)
 8000730:	2203      	movs	r2, #3
 8000732:	49a5      	ldr	r1, [pc, #660]	@ (80009c8 <main+0x2dc>)
 8000734:	48a5      	ldr	r0, [pc, #660]	@ (80009cc <main+0x2e0>)
 8000736:	f003 f9c5 	bl	8003ac4 <HAL_ADC_Start_DMA>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d004      	beq.n	800074a <main+0x5e>
	{
#if DEBUG
		print("Error al inicializar ADC_DMA");
 8000740:	48a3      	ldr	r0, [pc, #652]	@ (80009d0 <main+0x2e4>)
 8000742:	f000 ff95 	bl	8001670 <print>
#endif
		Error_Handler();
 8000746:	f001 fc13 	bl	8001f70 <Error_Handler>
	//LPF_EMA_Init(&s1_filt, 0.2f);
	//LPF_EMA_Init(&s2_filt, 0.2f);

	// Inicialización de buses CAN
	// Inversor
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800074a:	48a2      	ldr	r0, [pc, #648]	@ (80009d4 <main+0x2e8>)
 800074c:	f007 fac6 	bl	8007cdc <HAL_FDCAN_Start>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d004      	beq.n	8000760 <main+0x74>
	{
#if DEBUG
		print("Error al inicializar CAN_INV");
 8000756:	48a0      	ldr	r0, [pc, #640]	@ (80009d8 <main+0x2ec>)
 8000758:	f000 ff8a 	bl	8001670 <print>
#endif
		Error_Handler();
 800075c:	f001 fc08 	bl	8001f70 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	489b      	ldr	r0, [pc, #620]	@ (80009d4 <main+0x2e8>)
 8000766:	f007 fcab 	bl	80080c0 <HAL_FDCAN_ActivateNotification>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d004      	beq.n	800077a <main+0x8e>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICACION CAN_INV");
 8000770:	489a      	ldr	r0, [pc, #616]	@ (80009dc <main+0x2f0>)
 8000772:	f000 ff7d 	bl	8001670 <print>
#endif
		Error_Handler();
 8000776:	f001 fbfb 	bl	8001f70 <Error_Handler>
#endif
		Error_Handler();
	}*/

	// Acumulador
	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 800077a:	4899      	ldr	r0, [pc, #612]	@ (80009e0 <main+0x2f4>)
 800077c:	f007 faae 	bl	8007cdc <HAL_FDCAN_Start>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0xa4>
	{

#if DEBUG
		print("Error al inicializar CAN_ACU");
 8000786:	4897      	ldr	r0, [pc, #604]	@ (80009e4 <main+0x2f8>)
 8000788:	f000 ff72 	bl	8001670 <print>

#endif
		Error_Handler();
 800078c:	f001 fbf0 	bl	8001f70 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4892      	ldr	r0, [pc, #584]	@ (80009e0 <main+0x2f4>)
 8000796:	f007 fc93 	bl	80080c0 <HAL_FDCAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <main+0xbe>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_ACU");
 80007a0:	4891      	ldr	r0, [pc, #580]	@ (80009e8 <main+0x2fc>)
 80007a2:	f000 ff65 	bl	8001670 <print>
#endif
		Error_Handler();
 80007a6:	f001 fbe3 	bl	8001f70 <Error_Handler>
	}

	//Dash
	if (HAL_FDCAN_Start(&hfdcan3) != HAL_OK)
 80007aa:	4890      	ldr	r0, [pc, #576]	@ (80009ec <main+0x300>)
 80007ac:	f007 fa96 	bl	8007cdc <HAL_FDCAN_Start>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <main+0xd4>
	{

#if DEBUG
		print("Error al inicializar CAN_DASH");
 80007b6:	488e      	ldr	r0, [pc, #568]	@ (80009f0 <main+0x304>)
 80007b8:	f000 ff5a 	bl	8001670 <print>

#endif
		Error_Handler();
 80007bc:	f001 fbd8 	bl	8001f70 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4889      	ldr	r0, [pc, #548]	@ (80009ec <main+0x300>)
 80007c6:	f007 fc7b 	bl	80080c0 <HAL_FDCAN_ActivateNotification>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d004      	beq.n	80007da <main+0xee>
									   0) != HAL_OK)
	{

#if DEBUG
		print("Error al activar NOTIFICATION CAN_DASH");
 80007d0:	4888      	ldr	r0, [pc, #544]	@ (80009f4 <main+0x308>)
 80007d2:	f000 ff4d 	bl	8001670 <print>
#endif
		Error_Handler();
 80007d6:	f001 fbcb 	bl	8001f70 <Error_Handler>
	}

	//---------- SECUENCIA DE ARRANQUE ----------
#if (DEBUG)
	print("Solicitar tensión inversor");
 80007da:	4887      	ldr	r0, [pc, #540]	@ (80009f8 <main+0x30c>)
 80007dc:	f000 ff48 	bl	8001670 <print>
#if (CALIBRATION)
	config_inv_lectura_v = 1;
#endif

	// Espera ACK inversor (DC bus)
	while (config_inv_lectura_v == 0)
 80007e0:	e009      	b.n	80007f6 <main+0x10a>
	{
		print("Solicitar tensión inversor");
 80007e2:	4885      	ldr	r0, [pc, #532]	@ (80009f8 <main+0x30c>)
 80007e4:	f000 ff44 	bl	8001670 <print>
		if (config_inv_lectura_v == 1)
 80007e8:	4b84      	ldr	r3, [pc, #528]	@ (80009fc <main+0x310>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d102      	bne.n	80007f6 <main+0x10a>
		{

#if DEBUG
			print("CAN_INV: Lectura de DC_BUS_VOLTAGE correctamente");
 80007f0:	4883      	ldr	r0, [pc, #524]	@ (8000a00 <main+0x314>)
 80007f2:	f000 ff3d 	bl	8001670 <print>
	while (config_inv_lectura_v == 0)
 80007f6:	4b81      	ldr	r3, [pc, #516]	@ (80009fc <main+0x310>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d0f1      	beq.n	80007e2 <main+0xf6>
	}

#if !CALIBRATION

	// PRE-CHARGE
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80007fe:	e056      	b.n	80008ae <main+0x1c2>
	{

#if DEBUG
		sprintf(TxBuffer, "DC_BUS_VOLTAGE: %i V\r\n", inv_dc_bus_voltage);
 8000800:	4b80      	ldr	r3, [pc, #512]	@ (8000a04 <main+0x318>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	4980      	ldr	r1, [pc, #512]	@ (8000a08 <main+0x31c>)
 8000808:	4880      	ldr	r0, [pc, #512]	@ (8000a0c <main+0x320>)
 800080a:	f011 f85b 	bl	80118c4 <siprintf>
		//print(TxBuffer);
		// printValue((int) ((byte1_voltage << 8) | byte0_voltage));
#endif

		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 800080e:	4b80      	ldr	r3, [pc, #512]	@ (8000a10 <main+0x324>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a80      	ldr	r2, [pc, #512]	@ (8000a14 <main+0x328>)
 8000814:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8000816:	4b7f      	ldr	r3, [pc, #508]	@ (8000a14 <main+0x328>)
 8000818:	2202      	movs	r2, #2
 800081a:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 800081c:	4b7d      	ldr	r3, [pc, #500]	@ (8000a14 <main+0x328>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000822:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000824:	4b7b      	ldr	r3, [pc, #492]	@ (8000a14 <main+0x328>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 800082a:	4b7a      	ldr	r3, [pc, #488]	@ (8000a14 <main+0x328>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8000830:	4b74      	ldr	r3, [pc, #464]	@ (8000a04 <main+0x318>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b78      	ldr	r3, [pc, #480]	@ (8000a18 <main+0x32c>)
 8000838:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 800083a:	4b72      	ldr	r3, [pc, #456]	@ (8000a04 <main+0x318>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	121b      	asrs	r3, r3, #8
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4b75      	ldr	r3, [pc, #468]	@ (8000a18 <main+0x32c>)
 8000844:	705a      	strb	r2, [r3, #1]
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000846:	4a74      	ldr	r2, [pc, #464]	@ (8000a18 <main+0x32c>)
 8000848:	4972      	ldr	r1, [pc, #456]	@ (8000a14 <main+0x328>)
 800084a:	4865      	ldr	r0, [pc, #404]	@ (80009e0 <main+0x2f4>)
 800084c:	f007 fa71 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000850:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000854:	4871      	ldr	r0, [pc, #452]	@ (8000a1c <main+0x330>)
 8000856:	f008 fb57 	bl	8008f08 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b70      	ldr	r3, [pc, #448]	@ (8000a20 <main+0x334>)
 8000860:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);
		if (precharge_button == 1){
 8000862:	4b6f      	ldr	r3, [pc, #444]	@ (8000a20 <main+0x334>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d11a      	bne.n	80008a0 <main+0x1b4>
			TxHeader_Acu.Identifier = 0x600;
 800086a:	4b6a      	ldr	r3, [pc, #424]	@ (8000a14 <main+0x328>)
 800086c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000870:	601a      	str	r2, [r3, #0]
			TxHeader_Acu.DataLength = 2;
 8000872:	4b68      	ldr	r3, [pc, #416]	@ (8000a14 <main+0x328>)
 8000874:	2202      	movs	r2, #2
 8000876:	60da      	str	r2, [r3, #12]
			TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8000878:	4b66      	ldr	r3, [pc, #408]	@ (8000a14 <main+0x328>)
 800087a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800087e:	605a      	str	r2, [r3, #4]
			TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8000880:	4b64      	ldr	r3, [pc, #400]	@ (8000a14 <main+0x328>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
			TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8000886:	4b63      	ldr	r3, [pc, #396]	@ (8000a14 <main+0x328>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]


			TxData_Acu[0] = precharge_button;
 800088c:	4b64      	ldr	r3, [pc, #400]	@ (8000a20 <main+0x334>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	4b61      	ldr	r3, [pc, #388]	@ (8000a18 <main+0x32c>)
 8000894:	701a      	strb	r2, [r3, #0]

			if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8000896:	4a60      	ldr	r2, [pc, #384]	@ (8000a18 <main+0x32c>)
 8000898:	495e      	ldr	r1, [pc, #376]	@ (8000a14 <main+0x328>)
 800089a:	4851      	ldr	r0, [pc, #324]	@ (80009e0 <main+0x2f4>)
 800089c:	f007 fa49 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
			}
		}



		if (precarga_inv == 1)
 80008a0:	4b60      	ldr	r3, [pc, #384]	@ (8000a24 <main+0x338>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d102      	bne.n	80008ae <main+0x1c2>
		{
#if DEBUG
			print("CAN_ACU: Precarga correcta");
 80008a8:	485f      	ldr	r0, [pc, #380]	@ (8000a28 <main+0x33c>)
 80008aa:	f000 fee1 	bl	8001670 <print>
	while (precarga_inv == 0 && inv_dc_bus_voltage < 300)
 80008ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000a24 <main+0x338>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d104      	bne.n	80008c0 <main+0x1d4>
 80008b6:	4b53      	ldr	r3, [pc, #332]	@ (8000a04 <main+0x318>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80008be:	db9f      	blt.n	8000800 <main+0x114>
#endif
		}

	}

	TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 80008c0:	4b53      	ldr	r3, [pc, #332]	@ (8000a10 <main+0x324>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a53      	ldr	r2, [pc, #332]	@ (8000a14 <main+0x328>)
 80008c6:	6013      	str	r3, [r2, #0]
	TxHeader_Acu.DataLength = 2;
 80008c8:	4b52      	ldr	r3, [pc, #328]	@ (8000a14 <main+0x328>)
 80008ca:	2202      	movs	r2, #2
 80008cc:	60da      	str	r2, [r3, #12]
	TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 80008ce:	4b51      	ldr	r3, [pc, #324]	@ (8000a14 <main+0x328>)
 80008d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d4:	605a      	str	r2, [r3, #4]
	TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 80008d6:	4b4f      	ldr	r3, [pc, #316]	@ (8000a14 <main+0x328>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
	TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 80008dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000a14 <main+0x328>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]

	TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 80008e2:	4b48      	ldr	r3, [pc, #288]	@ (8000a04 <main+0x318>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b4b      	ldr	r3, [pc, #300]	@ (8000a18 <main+0x32c>)
 80008ea:	701a      	strb	r2, [r3, #0]
	TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 80008ec:	4b45      	ldr	r3, [pc, #276]	@ (8000a04 <main+0x318>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	121b      	asrs	r3, r3, #8
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b48      	ldr	r3, [pc, #288]	@ (8000a18 <main+0x32c>)
 80008f6:	705a      	strb	r2, [r3, #1]
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 80008f8:	4a47      	ldr	r2, [pc, #284]	@ (8000a18 <main+0x32c>)
 80008fa:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <main+0x328>)
 80008fc:	4838      	ldr	r0, [pc, #224]	@ (80009e0 <main+0x2f4>)
 80008fe:	f007 fa18 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
	 * 10 ms interruption => 10ms * 264MHz = 2640000
	 * preescalado 264 (por ejemplo)
	 * timer count = 2640000 / 264 = 10000
	 */
#if !CALIBRATION
	HAL_TIM_Base_Start_IT(&htim16);
 8000902:	484a      	ldr	r0, [pc, #296]	@ (8000a2c <main+0x340>)
 8000904:	f00d fb74 	bl	800dff0 <HAL_TIM_Base_Start_IT>
#endif

#if 1
	// Espera a que se pulse el botón de arranque mientras se pisa el freno
	while (boton_arranque == 0)
 8000908:	e033      	b.n	8000972 <main+0x286>
	{

		HAL_ADC_Start(&hadc1);
 800090a:	4830      	ldr	r0, [pc, #192]	@ (80009cc <main+0x2e0>)
 800090c:	f002 fee8 	bl	80036e0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	482d      	ldr	r0, [pc, #180]	@ (80009cc <main+0x2e0>)
 8000916:	f002 ffe1 	bl	80038dc <HAL_ADC_PollForConversion>

		s_freno = HAL_ADC_GetValue(&hadc1);
 800091a:	482c      	ldr	r0, [pc, #176]	@ (80009cc <main+0x2e0>)
 800091c:	f003 f9ae 	bl	8003c7c <HAL_ADC_GetValue>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b42      	ldr	r3, [pc, #264]	@ (8000a30 <main+0x344>)
 8000926:	601a      	str	r2, [r3, #0]

		HAL_ADC_Stop(&hadc1);
 8000928:	4828      	ldr	r0, [pc, #160]	@ (80009cc <main+0x2e0>)
 800092a:	f002 ffa3 	bl	8003874 <HAL_ADC_Stop>

		//printValue(s_freno);
		print("Pulsa botón");
 800092e:	4841      	ldr	r0, [pc, #260]	@ (8000a34 <main+0x348>)
 8000930:	f000 fe9e 	bl	8001670 <print>

		start_button_act = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port,
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4838      	ldr	r0, [pc, #224]	@ (8000a1c <main+0x330>)
 800093a:	f008 fae5 	bl	8008f08 <HAL_GPIO_ReadPin>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	4b3d      	ldr	r3, [pc, #244]	@ (8000a38 <main+0x34c>)
 8000944:	601a      	str	r2, [r3, #0]
											START_BUTTON_Pin);

		if (start_button_act == 1)
 8000946:	4b3c      	ldr	r3, [pc, #240]	@ (8000a38 <main+0x34c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d111      	bne.n	8000972 <main+0x286>
		{

#if DEBUG
			//printValue(s_freno);
			print("Pulsa freno");
 800094e:	483b      	ldr	r0, [pc, #236]	@ (8000a3c <main+0x350>)
 8000950:	f000 fe8e 	bl	8001670 <print>
#endif
			if (s_freno > 900)
 8000954:	4b36      	ldr	r3, [pc, #216]	@ (8000a30 <main+0x344>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800095c:	dd06      	ble.n	800096c <main+0x280>
			{
				boton_arranque = 1;
 800095e:	4b38      	ldr	r3, [pc, #224]	@ (8000a40 <main+0x354>)
 8000960:	2201      	movs	r2, #1
 8000962:	601a      	str	r2, [r3, #0]
#if DEBUG
				print("Coche arrancado correctamente");
 8000964:	4837      	ldr	r0, [pc, #220]	@ (8000a44 <main+0x358>)
 8000966:	f000 fe83 	bl	8001670 <print>
 800096a:	e002      	b.n	8000972 <main+0x286>
#endif
			}
			else
			{
#if DEBUG
				print("Pulsar freno para arrancar");
 800096c:	4836      	ldr	r0, [pc, #216]	@ (8000a48 <main+0x35c>)
 800096e:	f000 fe7f 	bl	8001670 <print>
	while (boton_arranque == 0)
 8000972:	4b33      	ldr	r3, [pc, #204]	@ (8000a40 <main+0x354>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0c7      	beq.n	800090a <main+0x21e>
	}
#endif

	// Activar READY-TO-DRIVE-SOUND (RTDS) durante 2s
#if DEBUG
	print("RTDS sonando");
 800097a:	4834      	ldr	r0, [pc, #208]	@ (8000a4c <main+0x360>)
 800097c:	f000 fe78 	bl	8001670 <print>
#endif
#if !CALIBRATION

	flag_r2d = 1;
 8000980:	4b33      	ldr	r3, [pc, #204]	@ (8000a50 <main+0x364>)
 8000982:	2201      	movs	r2, #1
 8000984:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_SET); // Enciende RTDS
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	4832      	ldr	r0, [pc, #200]	@ (8000a54 <main+0x368>)
 800098c:	f008 fad4 	bl	8008f38 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8000990:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000994:	f002 f93c 	bl	8002c10 <HAL_Delay>
	HAL_GPIO_WritePin(RTDS_GPIO_Port, RTDS_Pin, GPIO_PIN_RESET); // Apaga RTDS
 8000998:	2200      	movs	r2, #0
 800099a:	2102      	movs	r1, #2
 800099c:	482d      	ldr	r0, [pc, #180]	@ (8000a54 <main+0x368>)
 800099e:	f008 facb 	bl	8008f38 <HAL_GPIO_WritePin>

#endif

#if DEBUG
	print("RTDS apagado");
 80009a2:	482d      	ldr	r0, [pc, #180]	@ (8000a58 <main+0x36c>)
 80009a4:	f000 fe64 	bl	8001670 <print>
#endif

	// Estado STAND BY inversor
	while (state != 3)
 80009a8:	e006      	b.n	80009b8 <main+0x2cc>
	{
		if (state == 3)
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <main+0x370>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b03      	cmp	r3, #3
 80009b0:	d102      	bne.n	80009b8 <main+0x2cc>
		{
#if DEBUG
			print("Precarga");
 80009b2:	482b      	ldr	r0, [pc, #172]	@ (8000a60 <main+0x374>)
 80009b4:	f000 fe5c 	bl	8001670 <print>
	while (state != 3)
 80009b8:	4b28      	ldr	r3, [pc, #160]	@ (8000a5c <main+0x370>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d1f4      	bne.n	80009aa <main+0x2be>
#endif
		}
	}

#if DEBUG
	print("state : stand by");
 80009c0:	4828      	ldr	r0, [pc, #160]	@ (8000a64 <main+0x378>)
 80009c2:	f000 fe55 	bl	8001670 <print>
#endif

	while (state != 4)
 80009c6:	e087      	b.n	8000ad8 <main+0x3ec>
 80009c8:	240006fc 	.word	0x240006fc
 80009cc:	24000094 	.word	0x24000094
 80009d0:	0801221c 	.word	0x0801221c
 80009d4:	240001ec 	.word	0x240001ec
 80009d8:	0801223c 	.word	0x0801223c
 80009dc:	0801225c 	.word	0x0801225c
 80009e0:	2400028c 	.word	0x2400028c
 80009e4:	08012284 	.word	0x08012284
 80009e8:	080122a4 	.word	0x080122a4
 80009ec:	2400032c 	.word	0x2400032c
 80009f0:	080122cc 	.word	0x080122cc
 80009f4:	080122ec 	.word	0x080122ec
 80009f8:	08012314 	.word	0x08012314
 80009fc:	2400008c 	.word	0x2400008c
 8000a00:	08012330 	.word	0x08012330
 8000a04:	240006f4 	.word	0x240006f4
 8000a08:	08012364 	.word	0x08012364
 8000a0c:	24000790 	.word	0x24000790
 8000a10:	24000004 	.word	0x24000004
 8000a14:	24000654 	.word	0x24000654
 8000a18:	240006d8 	.word	0x240006d8
 8000a1c:	58021400 	.word	0x58021400
 8000a20:	24000728 	.word	0x24000728
 8000a24:	24000088 	.word	0x24000088
 8000a28:	0801237c 	.word	0x0801237c
 8000a2c:	24000494 	.word	0x24000494
 8000a30:	2400070c 	.word	0x2400070c
 8000a34:	08012398 	.word	0x08012398
 8000a38:	240006f0 	.word	0x240006f0
 8000a3c:	080123a8 	.word	0x080123a8
 8000a40:	24000090 	.word	0x24000090
 8000a44:	080123b4 	.word	0x080123b4
 8000a48:	080123d4 	.word	0x080123d4
 8000a4c:	080123f0 	.word	0x080123f0
 8000a50:	2400088c 	.word	0x2400088c
 8000a54:	58020800 	.word	0x58020800
 8000a58:	08012400 	.word	0x08012400
 8000a5c:	2400071a 	.word	0x2400071a
 8000a60:	08012410 	.word	0x08012410
 8000a64:	0801241c 	.word	0x0801241c
	{
		// Estado READY inversor
		TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8000a68:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <main+0x400>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a20      	ldr	r2, [pc, #128]	@ (8000af0 <main+0x404>)
 8000a6e:	6013      	str	r3, [r2, #0]
		TxHeader_Inv.DataLength = 3;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <main+0x404>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	60da      	str	r2, [r3, #12]
		TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	@ (8000af0 <main+0x404>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	605a      	str	r2, [r3, #4]

		TxData_Inv[0] = 0x0;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <main+0x408>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <main+0x408>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = 0x4;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	@ (8000af4 <main+0x408>)
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	709a      	strb	r2, [r3, #2]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000a8e:	4a19      	ldr	r2, [pc, #100]	@ (8000af4 <main+0x408>)
 8000a90:	4917      	ldr	r1, [pc, #92]	@ (8000af0 <main+0x404>)
 8000a92:	4819      	ldr	r0, [pc, #100]	@ (8000af8 <main+0x40c>)
 8000a94:	f007 f94d 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>

		TxHeader_Inv.Identifier = 0x362;
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <main+0x404>)
 8000a9a:	f240 3262 	movw	r2, #866	@ 0x362
 8000a9e:	601a      	str	r2, [r3, #0]
		TxHeader_Inv.DataLength = 4;
 8000aa0:	4b13      	ldr	r3, [pc, #76]	@ (8000af0 <main+0x404>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	60da      	str	r2, [r3, #12]

		real_torque = 0;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <main+0x410>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	801a      	strh	r2, [r3, #0]

		TxData_Inv[0] = 0x0;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <main+0x408>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		TxData_Inv[1] = 0x0;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <main+0x408>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	705a      	strb	r2, [r3, #1]
		TxData_Inv[2] = real_torque;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <main+0x410>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <main+0x408>)
 8000ac0:	709a      	strb	r2, [r3, #2]
		TxData_Inv[3] = 0x0;
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <main+0x408>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	70da      	strb	r2, [r3, #3]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <main+0x408>)
 8000aca:	4909      	ldr	r1, [pc, #36]	@ (8000af0 <main+0x404>)
 8000acc:	480a      	ldr	r0, [pc, #40]	@ (8000af8 <main+0x40c>)
 8000ace:	f007 f930 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
		HAL_Delay(10);
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f002 f89c 	bl	8002c10 <HAL_Delay>
	while (state != 4)
 8000ad8:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <main+0x414>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b04      	cmp	r3, #4
 8000ade:	d1c3      	bne.n	8000a68 <main+0x37c>

	}

#if DEBUG
	print("state: ready");
 8000ae0:	4808      	ldr	r0, [pc, #32]	@ (8000b04 <main+0x418>)
 8000ae2:	f000 fdc5 	bl	8001670 <print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000ae6:	bf00      	nop
 8000ae8:	e7fd      	b.n	8000ae6 <main+0x3fa>
 8000aea:	bf00      	nop
 8000aec:	24000000 	.word	0x24000000
 8000af0:	24000608 	.word	0x24000608
 8000af4:	240006c8 	.word	0x240006c8
 8000af8:	240001ec 	.word	0x240001ec
 8000afc:	24000718 	.word	0x24000718
 8000b00:	2400071a 	.word	0x2400071a
 8000b04:	08012430 	.word	0x08012430

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b09c      	sub	sp, #112	@ 0x70
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b12:	224c      	movs	r2, #76	@ 0x4c
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f010 fef6 	bl	8011908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2220      	movs	r2, #32
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f010 fef0 	bl	8011908 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b28:	2002      	movs	r0, #2
 8000b2a:	f008 fa1f 	bl	8008f6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b2b      	ldr	r3, [pc, #172]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b34:	699b      	ldr	r3, [r3, #24]
 8000b36:	4a2a      	ldr	r2, [pc, #168]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b3c:	6193      	str	r3, [r2, #24]
 8000b3e:	4b28      	ldr	r3, [pc, #160]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b4a:	bf00      	nop
 8000b4c:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <SystemClock_Config+0xd8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b58:	d1f8      	bne.n	8000b4c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	2302      	movs	r3, #2
 8000b66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8000b70:	232c      	movs	r3, #44	@ 0x2c
 8000b72:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b80:	230c      	movs	r3, #12
 8000b82:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	4618      	mov	r0, r3
 8000b92:	f008 fa25 	bl	8008fe0 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b9c:	f001 f9e8 	bl	8001f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	233f      	movs	r3, #63	@ 0x3f
 8000ba2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bac:	2308      	movs	r3, #8
 8000bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bb0:	2340      	movs	r3, #64	@ 0x40
 8000bb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bb4:	2340      	movs	r3, #64	@ 0x40
 8000bb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bb8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bbc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bbe:	2340      	movs	r3, #64	@ 0x40
 8000bc0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2103      	movs	r1, #3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f008 fde4 	bl	8009794 <HAL_RCC_ClockConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000bd2:	f001 f9cd 	bl	8001f70 <Error_Handler>
  }
}
 8000bd6:	bf00      	nop
 8000bd8:	3770      	adds	r7, #112	@ 0x70
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	58024800 	.word	0x58024800

08000be4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b0ae      	sub	sp, #184	@ 0xb8
 8000be8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	22b8      	movs	r2, #184	@ 0xb8
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f010 fe89 	bl	8011908 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC;
 8000bf6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000bfa:	f04f 0300 	mov.w	r3, #0
 8000bfe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c02:	2302      	movs	r3, #2
 8000c04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000c06:	2310      	movs	r3, #16
 8000c08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c16:	23c0      	movs	r3, #192	@ 0xc0
 8000c18:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000c22:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c26:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4618      	mov	r0, r3
 8000c32:	f009 f93b 	bl	8009eac <HAL_RCCEx_PeriphCLKConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000c3c:	f001 f998 	bl	8001f70 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	37b8      	adds	r7, #184	@ 0xb8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2224      	movs	r2, #36	@ 0x24
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f010 fe51 	bl	8011908 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c66:	4b41      	ldr	r3, [pc, #260]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c68:	4a41      	ldr	r2, [pc, #260]	@ (8000d70 <MX_ADC1_Init+0x128>)
 8000c6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c6e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c74:	4b3d      	ldr	r3, [pc, #244]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c76:	2208      	movs	r2, #8
 8000c78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000c80:	4b3a      	ldr	r3, [pc, #232]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c82:	2208      	movs	r2, #8
 8000c84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c86:	4b39      	ldr	r3, [pc, #228]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c8c:	4b37      	ldr	r3, [pc, #220]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000c92:	4b36      	ldr	r3, [pc, #216]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c94:	2203      	movs	r2, #3
 8000c96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000cae:	2203      	movs	r2, #3
 8000cb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 8000cc6:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ccc:	4827      	ldr	r0, [pc, #156]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000cce:	f002 faff 	bl	80032d0 <HAL_ADC_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000cd8:	f001 f94a 	bl	8001f70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4821      	ldr	r0, [pc, #132]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000ce8:	f004 fade 	bl	80052a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000cf2:	f001 f93d 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <MX_ADC1_Init+0x12c>)
 8000cf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d02:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d16:	463b      	mov	r3, r7
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4814      	ldr	r0, [pc, #80]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000d1c:	f003 fa14 	bl	8004148 <HAL_ADC_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d26:	f001 f923 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <MX_ADC1_Init+0x130>)
 8000d2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d32:	463b      	mov	r3, r7
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000d38:	f003 fa06 	bl	8004148 <HAL_ADC_ConfigChannel>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d42:	f001 f915 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <MX_ADC1_Init+0x134>)
 8000d48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <MX_ADC1_Init+0x124>)
 8000d54:	f003 f9f8 	bl	8004148 <HAL_ADC_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d5e:	f001 f907 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	@ 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24000094 	.word	0x24000094
 8000d70:	40022000 	.word	0x40022000
 8000d74:	10c00010 	.word	0x10c00010
 8000d78:	14f00020 	.word	0x14f00020
 8000d7c:	08600004 	.word	0x08600004

08000d80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2224      	movs	r2, #36	@ 0x24
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f010 fdbb 	bl	8011908 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000d94:	4a2c      	ldr	r2, [pc, #176]	@ (8000e48 <MX_ADC2_Init+0xc8>)
 8000d96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000d9a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000da0:	4b28      	ldr	r3, [pc, #160]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000da6:	4b27      	ldr	r3, [pc, #156]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dac:	4b25      	ldr	r3, [pc, #148]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000db2:	4b24      	ldr	r3, [pc, #144]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000de4:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000df8:	4812      	ldr	r0, [pc, #72]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000dfa:	f002 fa69 	bl	80032d0 <HAL_ADC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000e04:	f001 f8b4 	bl	8001f70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e08:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <MX_ADC2_Init+0xcc>)
 8000e0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e0c:	2306      	movs	r3, #6
 8000e0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e14:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000e18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_ADC2_Init+0xc4>)
 8000e2e:	f003 f98b 	bl	8004148 <HAL_ADC_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8000e38:	f001 f89a 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	@ 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	24000104 	.word	0x24000104
 8000e48:	40022100 	.word	0x40022100
 8000e4c:	25b00200 	.word	0x25b00200

08000e50 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e56:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e58:	4a3b      	ldr	r2, [pc, #236]	@ (8000f48 <MX_FDCAN1_Init+0xf8>)
 8000e5a:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e5c:	4b39      	ldr	r3, [pc, #228]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e62:	4b38      	ldr	r3, [pc, #224]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e68:	4b36      	ldr	r3, [pc, #216]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e6e:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e74:	4b33      	ldr	r3, [pc, #204]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e7c:	2206      	movs	r2, #6
 8000e7e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e80:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e86:	4b2f      	ldr	r3, [pc, #188]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e8e:	2205      	movs	r2, #5
 8000e90:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e92:	4b2c      	ldr	r3, [pc, #176]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000eb6:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000eca:	2220      	movs	r2, #32
 8000ecc:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000eee:	2220      	movs	r2, #32
 8000ef0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000efa:	2204      	movs	r2, #4
 8000efc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000efe:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000f00:	f006 fc98 	bl	8007834 <HAL_FDCAN_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8000f0a:	f001 f831 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000f16:	2302      	movs	r3, #2
 8000f18:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000f26:	463b      	mov	r3, r7
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4806      	ldr	r0, [pc, #24]	@ (8000f44 <MX_FDCAN1_Init+0xf4>)
 8000f2c:	f006 fe60 	bl	8007bf0 <HAL_FDCAN_ConfigFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_FDCAN1_Init+0xea>
	{
		Error_Handler();
 8000f36:	f001 f81b 	bl	8001f70 <Error_Handler>
	}
  /* USER CODE END FDCAN1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	240001ec 	.word	0x240001ec
 8000f48:	4000a000 	.word	0x4000a000

08000f4c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f52:	4b3b      	ldr	r3, [pc, #236]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f54:	4a3b      	ldr	r2, [pc, #236]	@ (8001044 <MX_FDCAN2_Init+0xf8>)
 8000f56:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f58:	4b39      	ldr	r3, [pc, #228]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f5e:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f64:	4b36      	ldr	r3, [pc, #216]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f6a:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f70:	4b33      	ldr	r3, [pc, #204]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8000f76:	4b32      	ldr	r3, [pc, #200]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f78:	2206      	movs	r2, #6
 8000f7a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f7c:	4b30      	ldr	r3, [pc, #192]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f82:	4b2f      	ldr	r3, [pc, #188]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f84:	2202      	movs	r2, #2
 8000f86:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8000f88:	4b2d      	ldr	r3, [pc, #180]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f8a:	2205      	movs	r2, #5
 8000f8c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000fac:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 1;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 16;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fba:	2210      	movs	r2, #16
 8000fbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 16;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fd8:	2204      	movs	r2, #4
 8000fda:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 16;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000fea:	2210      	movs	r2, #16
 8000fec:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000ffa:	4811      	ldr	r0, [pc, #68]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 8000ffc:	f006 fc1a 	bl	8007834 <HAL_FDCAN_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001006:	f000 ffb3 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800100a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800100e:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001014:	2302      	movs	r3, #2
 8001016:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001018:	2301      	movs	r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 800101c:	2300      	movs	r3, #0
 800101e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <MX_FDCAN2_Init+0xf4>)
 800102a:	f006 fde1 	bl	8007bf0 <HAL_FDCAN_ConfigFilter>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_FDCAN2_Init+0xec>
	{
		Error_Handler();
 8001034:	f000 ff9c 	bl	8001f70 <Error_Handler>
	}
  /* USER CODE END FDCAN2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2400028c 	.word	0x2400028c
 8001044:	4000a400 	.word	0x4000a400

08001048 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800104e:	4b3b      	ldr	r3, [pc, #236]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001050:	4a3b      	ldr	r2, [pc, #236]	@ (8001140 <MX_FDCAN3_Init+0xf8>)
 8001052:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001054:	4b39      	ldr	r3, [pc, #228]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800105a:	4b38      	ldr	r3, [pc, #224]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 800105c:	2200      	movs	r2, #0
 800105e:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001060:	4b36      	ldr	r3, [pc, #216]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001062:	2200      	movs	r2, #0
 8001064:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001068:	2200      	movs	r2, #0
 800106a:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800106c:	4b33      	ldr	r3, [pc, #204]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 800106e:	2200      	movs	r2, #0
 8001070:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001074:	2206      	movs	r2, #6
 8001076:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001078:	4b30      	ldr	r3, [pc, #192]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 800107a:	2201      	movs	r2, #1
 800107c:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800107e:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001080:	2202      	movs	r2, #2
 8001082:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001084:	4b2d      	ldr	r3, [pc, #180]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001086:	2205      	movs	r2, #5
 8001088:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800108a:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 800108c:	2201      	movs	r2, #1
 800108e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001092:	2201      	movs	r2, #1
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001096:	4b29      	ldr	r3, [pc, #164]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001098:	2201      	movs	r2, #1
 800109a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800109c:	4b27      	ldr	r3, [pc, #156]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 800109e:	2201      	movs	r2, #1
 80010a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80010a2:	4b26      	ldr	r3, [pc, #152]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 80010a8:	4b24      	ldr	r3, [pc, #144]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 1;
 80010ae:	4b23      	ldr	r3, [pc, #140]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 16;
 80010b4:	4b21      	ldr	r3, [pc, #132]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010b6:	2210      	movs	r2, #16
 80010b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80010ba:	4b20      	ldr	r3, [pc, #128]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010bc:	2204      	movs	r2, #4
 80010be:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 16;
 80010c0:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010c2:	2210      	movs	r2, #16
 80010c4:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010c8:	2204      	movs	r2, #4
 80010ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80010cc:	4b1b      	ldr	r3, [pc, #108]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80010d2:	4b1a      	ldr	r3, [pc, #104]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80010de:	4b17      	ldr	r3, [pc, #92]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 16;
 80010e4:	4b15      	ldr	r3, [pc, #84]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010e6:	2210      	movs	r2, #16
 80010e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80010ea:	4b14      	ldr	r3, [pc, #80]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80010f0:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80010f6:	4811      	ldr	r0, [pc, #68]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 80010f8:	f006 fb9c 	bl	8007834 <HAL_FDCAN_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8001102:	f000 ff35 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8001106:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110a:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001110:	2302      	movs	r3, #2
 8001112:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001114:	2301      	movs	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x0;
 8001118:	2300      	movs	r3, #0
 800111a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x0;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
	if (HAL_FDCAN_ConfigFilter(&hfdcan3, &sFilterConfig) != HAL_OK)
 8001120:	463b      	mov	r3, r7
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	@ (800113c <MX_FDCAN3_Init+0xf4>)
 8001126:	f006 fd63 	bl	8007bf0 <HAL_FDCAN_ConfigFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_FDCAN3_Init+0xec>
	{
		Error_Handler();
 8001130:	f000 ff1e 	bl	8001f70 <Error_Handler>
	}

  /* USER CODE END FDCAN3_Init 2 */

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	2400032c 	.word	0x2400032c
 8001140:	4000d400 	.word	0x4000d400

08001144 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_SDMMC1_SD_Init+0x34>)
 800114a:	4a0c      	ldr	r2, [pc, #48]	@ (800117c <MX_SDMMC1_SD_Init+0x38>)
 800114c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <MX_SDMMC1_SD_Init+0x34>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_SDMMC1_SD_Init+0x34>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800115a:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <MX_SDMMC1_SD_Init+0x34>)
 800115c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001160:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001162:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <MX_SDMMC1_SD_Init+0x34>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 2;
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <MX_SDMMC1_SD_Init+0x34>)
 800116a:	2202      	movs	r2, #2
 800116c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	240003cc 	.word	0x240003cc
 800117c:	52007000 	.word	0x52007000

08001180 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b09c      	sub	sp, #112	@ 0x70
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001186:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001194:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	2234      	movs	r2, #52	@ 0x34
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f010 fba4 	bl	8011908 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c0:	4b49      	ldr	r3, [pc, #292]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011c2:	4a4a      	ldr	r2, [pc, #296]	@ (80012ec <MX_TIM1_Init+0x16c>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011c6:	4b48      	ldr	r3, [pc, #288]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b46      	ldr	r3, [pc, #280]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011d2:	4b45      	ldr	r3, [pc, #276]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b43      	ldr	r3, [pc, #268]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e0:	4b41      	ldr	r3, [pc, #260]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011e6:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011e8:	2280      	movs	r2, #128	@ 0x80
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ec:	483e      	ldr	r0, [pc, #248]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80011ee:	f00c fea7 	bl	800df40 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011f8:	f000 feba 	bl	8001f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001200:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001206:	4619      	mov	r1, r3
 8001208:	4837      	ldr	r0, [pc, #220]	@ (80012e8 <MX_TIM1_Init+0x168>)
 800120a:	f00d f9f3 	bl	800e5f4 <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001214:	f000 feac 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001218:	4833      	ldr	r0, [pc, #204]	@ (80012e8 <MX_TIM1_Init+0x168>)
 800121a:	f00c ff6f 	bl	800e0fc <HAL_TIM_PWM_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001224:	f000 fea4 	bl	8001f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001234:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001238:	4619      	mov	r1, r3
 800123a:	482b      	ldr	r0, [pc, #172]	@ (80012e8 <MX_TIM1_Init+0x168>)
 800123c:	f00d ff20 	bl	800f080 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001246:	f000 fe93 	bl	8001f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124a:	2360      	movs	r3, #96	@ 0x60
 800124c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001252:	2300      	movs	r3, #0
 8001254:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800126a:	2200      	movs	r2, #0
 800126c:	4619      	mov	r1, r3
 800126e:	481e      	ldr	r0, [pc, #120]	@ (80012e8 <MX_TIM1_Init+0x168>)
 8001270:	f00d f8ac 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800127a:	f000 fe79 	bl	8001f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800127e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4818      	ldr	r0, [pc, #96]	@ (80012e8 <MX_TIM1_Init+0x168>)
 8001288:	f00d f8a0 	bl	800e3cc <HAL_TIM_PWM_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001292:	f000 fe6d 	bl	8001f70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012ae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012c6:	1d3b      	adds	r3, r7, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4807      	ldr	r0, [pc, #28]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80012cc:	f00d ff74 	bl	800f1b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80012d6:	f000 fe4b 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012da:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <MX_TIM1_Init+0x168>)
 80012dc:	f001 f9c0 	bl	8002660 <HAL_TIM_MspPostInit>

}
 80012e0:	bf00      	nop
 80012e2:	3770      	adds	r7, #112	@ 0x70
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	24000448 	.word	0x24000448
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012f4:	4b10      	ldr	r3, [pc, #64]	@ (8001338 <MX_TIM16_Init+0x48>)
 80012f6:	4a11      	ldr	r2, [pc, #68]	@ (800133c <MX_TIM16_Init+0x4c>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 528;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_TIM16_Init+0x48>)
 80012fc:	f44f 7204 	mov.w	r2, #528	@ 0x210
 8001300:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MX_TIM16_Init+0x48>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000 - 1;
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_TIM16_Init+0x48>)
 800130a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800130e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_TIM16_Init+0x48>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <MX_TIM16_Init+0x48>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <MX_TIM16_Init+0x48>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_TIM16_Init+0x48>)
 8001324:	f00c fe0c 	bl	800df40 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800132e:	f000 fe1f 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	24000494 	.word	0x24000494
 800133c:	40014400 	.word	0x40014400

08001340 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001344:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001346:	4a23      	ldr	r2, [pc, #140]	@ (80013d4 <MX_USART1_UART_Init+0x94>)
 8001348:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800134a:	4b21      	ldr	r3, [pc, #132]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b1f      	ldr	r3, [pc, #124]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b1a      	ldr	r3, [pc, #104]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b17      	ldr	r3, [pc, #92]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001388:	4811      	ldr	r0, [pc, #68]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800138a:	f00d ffbf 	bl	800f30c <HAL_UART_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001394:	f000 fdec 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001398:	2100      	movs	r1, #0
 800139a:	480d      	ldr	r0, [pc, #52]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 800139c:	f00f f959 	bl	8010652 <HAL_UARTEx_SetTxFifoThreshold>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80013a6:	f000 fde3 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013aa:	2100      	movs	r1, #0
 80013ac:	4808      	ldr	r0, [pc, #32]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 80013ae:	f00f f98e 	bl	80106ce <HAL_UARTEx_SetRxFifoThreshold>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80013b8:	f000 fdda 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	@ (80013d0 <MX_USART1_UART_Init+0x90>)
 80013be:	f00f f90f 	bl	80105e0 <HAL_UARTEx_DisableFifoMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 fdd2 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	240004e0 	.word	0x240004e0
 80013d4:	40011000 	.word	0x40011000

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013de:	4a23      	ldr	r2, [pc, #140]	@ (800146c <MX_USART2_UART_Init+0x94>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140e:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800141a:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001420:	4811      	ldr	r0, [pc, #68]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001422:	f00d ff73 	bl	800f30c <HAL_UART_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800142c:	f000 fda0 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001430:	2100      	movs	r1, #0
 8001432:	480d      	ldr	r0, [pc, #52]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001434:	f00f f90d 	bl	8010652 <HAL_UARTEx_SetTxFifoThreshold>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800143e:	f000 fd97 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001446:	f00f f942 	bl	80106ce <HAL_UARTEx_SetRxFifoThreshold>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001450:	f000 fd8e 	bl	8001f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_USART2_UART_Init+0x90>)
 8001456:	f00f f8c3 	bl	80105e0 <HAL_UARTEx_DisableFifoMode>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001460:	f000 fd86 	bl	8001f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	24000574 	.word	0x24000574
 800146c:	40004400 	.word	0x40004400

08001470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001476:	4b0d      	ldr	r3, [pc, #52]	@ (80014ac <MX_DMA_Init+0x3c>)
 8001478:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800147c:	4a0b      	ldr	r2, [pc, #44]	@ (80014ac <MX_DMA_Init+0x3c>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <MX_DMA_Init+0x3c>)
 8001488:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	200b      	movs	r0, #11
 800149a:	f004 f8c2 	bl	8005622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800149e:	200b      	movs	r0, #11
 80014a0:	f004 f8d9 	bl	8005656 <HAL_NVIC_EnableIRQ>

}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	58024400 	.word	0x58024400

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	@ 0x38
 80014b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c6:	4b65      	ldr	r3, [pc, #404]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80014c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014cc:	4a63      	ldr	r2, [pc, #396]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80014ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d6:	4b61      	ldr	r3, [pc, #388]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e0:	623b      	str	r3, [r7, #32]
 80014e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	4b5d      	ldr	r3, [pc, #372]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80014e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ea:	4a5c      	ldr	r2, [pc, #368]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f4:	4b59      	ldr	r3, [pc, #356]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b56      	ldr	r3, [pc, #344]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001508:	4a54      	ldr	r2, [pc, #336]	@ (800165c <MX_GPIO_Init+0x1ac>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001512:	4b52      	ldr	r3, [pc, #328]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b4e      	ldr	r3, [pc, #312]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001526:	4a4d      	ldr	r2, [pc, #308]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001530:	4b4a      	ldr	r3, [pc, #296]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001544:	4a45      	ldr	r2, [pc, #276]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001546:	f043 0320 	orr.w	r3, r3, #32
 800154a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800154e:	4b43      	ldr	r3, [pc, #268]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800155c:	4b3f      	ldr	r3, [pc, #252]	@ (800165c <MX_GPIO_Init+0x1ac>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	4a3e      	ldr	r2, [pc, #248]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001564:	f043 0310 	orr.w	r3, r3, #16
 8001568:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800156c:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <MX_GPIO_Init+0x1ac>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <MX_GPIO_Init+0x1ac>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001580:	4a36      	ldr	r2, [pc, #216]	@ (800165c <MX_GPIO_Init+0x1ac>)
 8001582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001586:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <MX_GPIO_Init+0x1ac>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <MX_GPIO_Init+0x1ac>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800159e:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80015a0:	f043 0308 	orr.w	r3, r3, #8
 80015a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <MX_GPIO_Init+0x1ac>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, START_BUTTON_LED_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2103      	movs	r1, #3
 80015ba:	4829      	ldr	r0, [pc, #164]	@ (8001660 <MX_GPIO_Init+0x1b0>)
 80015bc:	f007 fcbc 	bl	8008f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_Data_GPIO_Port, DS18B20_Data_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c6:	4827      	ldr	r0, [pc, #156]	@ (8001664 <MX_GPIO_Init+0x1b4>)
 80015c8:	f007 fcb6 	bl	8008f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : START_BUTTON_LED_Pin RTDS_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_LED_Pin|RTDS_Pin;
 80015cc:	2303      	movs	r3, #3
 80015ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	481f      	ldr	r0, [pc, #124]	@ (8001660 <MX_GPIO_Init+0x1b0>)
 80015e4:	f007 fae8 	bl	8008bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80015e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fa:	4619      	mov	r1, r3
 80015fc:	481a      	ldr	r0, [pc, #104]	@ (8001668 <MX_GPIO_Init+0x1b8>)
 80015fe:	f007 fadb 	bl	8008bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MICROSD_DET_Pin */
  GPIO_InitStruct.Pin = MICROSD_DET_Pin;
 8001602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001608:	2300      	movs	r3, #0
 800160a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MICROSD_DET_GPIO_Port, &GPIO_InitStruct);
 8001610:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001614:	4619      	mov	r1, r3
 8001616:	4814      	ldr	r0, [pc, #80]	@ (8001668 <MX_GPIO_Init+0x1b8>)
 8001618:	f007 face 	bl	8008bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Data_Pin */
  GPIO_InitStruct.Pin = DS18B20_Data_Pin;
 800161c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001620:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(DS18B20_Data_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	4619      	mov	r1, r3
 8001634:	480b      	ldr	r0, [pc, #44]	@ (8001664 <MX_GPIO_Init+0x1b4>)
 8001636:	f007 fabf 	bl	8008bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON1_Pin */
  GPIO_InitStruct.Pin = START_BUTTON1_Pin;
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001642:	2302      	movs	r3, #2
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(START_BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <MX_GPIO_Init+0x1bc>)
 800164e:	f007 fab3 	bl	8008bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001652:	bf00      	nop
 8001654:	3738      	adds	r7, #56	@ 0x38
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	58024400 	.word	0x58024400
 8001660:	58020800 	.word	0x58020800
 8001664:	58021000 	.word	0x58021000
 8001668:	58021400 	.word	0x58021400
 800166c:	58021800 	.word	0x58021800

08001670 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[])
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4909      	ldr	r1, [pc, #36]	@ (80016a0 <print+0x30>)
 800167c:	4809      	ldr	r0, [pc, #36]	@ (80016a4 <print+0x34>)
 800167e:	f010 f921 	bl	80118c4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 8001682:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <print+0x34>)
 8001684:	f7fe fe44 	bl	8000310 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	4904      	ldr	r1, [pc, #16]	@ (80016a4 <print+0x34>)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <print+0x38>)
 8001694:	f00d fe8a 	bl	800f3ac <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08012440 	.word	0x08012440
 80016a4:	2400072c 	.word	0x2400072c
 80016a8:	24000574 	.word	0x24000574

080016ac <printValue>:

void printValue(int value)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%hu \n\r", value);
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4909      	ldr	r1, [pc, #36]	@ (80016dc <printValue+0x30>)
 80016b8:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <printValue+0x34>)
 80016ba:	f010 f903 	bl	80118c4 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
 80016be:	4808      	ldr	r0, [pc, #32]	@ (80016e0 <printValue+0x34>)
 80016c0:	f7fe fe26 	bl	8000310 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	4904      	ldr	r1, [pc, #16]	@ (80016e0 <printValue+0x34>)
 80016ce:	4805      	ldr	r0, [pc, #20]	@ (80016e4 <printValue+0x38>)
 80016d0:	f00d fe6c 	bl	800f3ac <HAL_UART_Transmit>
					  HAL_MAX_DELAY);
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	08012448 	.word	0x08012448
 80016e0:	2400072c 	.word	0x2400072c
 80016e4:	24000574 	.word	0x24000574

080016e8 <HAL_ADC_ConvCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t *)uart_msg, strlen(uart_msg),
					  HAL_MAX_DELAY);
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	//s1_aceleracion = buffer_adc[0];
	//s2_aceleracion = buffer_adc[1];
	//s_freno = buffer_adc[2];
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_FDCAN_RxFifo0Callback>:
		Error_Handler();
	}
}

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80cc 	beq.w	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
	{
		/* Retreive Rx messages from RX FIFO0 */

		if (hfdcan->Instance == FDCAN1)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a67      	ldr	r2, [pc, #412]	@ (80018b4 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d164      	bne.n	80017e6 <HAL_FDCAN_RxFifo0Callback+0xea>
		{
			if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader_Inv,
 800171c:	4b66      	ldr	r3, [pc, #408]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800171e:	4a67      	ldr	r2, [pc, #412]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001720:	2140      	movs	r1, #64	@ 0x40
 8001722:	4867      	ldr	r0, [pc, #412]	@ (80018c0 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8001724:	f006 fb60 	bl	8007de8 <HAL_FDCAN_GetRxMessage>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 80bd 	bne.w	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
									   RxData_Inv) == HAL_OK)
			{
				switch (RxHeader_Inv.Identifier)
 8001730:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f240 4266 	movw	r2, #1126	@ 0x466
 8001738:	4293      	cmp	r3, r2
 800173a:	d03c      	beq.n	80017b6 <HAL_FDCAN_RxFifo0Callback+0xba>
 800173c:	f240 4266 	movw	r2, #1126	@ 0x466
 8001740:	4293      	cmp	r3, r2
 8001742:	f200 80b2 	bhi.w	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
 8001746:	f240 4261 	movw	r2, #1121	@ 0x461
 800174a:	4293      	cmp	r3, r2
 800174c:	d004      	beq.n	8001758 <HAL_FDCAN_RxFifo0Callback+0x5c>
 800174e:	f240 4263 	movw	r2, #1123	@ 0x463
 8001752:	4293      	cmp	r3, r2
 8001754:	d015      	beq.n	8001782 <HAL_FDCAN_RxFifo0Callback+0x86>

				}
			}
		}
	}
}
 8001756:	e0a8      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					state = RxData_Inv[4] & 0xF;
 8001758:	4b57      	ldr	r3, [pc, #348]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b58      	ldr	r3, [pc, #352]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001764:	701a      	strb	r2, [r3, #0]
					if (state == 10 || state == 11)
 8001766:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b0a      	cmp	r3, #10
 800176c:	d004      	beq.n	8001778 <HAL_FDCAN_RxFifo0Callback+0x7c>
 800176e:	4b55      	ldr	r3, [pc, #340]	@ (80018c4 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b0b      	cmp	r3, #11
 8001774:	f040 8092 	bne.w	800189c <HAL_FDCAN_RxFifo0Callback+0x1a0>
						error = RxData_Inv[2];
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800177a:	789a      	ldrb	r2, [r3, #2]
 800177c:	4b52      	ldr	r3, [pc, #328]	@ (80018c8 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 800177e:	701a      	strb	r2, [r3, #0]
					break;
 8001780:	e08c      	b.n	800189c <HAL_FDCAN_RxFifo0Callback+0x1a0>
					e_machine_rpm = (RxData_Inv[7] & 0x0F << 16) | RxData_Inv[8] << 8 | RxData_Inv[5];
 8001782:	4b4d      	ldr	r3, [pc, #308]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001784:	79db      	ldrb	r3, [r3, #7]
 8001786:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 800178a:	4b4b      	ldr	r3, [pc, #300]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	4313      	orrs	r3, r2
 8001792:	4a49      	ldr	r2, [pc, #292]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8001794:	7952      	ldrb	r2, [r2, #5]
 8001796:	4313      	orrs	r3, r2
 8001798:	4a4c      	ldr	r2, [pc, #304]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800179a:	6013      	str	r3, [r2, #0]
					if (e_machine_rpm & 0x80000)
 800179c:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d07b      	beq.n	80018a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>
						e_machine_rpm |= 0xFFF0000;
 80017a8:	4b48      	ldr	r3, [pc, #288]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b48      	ldr	r3, [pc, #288]	@ (80018d0 <HAL_FDCAN_RxFifo0Callback+0x1d4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	4a46      	ldr	r2, [pc, #280]	@ (80018cc <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80017b2:	6013      	str	r3, [r2, #0]
					break;
 80017b4:	e074      	b.n	80018a0 <HAL_FDCAN_RxFifo0Callback+0x1a4>
					if (RxHeader_Inv.DataLength == 6)
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d172      	bne.n	80018a4 <HAL_FDCAN_RxFifo0Callback+0x1a8>
						if (config_inv_lectura_v == 0)
 80017be:	4b45      	ldr	r3, [pc, #276]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <HAL_FDCAN_RxFifo0Callback+0xd0>
							config_inv_lectura_v = 1;
 80017c6:	4b43      	ldr	r3, [pc, #268]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
						if (config_inv_lectura_v == 1)
 80017cc:	4b41      	ldr	r3, [pc, #260]	@ (80018d4 <HAL_FDCAN_RxFifo0Callback+0x1d8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d167      	bne.n	80018a4 <HAL_FDCAN_RxFifo0Callback+0x1a8>
							inv_dc_bus_voltage = RxData_Inv[3] << 8 | RxData_Inv[2];
 80017d4:	4b38      	ldr	r3, [pc, #224]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80017d6:	78db      	ldrb	r3, [r3, #3]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4a37      	ldr	r2, [pc, #220]	@ (80018b8 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80017dc:	7892      	ldrb	r2, [r2, #2]
 80017de:	4313      	orrs	r3, r2
 80017e0:	4a3d      	ldr	r2, [pc, #244]	@ (80018d8 <HAL_FDCAN_RxFifo0Callback+0x1dc>)
 80017e2:	6013      	str	r3, [r2, #0]
					break;
 80017e4:	e05e      	b.n	80018a4 <HAL_FDCAN_RxFifo0Callback+0x1a8>
		else if (hfdcan->Instance == FDCAN2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a3c      	ldr	r2, [pc, #240]	@ (80018dc <HAL_FDCAN_RxFifo0Callback+0x1e0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d126      	bne.n	800183e <HAL_FDCAN_RxFifo0Callback+0x142>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Acu,
 80017f0:	4b3b      	ldr	r3, [pc, #236]	@ (80018e0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 80017f2:	4a3c      	ldr	r2, [pc, #240]	@ (80018e4 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 80017f4:	2140      	movs	r1, #64	@ 0x40
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f006 faf6 	bl	8007de8 <HAL_FDCAN_GetRxMessage>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d153      	bne.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Acu.Identifier)
 8001802:	4b38      	ldr	r3, [pc, #224]	@ (80018e4 <HAL_FDCAN_RxFifo0Callback+0x1e8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b20      	cmp	r3, #32
 8001808:	d003      	beq.n	8001812 <HAL_FDCAN_RxFifo0Callback+0x116>
 800180a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800180e:	d008      	beq.n	8001822 <HAL_FDCAN_RxFifo0Callback+0x126>
}
 8001810:	e04b      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					if (RxData_Acu[0] == 0)
 8001812:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d146      	bne.n	80018a8 <HAL_FDCAN_RxFifo0Callback+0x1ac>
						precarga_inv = 1;
 800181a:	4b33      	ldr	r3, [pc, #204]	@ (80018e8 <HAL_FDCAN_RxFifo0Callback+0x1ec>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
					break;
 8001820:	e042      	b.n	80018a8 <HAL_FDCAN_RxFifo0Callback+0x1ac>
					v_celda_min = (int)(RxData_Acu[0] << 8 | RxData_Acu[1]);
 8001822:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	4a2d      	ldr	r2, [pc, #180]	@ (80018e0 <HAL_FDCAN_RxFifo0Callback+0x1e4>)
 800182a:	7852      	ldrb	r2, [r2, #1]
 800182c:	4313      	orrs	r3, r2
 800182e:	ee07 3a90 	vmov	s15, r3
 8001832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001836:	4b2d      	ldr	r3, [pc, #180]	@ (80018ec <HAL_FDCAN_RxFifo0Callback+0x1f0>)
 8001838:	edc3 7a00 	vstr	s15, [r3]
					break;
 800183c:	e035      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
		else if (hfdcan->Instance == FDCAN3)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <HAL_FDCAN_RxFifo0Callback+0x1f4>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d130      	bne.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
			if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_Dash,
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800184a:	4a2b      	ldr	r2, [pc, #172]	@ (80018f8 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 800184c:	2140      	movs	r1, #64	@ 0x40
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f006 faca 	bl	8007de8 <HAL_FDCAN_GetRxMessage>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d127      	bne.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
				switch (RxHeader_Dash.Identifier)
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <HAL_FDCAN_RxFifo0Callback+0x1fc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f240 1233 	movw	r2, #307	@ 0x133
 8001862:	4293      	cmp	r3, r2
 8001864:	d121      	bne.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					s1_aceleracion = ((uint16_t)RxData_Dash[0] << 8) | RxData_Dash[1];
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b21b      	sxth	r3, r3
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	4b20      	ldr	r3, [pc, #128]	@ (80018f4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	b21b      	sxth	r3, r3
 8001876:	4313      	orrs	r3, r2
 8001878:	b21b      	sxth	r3, r3
 800187a:	b29a      	uxth	r2, r3
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <HAL_FDCAN_RxFifo0Callback+0x200>)
 800187e:	801a      	strh	r2, [r3, #0]
					s2_aceleracion = ((uint16_t)RxData_Dash[2] << 8) | RxData_Dash[3];
 8001880:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	b21b      	sxth	r3, r3
 8001886:	021b      	lsls	r3, r3, #8
 8001888:	b21a      	sxth	r2, r3
 800188a:	4b1a      	ldr	r3, [pc, #104]	@ (80018f4 <HAL_FDCAN_RxFifo0Callback+0x1f8>)
 800188c:	78db      	ldrb	r3, [r3, #3]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21b      	sxth	r3, r3
 8001894:	b29a      	uxth	r2, r3
 8001896:	4b1a      	ldr	r3, [pc, #104]	@ (8001900 <HAL_FDCAN_RxFifo0Callback+0x204>)
 8001898:	801a      	strh	r2, [r3, #0]
}
 800189a:	e006      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 800189c:	bf00      	nop
 800189e:	e004      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 80018a0:	bf00      	nop
 80018a2:	e002      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <HAL_FDCAN_RxFifo0Callback+0x1ae>
					break;
 80018a8:	bf00      	nop
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	4000a000 	.word	0x4000a000
 80018b8:	240006d0 	.word	0x240006d0
 80018bc:	2400062c 	.word	0x2400062c
 80018c0:	240001ec 	.word	0x240001ec
 80018c4:	2400071a 	.word	0x2400071a
 80018c8:	2400088a 	.word	0x2400088a
 80018cc:	240006f8 	.word	0x240006f8
 80018d0:	0fff0000 	.word	0x0fff0000
 80018d4:	2400008c 	.word	0x2400008c
 80018d8:	240006f4 	.word	0x240006f4
 80018dc:	4000a400 	.word	0x4000a400
 80018e0:	240006e0 	.word	0x240006e0
 80018e4:	24000678 	.word	0x24000678
 80018e8:	24000088 	.word	0x24000088
 80018ec:	24000008 	.word	0x24000008
 80018f0:	4000d400 	.word	0x4000d400
 80018f4:	240006e8 	.word	0x240006e8
 80018f8:	240006a0 	.word	0x240006a0
 80018fc:	24000702 	.word	0x24000702
 8001900:	24000704 	.word	0x24000704

08001904 <HAL_FDCAN_ErrorStatusCallback>:

void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	if (hfdcan == &hfdcan2) {
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a03      	ldr	r2, [pc, #12]	@ (8001920 <HAL_FDCAN_ErrorStatusCallback+0x1c>)
 8001912:	4293      	cmp	r3, r2
		if ((ErrorStatusITs & FDCAN_IT_BUS_OFF) != RESET) {
			//CAN_bus_off_check_reset(hfdcan);
		}
	}
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	2400028c 	.word	0x2400028c
 8001924:	00000000 	.word	0x00000000

08001928 <setTorque>:
	}
	return sum / N_LECTURAS;
}*/

uint16_t setTorque()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	print("Sensor freno: ");
	printValue(s_freno);
#endif

	// Calculamos % torque  en función de la posición de los sensores
	s1_aceleracion_aux = (s1_aceleracion - 2050) / (29.5 - 20.5);
 800192e:	4b90      	ldr	r3, [pc, #576]	@ (8001b70 <setTorque+0x248>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800193e:	eeb2 5b02 	vmov.f64	d5, #34	@ 0x41100000  9.0
 8001942:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001946:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800194a:	ee17 3a90 	vmov	r3, s15
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b88      	ldr	r3, [pc, #544]	@ (8001b74 <setTorque+0x24c>)
 8001952:	801a      	strh	r2, [r3, #0]
	if (s1_aceleracion_aux < 0)
	{
		s1_aceleracion_aux = 0;
	}
	else if (s1_aceleracion_aux > 100)
 8001954:	4b87      	ldr	r3, [pc, #540]	@ (8001b74 <setTorque+0x24c>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2b64      	cmp	r3, #100	@ 0x64
 800195a:	d902      	bls.n	8001962 <setTorque+0x3a>
	{
		s1_aceleracion_aux = 100;
 800195c:	4b85      	ldr	r3, [pc, #532]	@ (8001b74 <setTorque+0x24c>)
 800195e:	2264      	movs	r2, #100	@ 0x64
 8001960:	801a      	strh	r2, [r3, #0]
	}

	s2_aceleracion_aux = (s2_aceleracion - 1915) / (25.70 - 19.15);
 8001962:	4b85      	ldr	r3, [pc, #532]	@ (8001b78 <setTorque+0x250>)
 8001964:	881b      	ldrh	r3, [r3, #0]
 8001966:	f2a3 737b 	subw	r3, r3, #1915	@ 0x77b
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001972:	ed9f 5b75 	vldr	d5, [pc, #468]	@ 8001b48 <setTorque+0x220>
 8001976:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800197a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800197e:	ee17 3a90 	vmov	r3, s15
 8001982:	b29a      	uxth	r2, r3
 8001984:	4b7d      	ldr	r3, [pc, #500]	@ (8001b7c <setTorque+0x254>)
 8001986:	801a      	strh	r2, [r3, #0]
	if (s2_aceleracion_aux < 0)
	{
		s2_aceleracion_aux = 0;
	}
	else if (s2_aceleracion_aux > 100)
 8001988:	4b7c      	ldr	r3, [pc, #496]	@ (8001b7c <setTorque+0x254>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	2b64      	cmp	r3, #100	@ 0x64
 800198e:	d902      	bls.n	8001996 <setTorque+0x6e>
	{
		s2_aceleracion_aux = 100;
 8001990:	4b7a      	ldr	r3, [pc, #488]	@ (8001b7c <setTorque+0x254>)
 8001992:	2264      	movs	r2, #100	@ 0x64
 8001994:	801a      	strh	r2, [r3, #0]
	printValue(s2_aceleracion_aux);
	print("");
#endif

	// Torque enviado es la media de los dos sensores
	if (s1_aceleracion_aux > 8 && s2_aceleracion_aux > 8)
 8001996:	4b77      	ldr	r3, [pc, #476]	@ (8001b74 <setTorque+0x24c>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	2b08      	cmp	r3, #8
 800199c:	d911      	bls.n	80019c2 <setTorque+0x9a>
 800199e:	4b77      	ldr	r3, [pc, #476]	@ (8001b7c <setTorque+0x254>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d90d      	bls.n	80019c2 <setTorque+0x9a>
	{
		torque_total = (s1_aceleracion_aux + s2_aceleracion_aux) / 2;
 80019a6:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <setTorque+0x24c>)
 80019a8:	881b      	ldrh	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b73      	ldr	r3, [pc, #460]	@ (8001b7c <setTorque+0x254>)
 80019ae:	881b      	ldrh	r3, [r3, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da00      	bge.n	80019b8 <setTorque+0x90>
 80019b6:	3301      	adds	r3, #1
 80019b8:	105b      	asrs	r3, r3, #1
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b70      	ldr	r3, [pc, #448]	@ (8001b80 <setTorque+0x258>)
 80019be:	801a      	strh	r2, [r3, #0]
 80019c0:	e002      	b.n	80019c8 <setTorque+0xa0>
	}
	else
	{
		torque_total = 0;
 80019c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001b80 <setTorque+0x258>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	801a      	strh	r2, [r3, #0]
	}

	// Por debajo de un 10% no acelera y por encima de un 90% esta a tope
	if (torque_total < 10)
 80019c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001b80 <setTorque+0x258>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d803      	bhi.n	80019d8 <setTorque+0xb0>
	{
		torque_total = 0;
 80019d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001b80 <setTorque+0x258>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	801a      	strh	r2, [r3, #0]
 80019d6:	e006      	b.n	80019e6 <setTorque+0xbe>
	}
	else if (torque_total > 90)
 80019d8:	4b69      	ldr	r3, [pc, #420]	@ (8001b80 <setTorque+0x258>)
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	2b5a      	cmp	r3, #90	@ 0x5a
 80019de:	d902      	bls.n	80019e6 <setTorque+0xbe>
	{
		torque_total = 100;
 80019e0:	4b67      	ldr	r3, [pc, #412]	@ (8001b80 <setTorque+0x258>)
 80019e2:	2264      	movs	r2, #100	@ 0x64
 80019e4:	801a      	strh	r2, [r3, #0]
	}

	// Comprobamos EV 2.3 APPS/Brake Pedal Plausibility Check
	// En caso de que se esté pisando el freno y mas de un 25% del pedal para. Se resetea
	// solo si el acelerador vuelve por debajo del 5%
	if (s_freno > UMBRAL_FRENO_APPS && torque_total > 25)
 80019e6:	4b67      	ldr	r3, [pc, #412]	@ (8001b84 <setTorque+0x25c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd0a      	ble.n	8001a08 <setTorque+0xe0>
 80019f2:	4b63      	ldr	r3, [pc, #396]	@ (8001b80 <setTorque+0x258>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	2b19      	cmp	r3, #25
 80019f8:	d906      	bls.n	8001a08 <setTorque+0xe0>
	{
		print("EV_2_3");
 80019fa:	4863      	ldr	r0, [pc, #396]	@ (8001b88 <setTorque+0x260>)
 80019fc:	f7ff fe38 	bl	8001670 <print>
		flag_EV_2_3 = 1;
 8001a00:	4b62      	ldr	r3, [pc, #392]	@ (8001b8c <setTorque+0x264>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e00c      	b.n	8001a22 <setTorque+0xfa>
	}
	else if (s_freno < UMBRAL_FRENO_APPS && torque_total < 5)
 8001a08:	4b5e      	ldr	r3, [pc, #376]	@ (8001b84 <setTorque+0x25c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001a10:	4293      	cmp	r3, r2
 8001a12:	dc06      	bgt.n	8001a22 <setTorque+0xfa>
 8001a14:	4b5a      	ldr	r3, [pc, #360]	@ (8001b80 <setTorque+0x258>)
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d802      	bhi.n	8001a22 <setTorque+0xfa>
	{
		flag_EV_2_3 = 0;
 8001a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b8c <setTorque+0x264>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
	}
	// If an implausibility occurs between the values of the APPSs and persists for more than
	// 100ms The power to the motor(s) must be immediately shut down completely
	// T11.8.9 Implausibility is defined as a deviation of more than ten percentage points
	// pedal travel between any of the used APPSs
	if (abs(s1_aceleracion_aux - s2_aceleracion_aux) > 10)
 8001a22:	4b54      	ldr	r3, [pc, #336]	@ (8001b74 <setTorque+0x24c>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b54      	ldr	r3, [pc, #336]	@ (8001b7c <setTorque+0x254>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	bfb8      	it	lt
 8001a32:	425b      	neglt	r3, r3
 8001a34:	2b0a      	cmp	r3, #10
 8001a36:	dd06      	ble.n	8001a46 <setTorque+0x11e>
	{

		// if (HAL_GetTick() - last_time_t_11_8 > 100) {
		print("T11.8.9");
 8001a38:	4855      	ldr	r0, [pc, #340]	@ (8001b90 <setTorque+0x268>)
 8001a3a:	f7ff fe19 	bl	8001670 <print>
		flag_T11_8_9 = 1;
 8001a3e:	4b55      	ldr	r3, [pc, #340]	@ (8001b94 <setTorque+0x26c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <setTorque+0x12e>
		//}
	}
	else
	{
		last_time_t_11_8 = HAL_GetTick();
 8001a46:	f001 f8d7 	bl	8002bf8 <HAL_GetTick>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a52      	ldr	r2, [pc, #328]	@ (8001b98 <setTorque+0x270>)
 8001a4e:	6013      	str	r3, [r2, #0]
		flag_T11_8_9 = 0;
 8001a50:	4b50      	ldr	r3, [pc, #320]	@ (8001b94 <setTorque+0x26c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
	}

	if (flag_EV_2_3 || flag_T11_8_9)
 8001a56:	4b4d      	ldr	r3, [pc, #308]	@ (8001b8c <setTorque+0x264>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d103      	bne.n	8001a66 <setTorque+0x13e>
 8001a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8001b94 <setTorque+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <setTorque+0x144>
	{
		torque_total = 0;
 8001a66:	4b46      	ldr	r3, [pc, #280]	@ (8001b80 <setTorque+0x258>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	801a      	strh	r2, [r3, #0]
	print("Torque total solicitado: ");
	printValue(torque_total);
#endif

	// Limitación del torque en función de la carga
	if (v_celda_min < 3500)
 8001a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b9c <setTorque+0x274>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001ba0 <setTorque+0x278>
 8001a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7e:	d53a      	bpl.n	8001af6 <setTorque+0x1ce>
	{
		if (v_celda_min > 2800)
 8001a80:	4b46      	ldr	r3, [pc, #280]	@ (8001b9c <setTorque+0x274>)
 8001a82:	edd3 7a00 	vldr	s15, [r3]
 8001a86:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001ba4 <setTorque+0x27c>
 8001a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	dd1f      	ble.n	8001ad4 <setTorque+0x1ac>
		{
			torque_limitado = torque_total * (1.357 * v_celda_min - 3750) / 1000;
 8001a94:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <setTorque+0x258>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001aa0:	4b3e      	ldr	r3, [pc, #248]	@ (8001b9c <setTorque+0x274>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aaa:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b50 <setTorque+0x228>
 8001aae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ab2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001b58 <setTorque+0x230>
 8001ab6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8001aba:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001abe:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8001b60 <setTorque+0x238>
 8001ac2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ac6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001aca:	ee17 2a90 	vmov	r2, s15
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <setTorque+0x280>)
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e015      	b.n	8001b00 <setTorque+0x1d8>
		}
		else
		{
			torque_limitado = torque_total * 0.05;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <setTorque+0x258>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ae0:	ed9f 6b21 	vldr	d6, [pc, #132]	@ 8001b68 <setTorque+0x240>
 8001ae4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ae8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001aec:	ee17 2a90 	vmov	r2, s15
 8001af0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <setTorque+0x280>)
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	e004      	b.n	8001b00 <setTorque+0x1d8>
		}
	}
	else
	{
		torque_limitado = torque_total;
 8001af6:	4b22      	ldr	r3, [pc, #136]	@ (8001b80 <setTorque+0x258>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <setTorque+0x280>)
 8001afe:	601a      	str	r2, [r3, #0]
print("Torque limitado en: ");
printValue(torque_limitado);
#endif

	// torque_total = torque_total * 240 / 100;
	if (torque_total >= 10)
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <setTorque+0x258>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	2b09      	cmp	r3, #9
 8001b06:	d912      	bls.n	8001b2e <setTorque+0x206>
	{
		torque_total = (torque_total * 240 / 90 - 2400 / 90) * (100 / 100);
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <setTorque+0x258>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4a25      	ldr	r2, [pc, #148]	@ (8001bac <setTorque+0x284>)
 8001b18:	fb82 1203 	smull	r1, r2, r2, r3
 8001b1c:	441a      	add	r2, r3
 8001b1e:	1192      	asrs	r2, r2, #6
 8001b20:	17db      	asrs	r3, r3, #31
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b1a      	subs	r3, #26
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <setTorque+0x258>)
 8001b2c:	801a      	strh	r2, [r3, #0]
	/*if(torque_total < 0){
		torque_total = 0;
	}*/

	// Invertir todos los bits (complemento a uno)
	uint16_t complement_one = ~torque_total;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <setTorque+0x258>)
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	80fb      	strh	r3, [r7, #6]

	// Sumar 1 para obtener el complemento a dos
	uint16_t torque_real = complement_one + 1;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	80bb      	strh	r3, [r7, #4]

#if 0
	print("Torque mandado al inversor: ");
	printHex(torque_real);
#endif
	return torque_real;
 8001b3c:	88bb      	ldrh	r3, [r7, #4]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	33333334 	.word	0x33333334
 8001b4c:	401a3333 	.word	0x401a3333
 8001b50:	a1cac083 	.word	0xa1cac083
 8001b54:	3ff5b645 	.word	0x3ff5b645
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40ad4c00 	.word	0x40ad4c00
 8001b60:	00000000 	.word	0x00000000
 8001b64:	408f4000 	.word	0x408f4000
 8001b68:	9999999a 	.word	0x9999999a
 8001b6c:	3fa99999 	.word	0x3fa99999
 8001b70:	24000702 	.word	0x24000702
 8001b74:	24000706 	.word	0x24000706
 8001b78:	24000704 	.word	0x24000704
 8001b7c:	24000708 	.word	0x24000708
 8001b80:	24000710 	.word	0x24000710
 8001b84:	2400070c 	.word	0x2400070c
 8001b88:	0801245c 	.word	0x0801245c
 8001b8c:	24000720 	.word	0x24000720
 8001b90:	08012464 	.word	0x08012464
 8001b94:	24000724 	.word	0x24000724
 8001b98:	2400071c 	.word	0x2400071c
 8001b9c:	24000008 	.word	0x24000008
 8001ba0:	455ac000 	.word	0x455ac000
 8001ba4:	452f0000 	.word	0x452f0000
 8001ba8:	24000714 	.word	0x24000714
 8001bac:	b60b60b7 	.word	0xb60b60b7

08001bb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4aa1      	ldr	r2, [pc, #644]	@ (8001e40 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f040 81c1 	bne.w	8001f44 <HAL_TIM_PeriodElapsedCallback+0x394>
	{
		// Reenvío DC_BUS_VOLTAGE al AMS por CAN_ACU
		TxHeader_Acu.Identifier = ID_dc_bus_voltage;
 8001bc2:	4ba0      	ldr	r3, [pc, #640]	@ (8001e44 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4aa0      	ldr	r2, [pc, #640]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bc8:	6013      	str	r3, [r2, #0]
		TxHeader_Acu.DataLength = 2;
 8001bca:	4b9f      	ldr	r3, [pc, #636]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bcc:	2202      	movs	r2, #2
 8001bce:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001bd0:	4b9d      	ldr	r3, [pc, #628]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bd6:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001bd8:	4b9b      	ldr	r3, [pc, #620]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001bde:	4b9a      	ldr	r3, [pc, #616]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]

		/*		TxData_Acu[0] = byte0_voltage;
		 TxData_Acu[1] = byte1_voltage;*/
		TxData_Acu[0] = inv_dc_bus_voltage & 0xFF;
 8001be4:	4b99      	ldr	r3, [pc, #612]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b99      	ldr	r3, [pc, #612]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bec:	701a      	strb	r2, [r3, #0]
		TxData_Acu[1] = (inv_dc_bus_voltage >> 8) & 0xFF;
 8001bee:	4b97      	ldr	r3, [pc, #604]	@ (8001e4c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	121b      	asrs	r3, r3, #8
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b96      	ldr	r3, [pc, #600]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bf8:	705a      	strb	r2, [r3, #1]
		//printValue(inv_dc_bus_voltage);
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001bfa:	4a95      	ldr	r2, [pc, #596]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001bfc:	4992      	ldr	r1, [pc, #584]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bfe:	4895      	ldr	r0, [pc, #596]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c00:	f006 f897 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
#if DEBUG
			//print("CAN_ACU: DC_BUS_VOLTAGE enviado a AMS");
#endif
		}

		precharge_button = HAL_GPIO_ReadPin(START_BUTTON_GPIO_Port, START_BUTTON_Pin);
 8001c04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001c08:	4893      	ldr	r0, [pc, #588]	@ (8001e58 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c0a:	f007 f97d 	bl	8008f08 <HAL_GPIO_ReadPin>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b92      	ldr	r3, [pc, #584]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c14:	601a      	str	r2, [r3, #0]

		TxHeader_Acu.Identifier = 0x600;
 8001c16:	4b8c      	ldr	r3, [pc, #560]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c18:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001c1c:	601a      	str	r2, [r3, #0]
		TxHeader_Acu.DataLength = 2;
 8001c1e:	4b8a      	ldr	r3, [pc, #552]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c20:	2202      	movs	r2, #2
 8001c22:	60da      	str	r2, [r3, #12]
		TxHeader_Acu.IdType = FDCAN_EXTENDED_ID;
 8001c24:	4b88      	ldr	r3, [pc, #544]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c26:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c2a:	605a      	str	r2, [r3, #4]
		TxHeader_Acu.FDFormat = FDCAN_CLASSIC_CAN;
 8001c2c:	4b86      	ldr	r3, [pc, #536]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
		TxHeader_Acu.TxFrameType = FDCAN_DATA_FRAME;
 8001c32:	4b85      	ldr	r3, [pc, #532]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]


		TxData_Acu[0] = precharge_button;
 8001c38:	4b88      	ldr	r3, [pc, #544]	@ (8001e5c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b84      	ldr	r3, [pc, #528]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c40:	701a      	strb	r2, [r3, #0]
		printValue(TxData_Acu[0]);
 8001c42:	4b83      	ldr	r3, [pc, #524]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fd30 	bl	80016ac <printValue>

		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &TxHeader_Acu, TxData_Acu) == HAL_OK)
 8001c4c:	4a80      	ldr	r2, [pc, #512]	@ (8001e50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c4e:	497e      	ldr	r1, [pc, #504]	@ (8001e48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c50:	4880      	ldr	r0, [pc, #512]	@ (8001e54 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c52:	f006 f86e 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>

		// ---------- CONTROL DEL INVERSOR ----------

		//printHex(state);
		// Estado TORQUE
		if ((state == 4 || state == 6) && flag_r2d == 1)
 8001c56:	4b82      	ldr	r3, [pc, #520]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d003      	beq.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0xb6>
 8001c5e:	4b80      	ldr	r3, [pc, #512]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d11b      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0xee>
 8001c66:	4b7f      	ldr	r3, [pc, #508]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d117      	bne.n	8001c9e <HAL_TIM_PeriodElapsedCallback+0xee>
		{ // Si no hay que reactivar el coche manda siempre torque

			TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001c6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c74:	6013      	str	r3, [r2, #0]
			TxHeader_Inv.DataLength = 3;
 8001c76:	4b7d      	ldr	r3, [pc, #500]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c78:	2203      	movs	r2, #3
 8001c7a:	60da      	str	r2, [r3, #12]
			TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001c7c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	605a      	str	r2, [r3, #4]

			TxData_Inv[0] = 0x0;
 8001c82:	4b7b      	ldr	r3, [pc, #492]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			TxData_Inv[1] = 0x0;
 8001c88:	4b79      	ldr	r3, [pc, #484]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
			TxData_Inv[2] = 0x6;
 8001c8e:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c90:	2206      	movs	r2, #6
 8001c92:	709a      	strb	r2, [r3, #2]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001c94:	4a76      	ldr	r2, [pc, #472]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c96:	4975      	ldr	r1, [pc, #468]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c98:	4876      	ldr	r0, [pc, #472]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001c9a:	f006 f84a 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
		}

		if(flag_r2d == 1){
 8001c9e:	4b71      	ldr	r3, [pc, #452]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 814e 	bne.w	8001f44 <HAL_TIM_PeriodElapsedCallback+0x394>
			switch (state)
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	@ (8001e60 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	2b0d      	cmp	r3, #13
 8001cae:	f200 8149 	bhi.w	8001f44 <HAL_TIM_PeriodElapsedCallback+0x394>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001cf1 	.word	0x08001cf1
 8001cbc:	08001f45 	.word	0x08001f45
 8001cc0:	08001f45 	.word	0x08001f45
 8001cc4:	08001d21 	.word	0x08001d21
 8001cc8:	08001d57 	.word	0x08001d57
 8001ccc:	08001f45 	.word	0x08001f45
 8001cd0:	08001ddf 	.word	0x08001ddf
 8001cd4:	08001f45 	.word	0x08001f45
 8001cd8:	08001f45 	.word	0x08001f45
 8001cdc:	08001f45 	.word	0x08001f45
 8001ce0:	08001e91 	.word	0x08001e91
 8001ce4:	08001ed1 	.word	0x08001ed1
 8001ce8:	08001f45 	.word	0x08001f45
 8001cec:	08001f0d 	.word	0x08001f0d
			{
			case 0:
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001cf0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001cf6:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001d04:	4b5a      	ldr	r3, [pc, #360]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d0a:	4b59      	ldr	r3, [pc, #356]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8001d10:	4b57      	ldr	r3, [pc, #348]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d16:	4a56      	ldr	r2, [pc, #344]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d18:	4954      	ldr	r1, [pc, #336]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d1a:	4856      	ldr	r0, [pc, #344]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d1c:	f006 f809 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>

			case 3:
	#if DEBUG
				//print("state: standby");
	#endif
				flag_react = 0;
 8001d20:	4b55      	ldr	r3, [pc, #340]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001d26:	4b50      	ldr	r3, [pc, #320]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a50      	ldr	r2, [pc, #320]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d2c:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d30:	2203      	movs	r2, #3
 8001d32:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001d3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001d40:	4b4b      	ldr	r3, [pc, #300]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x4;
 8001d46:	4b4a      	ldr	r3, [pc, #296]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d48:	2204      	movs	r2, #4
 8001d4a:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d4c:	4a48      	ldr	r2, [pc, #288]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d4e:	4947      	ldr	r1, [pc, #284]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d50:	4848      	ldr	r0, [pc, #288]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d52:	f005 ffee 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
				//}

			case 4:

	#if DEBUG
				print("state: ready");
 8001d56:	4849      	ldr	r0, [pc, #292]	@ (8001e7c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001d58:	f7ff fc8a 	bl	8001670 <print>
	#endif
				if (flag_r2d == 1){
 8001d5c:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d120      	bne.n	8001da6 <HAL_TIM_PeriodElapsedCallback+0x1f6>
					TxHeader_Inv.Identifier = 0x362;
 8001d64:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d66:	f240 3262 	movw	r2, #866	@ 0x362
 8001d6a:	601a      	str	r2, [r3, #0]
					TxHeader_Inv.DataLength = 4;
 8001d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d6e:	2204      	movs	r2, #4
 8001d70:	60da      	str	r2, [r3, #12]

					real_torque = 0;
 8001d72:	4b43      	ldr	r3, [pc, #268]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	801a      	strh	r2, [r3, #0]

					TxData_Inv[0] = 0x0;
 8001d78:	4b3d      	ldr	r3, [pc, #244]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = real_torque;
 8001d84:	4b3e      	ldr	r3, [pc, #248]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d8c:	709a      	strb	r2, [r3, #2]
					TxData_Inv[3] = 0x0;
 8001d8e:	4b38      	ldr	r3, [pc, #224]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	70da      	strb	r2, [r3, #3]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001d94:	4a36      	ldr	r2, [pc, #216]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d96:	4935      	ldr	r1, [pc, #212]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d98:	4836      	ldr	r0, [pc, #216]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d9a:	f005 ffca 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
					flag_react = 0; // Reactivado
 8001d9e:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
					TxData_Inv[2] = 0x4;
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
				}

				break;
 8001da4:	e0ce      	b.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x394>
					flag_react = 0;
 8001da6:	4b34      	ldr	r3, [pc, #208]	@ (8001e78 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
					TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001dac:	4b2e      	ldr	r3, [pc, #184]	@ (8001e68 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a2e      	ldr	r2, [pc, #184]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001db2:	6013      	str	r3, [r2, #0]
					TxHeader_Inv.DataLength = 3;
 8001db4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001db6:	2203      	movs	r2, #3
 8001db8:	60da      	str	r2, [r3, #12]
					TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
					TxData_Inv[0] = 0x0;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
					TxData_Inv[1] = 0x0;
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	705a      	strb	r2, [r3, #1]
					TxData_Inv[2] = 0x4;
 8001dcc:	4b28      	ldr	r3, [pc, #160]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dce:	2204      	movs	r2, #4
 8001dd0:	709a      	strb	r2, [r3, #2]
					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001dd2:	4a27      	ldr	r2, [pc, #156]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001dd4:	4925      	ldr	r1, [pc, #148]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dd6:	4827      	ldr	r0, [pc, #156]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001dd8:	f005 ffab 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
				break;
 8001ddc:	e0b2      	b.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x394>
			case 6:
				print("state: torque");
 8001dde:	4829      	ldr	r0, [pc, #164]	@ (8001e84 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001de0:	f7ff fc46 	bl	8001670 <print>

				// Request TORQUE inversor

				// flag_react = 1;

				real_torque = setTorque();
 8001de4:	f7ff fda0 	bl	8001928 <setTorque>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461a      	mov	r2, r3
 8001dec:	4b24      	ldr	r3, [pc, #144]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001dee:	801a      	strh	r2, [r3, #0]

				TxHeader_Inv.Identifier = 0x362;
 8001df0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001df2:	f240 3262 	movw	r2, #866	@ 0x362
 8001df6:	601a      	str	r2, [r3, #0]
				TxHeader_Inv.DataLength = 4;
 8001df8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	60da      	str	r2, [r3, #12]

				// real_torque = 0;
				byte_torque_1 = real_torque & 0xFF;
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e06:	701a      	strb	r2, [r3, #0]
				byte_torque_2 = (real_torque >> 8) & 0xFF;
 8001e08:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b1e      	ldr	r3, [pc, #120]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e14:	701a      	strb	r2, [r3, #0]
				TxData_Inv[0] = 0x00;
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x00;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	705a      	strb	r2, [r3, #1]
					if(frena > 500){
						acelera = 1;
						frena = 0;
					}
				}*/
				TxData_Inv[2] = byte_torque_1;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e28:	709a      	strb	r2, [r3, #2]
				TxData_Inv[3] = byte_torque_2;
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	4b10      	ldr	r3, [pc, #64]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e30:	70da      	strb	r2, [r3, #3]
				// TxData_Inv[2] = 0xFE;
				// TxData_Inv[3] = 0xFF;
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001e32:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e34:	490d      	ldr	r1, [pc, #52]	@ (8001e6c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e36:	480f      	ldr	r0, [pc, #60]	@ (8001e74 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e38:	f005 ff7b 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
				//CAN_bus_off_check_reset(&hfdcan1);

				break;
 8001e3c:	e082      	b.n	8001f44 <HAL_TIM_PeriodElapsedCallback+0x394>
 8001e3e:	bf00      	nop
 8001e40:	24000494 	.word	0x24000494
 8001e44:	24000004 	.word	0x24000004
 8001e48:	24000654 	.word	0x24000654
 8001e4c:	240006f4 	.word	0x240006f4
 8001e50:	240006d8 	.word	0x240006d8
 8001e54:	2400028c 	.word	0x2400028c
 8001e58:	58021400 	.word	0x58021400
 8001e5c:	24000728 	.word	0x24000728
 8001e60:	2400071a 	.word	0x2400071a
 8001e64:	2400088c 	.word	0x2400088c
 8001e68:	24000000 	.word	0x24000000
 8001e6c:	24000608 	.word	0x24000608
 8001e70:	240006c8 	.word	0x240006c8
 8001e74:	240001ec 	.word	0x240001ec
 8001e78:	2400088b 	.word	0x2400088b
 8001e7c:	08012430 	.word	0x08012430
 8001e80:	24000718 	.word	0x24000718
 8001e84:	0801246c 	.word	0x0801246c
 8001e88:	24000712 	.word	0x24000712
 8001e8c:	24000713 	.word	0x24000713

			case 10:
				print("state: soft fault");
 8001e90:	482e      	ldr	r0, [pc, #184]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001e92:	f7ff fbed 	bl	8001670 <print>
				printValue(error);
 8001e96:	4b2e      	ldr	r3, [pc, #184]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fc06 	bl	80016ac <printValue>

				// Estado READY inversor
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001ea6:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001eaa:	2203      	movs	r2, #3
 8001eac:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001eae:	4b2a      	ldr	r3, [pc, #168]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001eb4:	4b29      	ldr	r3, [pc, #164]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001eba:	4b28      	ldr	r3, [pc, #160]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x13;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ec2:	2213      	movs	r2, #19
 8001ec4:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001ec6:	4a25      	ldr	r2, [pc, #148]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ec8:	4923      	ldr	r1, [pc, #140]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001eca:	4825      	ldr	r0, [pc, #148]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001ecc:	f005 ff31 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>
						HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv,
													  TxData_Inv);
					}*/

			case 11:
				print("state: hard fault");
 8001ed0:	4824      	ldr	r0, [pc, #144]	@ (8001f64 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001ed2:	f7ff fbcd 	bl	8001670 <print>
				flag_react = 1;
 8001ed6:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001ee2:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 13;
 8001efc:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001efe:	220d      	movs	r2, #13
 8001f00:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001f02:	4a16      	ldr	r2, [pc, #88]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001f04:	4914      	ldr	r1, [pc, #80]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001f06:	4816      	ldr	r0, [pc, #88]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f08:	f005 ff13 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>

			case 13:
				print("state: shutdown");
 8001f0c:	4817      	ldr	r0, [pc, #92]	@ (8001f6c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8001f0e:	f7ff fbaf 	bl	8001670 <print>
				TxHeader_Inv.Identifier = RX_SETPOINT_1;
 8001f12:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001f18:	6013      	str	r3, [r2, #0]
				TxHeader_Inv.DataLength = 3;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	60da      	str	r2, [r3, #12]
				TxHeader_Inv.IdType = FDCAN_STANDARD_ID;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]

				TxData_Inv[0] = 0x0;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
				TxData_Inv[1] = 0x0;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
				TxData_Inv[2] = 0x1;
 8001f32:	4b0a      	ldr	r3, [pc, #40]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	709a      	strb	r2, [r3, #2]
				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_Inv, TxData_Inv);
 8001f38:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001f3a:	4907      	ldr	r1, [pc, #28]	@ (8001f58 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001f3c:	4808      	ldr	r0, [pc, #32]	@ (8001f60 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001f3e:	f005 fef8 	bl	8007d32 <HAL_FDCAN_AddMessageToTxFifoQ>


				break;
 8001f42:	bf00      	nop
			}
		}
#endif
	}
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	0801247c 	.word	0x0801247c
 8001f50:	2400088a 	.word	0x2400088a
 8001f54:	24000000 	.word	0x24000000
 8001f58:	24000608 	.word	0x24000608
 8001f5c:	240006c8 	.word	0x240006c8
 8001f60:	240001ec 	.word	0x240001ec
 8001f64:	08012490 	.word	0x08012490
 8001f68:	2400088b 	.word	0x2400088b
 8001f6c:	080124a4 	.word	0x080124a4

08001f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f74:	b672      	cpsid	i
}
 8001f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <Error_Handler+0x8>

08001f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <HAL_MspInit+0x30>)
 8001f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f88:	4a08      	ldr	r2, [pc, #32]	@ (8001fac <HAL_MspInit+0x30>)
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_MspInit+0x30>)
 8001f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	58024400 	.word	0x58024400

08001fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b090      	sub	sp, #64	@ 0x40
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a90      	ldr	r2, [pc, #576]	@ (8002210 <HAL_ADC_MspInit+0x260>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f040 80a3 	bne.w	800211a <HAL_ADC_MspInit+0x16a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002214 <HAL_ADC_MspInit+0x264>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a8e      	ldr	r2, [pc, #568]	@ (8002214 <HAL_ADC_MspInit+0x264>)
 8001fdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001fde:	4b8d      	ldr	r3, [pc, #564]	@ (8002214 <HAL_ADC_MspInit+0x264>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10e      	bne.n	8002004 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001fe6:	4b8c      	ldr	r3, [pc, #560]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8001fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fec:	4a8a      	ldr	r2, [pc, #552]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ff6:	4b88      	ldr	r3, [pc, #544]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8001ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ffc:	f003 0320 	and.w	r3, r3, #32
 8002000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002004:	4b84      	ldr	r3, [pc, #528]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200a:	4a83      	ldr	r2, [pc, #524]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002014:	4b80      	ldr	r3, [pc, #512]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	4b7d      	ldr	r3, [pc, #500]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002028:	4a7b      	ldr	r2, [pc, #492]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002032:	4b79      	ldr	r3, [pc, #484]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	623b      	str	r3, [r7, #32]
 800203e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002040:	4b75      	ldr	r3, [pc, #468]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002046:	4a74      	ldr	r2, [pc, #464]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002048:	f043 0320 	orr.w	r3, r3, #32
 800204c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002050:	4b71      	ldr	r3, [pc, #452]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	69fb      	ldr	r3, [r7, #28]
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = S_APPS_1_Pin|SUSPENSION_RL_Pin;
 800205e:	2330      	movs	r3, #48	@ 0x30
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002062:	2303      	movs	r3, #3
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800206e:	4619      	mov	r1, r3
 8002070:	486a      	ldr	r0, [pc, #424]	@ (800221c <HAL_ADC_MspInit+0x26c>)
 8002072:	f006 fda1 	bl	8008bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin|S_APPS_2_Pin;
 8002076:	2303      	movs	r3, #3
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207a:	2303      	movs	r3, #3
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002086:	4619      	mov	r1, r3
 8002088:	4865      	ldr	r0, [pc, #404]	@ (8002220 <HAL_ADC_MspInit+0x270>)
 800208a:	f006 fd95 	bl	8008bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = S_FRENO_Pin;
 800208e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	2303      	movs	r3, #3
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(S_FRENO_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	4860      	ldr	r0, [pc, #384]	@ (8002224 <HAL_ADC_MspInit+0x274>)
 80020a4:	f006 fd88 	bl	8008bb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80020a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020aa:	4a60      	ldr	r2, [pc, #384]	@ (800222c <HAL_ADC_MspInit+0x27c>)
 80020ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80020ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020b0:	2209      	movs	r2, #9
 80020b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020c0:	4b59      	ldr	r3, [pc, #356]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020c8:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80020ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020d0:	4b55      	ldr	r3, [pc, #340]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020d8:	4b53      	ldr	r3, [pc, #332]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020de:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020e0:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020e6:	4b50      	ldr	r3, [pc, #320]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ec:	484e      	ldr	r0, [pc, #312]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 80020ee:	f003 facd 	bl	800568c <HAL_DMA_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_ADC_MspInit+0x14c>
    {
      Error_Handler();
 80020f8:	f7ff ff3a 	bl	8001f70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 8002100:	659a      	str	r2, [r3, #88]	@ 0x58
 8002102:	4a49      	ldr	r2, [pc, #292]	@ (8002228 <HAL_ADC_MspInit+0x278>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002108:	2200      	movs	r2, #0
 800210a:	2100      	movs	r1, #0
 800210c:	2012      	movs	r0, #18
 800210e:	f003 fa88 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002112:	2012      	movs	r0, #18
 8002114:	f003 fa9f 	bl	8005656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002118:	e076      	b.n	8002208 <HAL_ADC_MspInit+0x258>
  else if(hadc->Instance==ADC2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a44      	ldr	r2, [pc, #272]	@ (8002230 <HAL_ADC_MspInit+0x280>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d171      	bne.n	8002208 <HAL_ADC_MspInit+0x258>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002124:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_ADC_MspInit+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	4a3a      	ldr	r2, [pc, #232]	@ (8002214 <HAL_ADC_MspInit+0x264>)
 800212c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800212e:	4b39      	ldr	r3, [pc, #228]	@ (8002214 <HAL_ADC_MspInit+0x264>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d10e      	bne.n	8002154 <HAL_ADC_MspInit+0x1a4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002136:	4b38      	ldr	r3, [pc, #224]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800213c:	4a36      	ldr	r2, [pc, #216]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 800213e:	f043 0320 	orr.w	r3, r3, #32
 8002142:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800214c:	f003 0320 	and.w	r3, r3, #32
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002154:	4b30      	ldr	r3, [pc, #192]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215a:	4a2f      	ldr	r2, [pc, #188]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 800215c:	f043 0304 	orr.w	r3, r3, #4
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002164:	4b2c      	ldr	r3, [pc, #176]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	4a27      	ldr	r2, [pc, #156]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002182:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002190:	4b21      	ldr	r3, [pc, #132]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	4a20      	ldr	r2, [pc, #128]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_ADC_MspInit+0x268>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SUSPENSION_RL_Pin;
 80021ae:	2320      	movs	r3, #32
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b2:	2303      	movs	r3, #3
 80021b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RL_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021be:	4619      	mov	r1, r3
 80021c0:	4816      	ldr	r0, [pc, #88]	@ (800221c <HAL_ADC_MspInit+0x26c>)
 80021c2:	f006 fcf9 	bl	8008bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_RR_Pin;
 80021c6:	2301      	movs	r3, #1
 80021c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_RR_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021d6:	4619      	mov	r1, r3
 80021d8:	4811      	ldr	r0, [pc, #68]	@ (8002220 <HAL_ADC_MspInit+0x270>)
 80021da:	f006 fced 	bl	8008bb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SUSPENSION_FR_Pin;
 80021de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e4:	2303      	movs	r3, #3
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SUSPENSION_FR_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80021f0:	4619      	mov	r1, r3
 80021f2:	480c      	ldr	r0, [pc, #48]	@ (8002224 <HAL_ADC_MspInit+0x274>)
 80021f4:	f006 fce0 	bl	8008bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	2012      	movs	r0, #18
 80021fe:	f003 fa10 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002202:	2012      	movs	r0, #18
 8002204:	f003 fa27 	bl	8005656 <HAL_NVIC_EnableIRQ>
}
 8002208:	bf00      	nop
 800220a:	3740      	adds	r7, #64	@ 0x40
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40022000 	.word	0x40022000
 8002214:	24000890 	.word	0x24000890
 8002218:	58024400 	.word	0x58024400
 800221c:	58020800 	.word	0x58020800
 8002220:	58020400 	.word	0x58020400
 8002224:	58021400 	.word	0x58021400
 8002228:	24000174 	.word	0x24000174
 800222c:	40020010 	.word	0x40020010
 8002230:	40022100 	.word	0x40022100

08002234 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b0bc      	sub	sp, #240	@ 0xf0
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800224c:	f107 0320 	add.w	r3, r7, #32
 8002250:	22b8      	movs	r2, #184	@ 0xb8
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f00f fb57 	bl	8011908 <memset>
  if(hfdcan->Instance==FDCAN1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a8d      	ldr	r2, [pc, #564]	@ (8002494 <HAL_FDCAN_MspInit+0x260>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d157      	bne.n	8002314 <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002264:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002276:	f107 0320 	add.w	r3, r7, #32
 800227a:	4618      	mov	r0, r3
 800227c:	f007 fe16 	bl	8009eac <HAL_RCCEx_PeriphCLKConfig>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002286:	f7ff fe73 	bl	8001f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800228a:	4b83      	ldr	r3, [pc, #524]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a81      	ldr	r2, [pc, #516]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 8002292:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002294:	4b80      	ldr	r3, [pc, #512]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10e      	bne.n	80022ba <HAL_FDCAN_MspInit+0x86>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800229c:	4b7f      	ldr	r3, [pc, #508]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 800229e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022a2:	4a7e      	ldr	r2, [pc, #504]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80022ac:	4b7b      	ldr	r3, [pc, #492]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 80022ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80022b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ba:	4b78      	ldr	r3, [pc, #480]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022c0:	4a76      	ldr	r2, [pc, #472]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 80022c2:	f043 0308 	orr.w	r3, r3, #8
 80022c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022ca:	4b74      	ldr	r3, [pc, #464]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 80022cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	61bb      	str	r3, [r7, #24]
 80022d6:	69bb      	ldr	r3, [r7, #24]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022d8:	2303      	movs	r3, #3
 80022da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80022f0:	2309      	movs	r3, #9
 80022f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022f6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80022fa:	4619      	mov	r1, r3
 80022fc:	4868      	ldr	r0, [pc, #416]	@ (80024a0 <HAL_FDCAN_MspInit+0x26c>)
 80022fe:	f006 fc5b 	bl	8008bb8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2101      	movs	r1, #1
 8002306:	2013      	movs	r0, #19
 8002308:	f003 f98b 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800230c:	2013      	movs	r0, #19
 800230e:	f003 f9a2 	bl	8005656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002312:	e0ba      	b.n	800248a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a62      	ldr	r2, [pc, #392]	@ (80024a4 <HAL_FDCAN_MspInit+0x270>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d158      	bne.n	80023d0 <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800231e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002330:	f107 0320 	add.w	r3, r7, #32
 8002334:	4618      	mov	r0, r3
 8002336:	f007 fdb9 	bl	8009eac <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_FDCAN_MspInit+0x110>
      Error_Handler();
 8002340:	f7ff fe16 	bl	8001f70 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002344:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	4a53      	ldr	r2, [pc, #332]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 800234c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800234e:	4b52      	ldr	r3, [pc, #328]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d10e      	bne.n	8002374 <HAL_FDCAN_MspInit+0x140>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002356:	4b51      	ldr	r3, [pc, #324]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002358:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800235c:	4a4f      	ldr	r2, [pc, #316]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002362:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002366:	4b4d      	ldr	r3, [pc, #308]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002368:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800236c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002374:	4b49      	ldr	r3, [pc, #292]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800237a:	4a48      	ldr	r2, [pc, #288]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002384:	4b45      	ldr	r3, [pc, #276]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	613b      	str	r3, [r7, #16]
 8002390:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002392:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80023ac:	2309      	movs	r3, #9
 80023ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80023b6:	4619      	mov	r1, r3
 80023b8:	483b      	ldr	r0, [pc, #236]	@ (80024a8 <HAL_FDCAN_MspInit+0x274>)
 80023ba:	f006 fbfd 	bl	8008bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 2, 0);
 80023be:	2200      	movs	r2, #0
 80023c0:	2102      	movs	r1, #2
 80023c2:	2014      	movs	r0, #20
 80023c4:	f003 f92d 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 80023c8:	2014      	movs	r0, #20
 80023ca:	f003 f944 	bl	8005656 <HAL_NVIC_EnableIRQ>
}
 80023ce:	e05c      	b.n	800248a <HAL_FDCAN_MspInit+0x256>
  else if(hfdcan->Instance==FDCAN3)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a35      	ldr	r2, [pc, #212]	@ (80024ac <HAL_FDCAN_MspInit+0x278>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d157      	bne.n	800248a <HAL_FDCAN_MspInit+0x256>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80023da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ec:	f107 0320 	add.w	r3, r7, #32
 80023f0:	4618      	mov	r0, r3
 80023f2:	f007 fd5b 	bl	8009eac <HAL_RCCEx_PeriphCLKConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_FDCAN_MspInit+0x1cc>
      Error_Handler();
 80023fc:	f7ff fdb8 	bl	8001f70 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 8002408:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_FDCAN_MspInit+0x264>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d10e      	bne.n	8002430 <HAL_FDCAN_MspInit+0x1fc>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002412:	4b22      	ldr	r3, [pc, #136]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002414:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002418:	4a20      	ldr	r2, [pc, #128]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 800241a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800241e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002424:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002430:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002436:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800243c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002440:	4b16      	ldr	r3, [pc, #88]	@ (800249c <HAL_FDCAN_MspInit+0x268>)
 8002442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800244e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002468:	2302      	movs	r3, #2
 800246a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800246e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002472:	4619      	mov	r1, r3
 8002474:	480e      	ldr	r0, [pc, #56]	@ (80024b0 <HAL_FDCAN_MspInit+0x27c>)
 8002476:	f006 fb9f 	bl	8008bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 0, 0);
 800247a:	2200      	movs	r2, #0
 800247c:	2100      	movs	r1, #0
 800247e:	209f      	movs	r0, #159	@ 0x9f
 8002480:	f003 f8cf 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002484:	209f      	movs	r0, #159	@ 0x9f
 8002486:	f003 f8e6 	bl	8005656 <HAL_NVIC_EnableIRQ>
}
 800248a:	bf00      	nop
 800248c:	37f0      	adds	r7, #240	@ 0xf0
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	4000a000 	.word	0x4000a000
 8002498:	24000894 	.word	0x24000894
 800249c:	58024400 	.word	0x58024400
 80024a0:	58020c00 	.word	0x58020c00
 80024a4:	4000a400 	.word	0x4000a400
 80024a8:	58020400 	.word	0x58020400
 80024ac:	4000d400 	.word	0x4000d400
 80024b0:	58021800 	.word	0x58021800

080024b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 031c 	add.w	r3, r7, #28
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3e      	ldr	r2, [pc, #248]	@ (80025cc <HAL_SD_MspInit+0x118>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d175      	bne.n	80025c2 <HAL_SD_MspInit+0x10e>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80024d6:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 80024d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024dc:	4a3c      	ldr	r2, [pc, #240]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 80024de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024e2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80024e6:	4b3a      	ldr	r3, [pc, #232]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 80024e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80024ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024f0:	61bb      	str	r3, [r7, #24]
 80024f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f4:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 80024f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024fa:	4a35      	ldr	r2, [pc, #212]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002504:	4b32      	ldr	r3, [pc, #200]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 8002506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002512:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 8002514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002518:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 800251a:	f043 0308 	orr.w	r3, r3, #8
 800251e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002522:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 8002524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	4b27      	ldr	r3, [pc, #156]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 8002532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002536:	4a26      	ldr	r2, [pc, #152]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <HAL_SD_MspInit+0x11c>)
 8002542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PB8     ------> SDMMC1_CKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800254e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002552:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002560:	230c      	movs	r3, #12
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	481a      	ldr	r0, [pc, #104]	@ (80025d4 <HAL_SD_MspInit+0x120>)
 800256c:	f006 fb24 	bl	8008bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002570:	2304      	movs	r3, #4
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002580:	230c      	movs	r3, #12
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4813      	ldr	r0, [pc, #76]	@ (80025d8 <HAL_SD_MspInit+0x124>)
 800258c:	f006 fb14 	bl	8008bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800259e:	2303      	movs	r3, #3
 80025a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SDMMC1;
 80025a2:	2307      	movs	r3, #7
 80025a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	480b      	ldr	r0, [pc, #44]	@ (80025dc <HAL_SD_MspInit+0x128>)
 80025ae:	f006 fb03 	bl	8008bb8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2031      	movs	r0, #49	@ 0x31
 80025b8:	f003 f833 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80025bc:	2031      	movs	r0, #49	@ 0x31
 80025be:	f003 f84a 	bl	8005656 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 80025c2:	bf00      	nop
 80025c4:	3730      	adds	r7, #48	@ 0x30
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	52007000 	.word	0x52007000
 80025d0:	58024400 	.word	0x58024400
 80025d4:	58020800 	.word	0x58020800
 80025d8:	58020c00 	.word	0x58020c00
 80025dc:	58020400 	.word	0x58020400

080025e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_TIM_Base_MspInit+0x74>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d10f      	bne.n	8002612 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <HAL_TIM_Base_MspInit+0x78>)
 80025f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025f8:	4a17      	ldr	r2, [pc, #92]	@ (8002658 <HAL_TIM_Base_MspInit+0x78>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002602:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <HAL_TIM_Base_MspInit+0x78>)
 8002604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002610:	e01b      	b.n	800264a <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM16)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a11      	ldr	r2, [pc, #68]	@ (800265c <HAL_TIM_Base_MspInit+0x7c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d116      	bne.n	800264a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <HAL_TIM_Base_MspInit+0x78>)
 800261e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002622:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <HAL_TIM_Base_MspInit+0x78>)
 8002624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002628:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800262c:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_TIM_Base_MspInit+0x78>)
 800262e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2075      	movs	r0, #117	@ 0x75
 8002640:	f002 ffef 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002644:	2075      	movs	r0, #117	@ 0x75
 8002646:	f003 f806 	bl	8005656 <HAL_NVIC_EnableIRQ>
}
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40010000 	.word	0x40010000
 8002658:	58024400 	.word	0x58024400
 800265c:	40014400 	.word	0x40014400

08002660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a13      	ldr	r2, [pc, #76]	@ (80026cc <HAL_TIM_MspPostInit+0x6c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d11f      	bne.n	80026c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002682:	4b13      	ldr	r3, [pc, #76]	@ (80026d0 <HAL_TIM_MspPostInit+0x70>)
 8002684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002688:	4a11      	ldr	r2, [pc, #68]	@ (80026d0 <HAL_TIM_MspPostInit+0x70>)
 800268a:	f043 0310 	orr.w	r3, r3, #16
 800268e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002692:	4b0f      	ldr	r3, [pc, #60]	@ (80026d0 <HAL_TIM_MspPostInit+0x70>)
 8002694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_FAN1_Pin|PWM_FAN2_Pin;
 80026a0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80026a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026b2:	2301      	movs	r3, #1
 80026b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b6:	f107 030c 	add.w	r3, r7, #12
 80026ba:	4619      	mov	r1, r3
 80026bc:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <HAL_TIM_MspPostInit+0x74>)
 80026be:	f006 fa7b 	bl	8008bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40010000 	.word	0x40010000
 80026d0:	58024400 	.word	0x58024400
 80026d4:	58021000 	.word	0x58021000

080026d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0ba      	sub	sp, #232	@ 0xe8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	22b8      	movs	r2, #184	@ 0xb8
 80026f6:	2100      	movs	r1, #0
 80026f8:	4618      	mov	r0, r3
 80026fa:	f00f f905 	bl	8011908 <memset>
  if(huart->Instance==USART1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a4d      	ldr	r2, [pc, #308]	@ (8002838 <HAL_UART_MspInit+0x160>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d147      	bne.n	8002798 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002708:	f04f 0201 	mov.w	r2, #1
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002714:	2300      	movs	r3, #0
 8002716:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271a:	f107 0318 	add.w	r3, r7, #24
 800271e:	4618      	mov	r0, r3
 8002720:	f007 fbc4 	bl	8009eac <HAL_RCCEx_PeriphCLKConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800272a:	f7ff fc21 	bl	8001f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800272e:	4b43      	ldr	r3, [pc, #268]	@ (800283c <HAL_UART_MspInit+0x164>)
 8002730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002734:	4a41      	ldr	r2, [pc, #260]	@ (800283c <HAL_UART_MspInit+0x164>)
 8002736:	f043 0310 	orr.w	r3, r3, #16
 800273a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800273e:	4b3f      	ldr	r3, [pc, #252]	@ (800283c <HAL_UART_MspInit+0x164>)
 8002740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274c:	4b3b      	ldr	r3, [pc, #236]	@ (800283c <HAL_UART_MspInit+0x164>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002752:	4a3a      	ldr	r2, [pc, #232]	@ (800283c <HAL_UART_MspInit+0x164>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800275c:	4b37      	ldr	r3, [pc, #220]	@ (800283c <HAL_UART_MspInit+0x164>)
 800275e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_GPS_Pin|USART1_RX_GPS_Pin;
 800276a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800276e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002784:	2307      	movs	r3, #7
 8002786:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800278e:	4619      	mov	r1, r3
 8002790:	482b      	ldr	r0, [pc, #172]	@ (8002840 <HAL_UART_MspInit+0x168>)
 8002792:	f006 fa11 	bl	8008bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002796:	e04a      	b.n	800282e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_UART_MspInit+0x16c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d145      	bne.n	800282e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027a2:	f04f 0202 	mov.w	r2, #2
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b4:	f107 0318 	add.w	r3, r7, #24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f007 fb77 	bl	8009eac <HAL_RCCEx_PeriphCLKConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80027c4:	f7ff fbd4 	bl	8001f70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027c8:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <HAL_UART_MspInit+0x164>)
 80027ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_UART_MspInit+0x164>)
 80027d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027d8:	4b18      	ldr	r3, [pc, #96]	@ (800283c <HAL_UART_MspInit+0x164>)
 80027da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <HAL_UART_MspInit+0x164>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	4a13      	ldr	r2, [pc, #76]	@ (800283c <HAL_UART_MspInit+0x164>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f6:	4b11      	ldr	r3, [pc, #68]	@ (800283c <HAL_UART_MspInit+0x164>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002804:	230c      	movs	r3, #12
 8002806:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281c:	2307      	movs	r3, #7
 800281e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002826:	4619      	mov	r1, r3
 8002828:	4805      	ldr	r0, [pc, #20]	@ (8002840 <HAL_UART_MspInit+0x168>)
 800282a:	f006 f9c5 	bl	8008bb8 <HAL_GPIO_Init>
}
 800282e:	bf00      	nop
 8002830:	37e8      	adds	r7, #232	@ 0xe8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40011000 	.word	0x40011000
 800283c:	58024400 	.word	0x58024400
 8002840:	58020000 	.word	0x58020000
 8002844:	40004400 	.word	0x40004400

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <NMI_Handler+0x4>

08002850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <MemManage_Handler+0x4>

08002860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <BusFault_Handler+0x4>

08002868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <UsageFault_Handler+0x4>

08002870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800289e:	f000 f997 	bl	8002bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028a2:	bf00      	nop
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80028ac:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <DMA1_Stream0_IRQHandler+0x10>)
 80028ae:	f003 fcaf 	bl	8006210 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	24000174 	.word	0x24000174

080028bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80028c0:	4803      	ldr	r0, [pc, #12]	@ (80028d0 <ADC_IRQHandler+0x14>)
 80028c2:	f001 f9e9 	bl	8003c98 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80028c6:	4803      	ldr	r0, [pc, #12]	@ (80028d4 <ADC_IRQHandler+0x18>)
 80028c8:	f001 f9e6 	bl	8003c98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	24000094 	.word	0x24000094
 80028d4:	24000104 	.word	0x24000104

080028d8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80028dc:	4802      	ldr	r0, [pc, #8]	@ (80028e8 <FDCAN1_IT0_IRQHandler+0x10>)
 80028de:	f005 fc69 	bl	80081b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	240001ec 	.word	0x240001ec

080028ec <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 80028f0:	4802      	ldr	r0, [pc, #8]	@ (80028fc <FDCAN2_IT0_IRQHandler+0x10>)
 80028f2:	f005 fc5f 	bl	80081b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2400028c 	.word	0x2400028c

08002900 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002904:	4802      	ldr	r0, [pc, #8]	@ (8002910 <SDMMC1_IRQHandler+0x10>)
 8002906:	f00a f927 	bl	800cb58 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	240003cc 	.word	0x240003cc

08002914 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002918:	4802      	ldr	r0, [pc, #8]	@ (8002924 <TIM16_IRQHandler+0x10>)
 800291a:	f00b fc50 	bl	800e1be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	24000494 	.word	0x24000494

08002928 <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 800292c:	4802      	ldr	r0, [pc, #8]	@ (8002938 <FDCAN3_IT0_IRQHandler+0x10>)
 800292e:	f005 fc41 	bl	80081b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8002932:	bf00      	nop
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2400032c 	.word	0x2400032c

0800293c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002944:	4a14      	ldr	r2, [pc, #80]	@ (8002998 <_sbrk+0x5c>)
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <_sbrk+0x60>)
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <_sbrk+0x64>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d102      	bne.n	800295e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <_sbrk+0x64>)
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <_sbrk+0x68>)
 800295c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <_sbrk+0x64>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4413      	add	r3, r2
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	429a      	cmp	r2, r3
 800296a:	d207      	bcs.n	800297c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800296c:	f00e ffd4 	bl	8011918 <__errno>
 8002970:	4603      	mov	r3, r0
 8002972:	220c      	movs	r2, #12
 8002974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002976:	f04f 33ff 	mov.w	r3, #4294967295
 800297a:	e009      	b.n	8002990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <_sbrk+0x64>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002982:	4b07      	ldr	r3, [pc, #28]	@ (80029a0 <_sbrk+0x64>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	4a05      	ldr	r2, [pc, #20]	@ (80029a0 <_sbrk+0x64>)
 800298c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800298e:	68fb      	ldr	r3, [r7, #12]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	24050000 	.word	0x24050000
 800299c:	00000400 	.word	0x00000400
 80029a0:	24000898 	.word	0x24000898
 80029a4:	24000a08 	.word	0x24000a08

080029a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029ac:	4b32      	ldr	r3, [pc, #200]	@ (8002a78 <SystemInit+0xd0>)
 80029ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029b2:	4a31      	ldr	r2, [pc, #196]	@ (8002a78 <SystemInit+0xd0>)
 80029b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029bc:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <SystemInit+0xd4>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d807      	bhi.n	80029d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029c8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a7c <SystemInit+0xd4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 030f 	bic.w	r3, r3, #15
 80029d0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a7c <SystemInit+0xd4>)
 80029d2:	f043 0307 	orr.w	r3, r3, #7
 80029d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029d8:	4b29      	ldr	r3, [pc, #164]	@ (8002a80 <SystemInit+0xd8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a28      	ldr	r2, [pc, #160]	@ (8002a80 <SystemInit+0xd8>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029e4:	4b26      	ldr	r3, [pc, #152]	@ (8002a80 <SystemInit+0xd8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <SystemInit+0xd8>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4924      	ldr	r1, [pc, #144]	@ (8002a80 <SystemInit+0xd8>)
 80029f0:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <SystemInit+0xdc>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029f6:	4b21      	ldr	r3, [pc, #132]	@ (8002a7c <SystemInit+0xd4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a02:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <SystemInit+0xd4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 030f 	bic.w	r3, r3, #15
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002a7c <SystemInit+0xd4>)
 8002a0c:	f043 0307 	orr.w	r3, r3, #7
 8002a10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <SystemInit+0xd8>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a18:	4b19      	ldr	r3, [pc, #100]	@ (8002a80 <SystemInit+0xd8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a1e:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <SystemInit+0xd8>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a24:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <SystemInit+0xd8>)
 8002a26:	4a18      	ldr	r2, [pc, #96]	@ (8002a88 <SystemInit+0xe0>)
 8002a28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <SystemInit+0xd8>)
 8002a2c:	4a17      	ldr	r2, [pc, #92]	@ (8002a8c <SystemInit+0xe4>)
 8002a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <SystemInit+0xd8>)
 8002a32:	4a17      	ldr	r2, [pc, #92]	@ (8002a90 <SystemInit+0xe8>)
 8002a34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <SystemInit+0xd8>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a3c:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <SystemInit+0xd8>)
 8002a3e:	4a14      	ldr	r2, [pc, #80]	@ (8002a90 <SystemInit+0xe8>)
 8002a40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a42:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <SystemInit+0xd8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <SystemInit+0xd8>)
 8002a4a:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <SystemInit+0xe8>)
 8002a4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <SystemInit+0xd8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a54:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <SystemInit+0xd8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a09      	ldr	r2, [pc, #36]	@ (8002a80 <SystemInit+0xd8>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a60:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <SystemInit+0xd8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a66:	4b0b      	ldr	r3, [pc, #44]	@ (8002a94 <SystemInit+0xec>)
 8002a68:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00
 8002a7c:	52002000 	.word	0x52002000
 8002a80:	58024400 	.word	0x58024400
 8002a84:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a88:	02020200 	.word	0x02020200
 8002a8c:	01ff0000 	.word	0x01ff0000
 8002a90:	01010280 	.word	0x01010280
 8002a94:	52004000 	.word	0x52004000

08002a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ad0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a9c:	f7ff ff84 	bl	80029a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aa0:	480c      	ldr	r0, [pc, #48]	@ (8002ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aa2:	490d      	ldr	r1, [pc, #52]	@ (8002ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa8:	e002      	b.n	8002ab0 <LoopCopyDataInit>

08002aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aae:	3304      	adds	r3, #4

08002ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ab4:	d3f9      	bcc.n	8002aaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002abc:	e001      	b.n	8002ac2 <LoopFillZerobss>

08002abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ac0:	3204      	adds	r2, #4

08002ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ac4:	d3fb      	bcc.n	8002abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ac6:	f00e ff2d 	bl	8011924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aca:	f7fd fe0f 	bl	80006ec <main>
  bx  lr
 8002ace:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ad0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002ad4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ad8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8002adc:	080125a8 	.word	0x080125a8
  ldr r2, =_sbss
 8002ae0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8002ae4:	24000a04 	.word	0x24000a04

08002ae8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ae8:	e7fe      	b.n	8002ae8 <ADC3_IRQHandler>
	...

08002aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af2:	2003      	movs	r0, #3
 8002af4:	f002 fd8a 	bl	800560c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002af8:	f007 f802 	bl	8009b00 <HAL_RCC_GetSysClockFreq>
 8002afc:	4602      	mov	r2, r0
 8002afe:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_Init+0x68>)
 8002b00:	699b      	ldr	r3, [r3, #24]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	4913      	ldr	r1, [pc, #76]	@ (8002b58 <HAL_Init+0x6c>)
 8002b0a:	5ccb      	ldrb	r3, [r1, r3]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b16:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <HAL_Init+0x68>)
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b58 <HAL_Init+0x6c>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <HAL_Init+0x70>)
 8002b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b30:	4a0b      	ldr	r2, [pc, #44]	@ (8002b60 <HAL_Init+0x74>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b36:	200f      	movs	r0, #15
 8002b38:	f000 f814 	bl	8002b64 <HAL_InitTick>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e002      	b.n	8002b4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b46:	f7ff fa19 	bl	8001f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	58024400 	.word	0x58024400
 8002b58:	08012500 	.word	0x08012500
 8002b5c:	24000010 	.word	0x24000010
 8002b60:	2400000c 	.word	0x2400000c

08002b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b6c:	4b15      	ldr	r3, [pc, #84]	@ (8002bc4 <HAL_InitTick+0x60>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e021      	b.n	8002bbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b78:	4b13      	ldr	r3, [pc, #76]	@ (8002bc8 <HAL_InitTick+0x64>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	4b11      	ldr	r3, [pc, #68]	@ (8002bc4 <HAL_InitTick+0x60>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4619      	mov	r1, r3
 8002b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fd6f 	bl	8005672 <HAL_SYSTICK_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00e      	b.n	8002bbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b0f      	cmp	r3, #15
 8002ba2:	d80a      	bhi.n	8002bba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f002 fd39 	bl	8005622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bb0:	4a06      	ldr	r2, [pc, #24]	@ (8002bcc <HAL_InitTick+0x68>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e000      	b.n	8002bbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	24000018 	.word	0x24000018
 8002bc8:	2400000c 	.word	0x2400000c
 8002bcc:	24000014 	.word	0x24000014

08002bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_IncTick+0x20>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <HAL_IncTick+0x24>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	4a04      	ldr	r2, [pc, #16]	@ (8002bf4 <HAL_IncTick+0x24>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	24000018 	.word	0x24000018
 8002bf4:	2400089c 	.word	0x2400089c

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	@ (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	2400089c 	.word	0x2400089c

08002c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff ffee 	bl	8002bf8 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d005      	beq.n	8002c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c54 <HAL_Delay+0x44>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4413      	add	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c36:	bf00      	nop
 8002c38:	f7ff ffde 	bl	8002bf8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d8f7      	bhi.n	8002c38 <HAL_Delay+0x28>
  {
  }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	24000018 	.word	0x24000018

08002c58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
 8002c86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	609a      	str	r2, [r3, #8]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3360      	adds	r3, #96	@ 0x60
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a10      	ldr	r2, [pc, #64]	@ (8002d20 <LL_ADC_SetOffset+0x60>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d10b      	bne.n	8002cfc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002cfa:	e00b      	b.n	8002d14 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	58026000 	.word	0x58026000

08002d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3360      	adds	r3, #96	@ 0x60
 8002d32:	461a      	mov	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4413      	add	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d70:	431a      	orrs	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	611a      	str	r2, [r3, #16]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b087      	sub	sp, #28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d00e      	beq.n	8002db6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3360      	adds	r3, #96	@ 0x60
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	601a      	str	r2, [r3, #0]
  }
}
 8002db6:	bf00      	nop
 8002db8:	371c      	adds	r7, #28
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	58026000 	.word	0x58026000

08002dc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <LL_ADC_SetOffsetSaturation+0x40>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d10e      	bne.n	8002dfa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3360      	adds	r3, #96	@ 0x60
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	58026000 	.word	0x58026000

08002e0c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <LL_ADC_SetOffsetSign+0x40>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d10e      	bne.n	8002e3e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	3360      	adds	r3, #96	@ 0x60
 8002e24:	461a      	mov	r2, r3
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002e3e:	bf00      	nop
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	58026000 	.word	0x58026000

08002e50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	3360      	adds	r3, #96	@ 0x60
 8002e60:	461a      	mov	r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4413      	add	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea0 <LL_ADC_SetOffsetState+0x50>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002e82:	e007      	b.n	8002e94 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	371c      	adds	r7, #28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	58026000 	.word	0x58026000

08002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e000      	b.n	8002ebe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b087      	sub	sp, #28
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	3330      	adds	r3, #48	@ 0x30
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f003 030c 	and.w	r3, r3, #12
 8002ee6:	4413      	add	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	211f      	movs	r1, #31
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	401a      	ands	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	f003 011f 	and.w	r1, r3, #31
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 031f 	and.w	r3, r3, #31
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f023 0203 	bic.w	r2, r3, #3
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	60da      	str	r2, [r3, #12]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f043 0201 	orr.w	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d107      	bne.n	8002f8a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60da      	str	r2, [r3, #12]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	58026000 	.word	0x58026000

08002f9c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b087      	sub	sp, #28
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	0e5b      	lsrs	r3, r3, #25
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	f003 0304 	and.w	r3, r3, #4
 8002fde:	4413      	add	r3, r2
 8002fe0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	0d1b      	lsrs	r3, r3, #20
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	2107      	movs	r1, #7
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	0d1b      	lsrs	r3, r3, #20
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	431a      	orrs	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800300c:	bf00      	nop
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a1a      	ldr	r2, [pc, #104]	@ (8003090 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d115      	bne.n	8003058 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003038:	43db      	mvns	r3, r3
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0318 	and.w	r3, r3, #24
 8003042:	4914      	ldr	r1, [pc, #80]	@ (8003094 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003044:	40d9      	lsrs	r1, r3
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	400b      	ands	r3, r1
 800304a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003056:	e014      	b.n	8003082 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003064:	43db      	mvns	r3, r3
 8003066:	401a      	ands	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f003 0318 	and.w	r3, r3, #24
 800306e:	4909      	ldr	r1, [pc, #36]	@ (8003094 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003070:	40d9      	lsrs	r1, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	400b      	ands	r3, r1
 8003076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003082:	bf00      	nop
 8003084:	3714      	adds	r7, #20
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	58026000 	.word	0x58026000
 8003094:	000fffff 	.word	0x000fffff

08003098 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 031f 	and.w	r3, r3, #31
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b04      	ldr	r3, [pc, #16]	@ (80030f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80030de:	4013      	ands	r3, r2
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6093      	str	r3, [r2, #8]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	5fffffc0 	.word	0x5fffffc0

080030f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003108:	d101      	bne.n	800310e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b05      	ldr	r3, [pc, #20]	@ (8003140 <LL_ADC_EnableInternalRegulator+0x24>)
 800312a:	4013      	ands	r3, r2
 800312c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	6fffffc0 	.word	0x6fffffc0

08003144 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003158:	d101      	bne.n	800315e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <LL_ADC_Enable+0x24>)
 800317a:	4013      	ands	r3, r2
 800317c:	f043 0201 	orr.w	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	7fffffc0 	.word	0x7fffffc0

08003194 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <LL_ADC_Disable+0x24>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	f043 0202 	orr.w	r2, r3, #2
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	7fffffc0 	.word	0x7fffffc0

080031bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <LL_ADC_IsEnabled+0x18>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <LL_ADC_IsEnabled+0x1a>
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d101      	bne.n	80031fa <LL_ADC_IsDisableOngoing+0x18>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e000      	b.n	80031fc <LL_ADC_IsDisableOngoing+0x1a>
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	4b05      	ldr	r3, [pc, #20]	@ (800322c <LL_ADC_REG_StartConversion+0x24>)
 8003216:	4013      	ands	r3, r2
 8003218:	f043 0204 	orr.w	r2, r3, #4
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	7fffffc0 	.word	0x7fffffc0

08003230 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <LL_ADC_REG_StopConversion+0x24>)
 800323e:	4013      	ands	r3, r2
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	7fffffc0 	.word	0x7fffffc0

08003258 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b04      	cmp	r3, #4
 800326a:	d101      	bne.n	8003270 <LL_ADC_REG_IsConversionOngoing+0x18>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b05      	ldr	r3, [pc, #20]	@ (80032a4 <LL_ADC_INJ_StopConversion+0x24>)
 800328e:	4013      	ands	r3, r2
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	7fffffc0 	.word	0x7fffffc0

080032a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d101      	bne.n	80032c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032bc:	2301      	movs	r3, #1
 80032be:	e000      	b.n	80032c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	370c      	adds	r7, #12
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b089      	sub	sp, #36	@ 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032dc:	2300      	movs	r3, #0
 80032de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e1ee      	b.n	80036c8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fe fe59 	bl	8001fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff feef 	bl	80030f4 <LL_ADC_IsDeepPowerDownEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fed5 	bl	80030d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ff0a 	bl	8003144 <LL_ADC_IsInternalRegulatorEnabled>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d114      	bne.n	8003360 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff feee 	bl	800311c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003340:	4b8e      	ldr	r3, [pc, #568]	@ (800357c <HAL_ADC_Init+0x2ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	4a8e      	ldr	r2, [pc, #568]	@ (8003580 <HAL_ADC_Init+0x2b0>)
 8003348:	fba2 2303 	umull	r2, r3, r2, r3
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	3301      	adds	r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003352:	e002      	b.n	800335a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	3b01      	subs	r3, #1
 8003358:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1f9      	bne.n	8003354 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff feed 	bl	8003144 <LL_ADC_IsInternalRegulatorEnabled>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10d      	bne.n	800338c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003374:	f043 0210 	orr.w	r2, r3, #16
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003380:	f043 0201 	orr.w	r2, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff ff61 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8003396:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 8188 	bne.w	80036b6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 8184 	bne.w	80036b6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033b6:	f043 0202 	orr.w	r2, r3, #2
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff fefa 	bl	80031bc <LL_ADC_IsEnabled>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d136      	bne.n	800343c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a6c      	ldr	r2, [pc, #432]	@ (8003584 <HAL_ADC_Init+0x2b4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_ADC_Init+0x112>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6a      	ldr	r2, [pc, #424]	@ (8003588 <HAL_ADC_Init+0x2b8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10e      	bne.n	8003400 <HAL_ADC_Init+0x130>
 80033e2:	4868      	ldr	r0, [pc, #416]	@ (8003584 <HAL_ADC_Init+0x2b4>)
 80033e4:	f7ff feea 	bl	80031bc <LL_ADC_IsEnabled>
 80033e8:	4604      	mov	r4, r0
 80033ea:	4867      	ldr	r0, [pc, #412]	@ (8003588 <HAL_ADC_Init+0x2b8>)
 80033ec:	f7ff fee6 	bl	80031bc <LL_ADC_IsEnabled>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4323      	orrs	r3, r4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf0c      	ite	eq
 80033f8:	2301      	moveq	r3, #1
 80033fa:	2300      	movne	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	e008      	b.n	8003412 <HAL_ADC_Init+0x142>
 8003400:	4862      	ldr	r0, [pc, #392]	@ (800358c <HAL_ADC_Init+0x2bc>)
 8003402:	f7ff fedb 	bl	80031bc <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a5a      	ldr	r2, [pc, #360]	@ (8003584 <HAL_ADC_Init+0x2b4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <HAL_ADC_Init+0x15a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a58      	ldr	r2, [pc, #352]	@ (8003588 <HAL_ADC_Init+0x2b8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d101      	bne.n	800342e <HAL_ADC_Init+0x15e>
 800342a:	4a59      	ldr	r2, [pc, #356]	@ (8003590 <HAL_ADC_Init+0x2c0>)
 800342c:	e000      	b.n	8003430 <HAL_ADC_Init+0x160>
 800342e:	4a59      	ldr	r2, [pc, #356]	@ (8003594 <HAL_ADC_Init+0x2c4>)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7ff fc0e 	bl	8002c58 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a52      	ldr	r2, [pc, #328]	@ (800358c <HAL_ADC_Init+0x2bc>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d129      	bne.n	800349a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	7e5b      	ldrb	r3, [r3, #25]
 800344a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003450:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003456:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b08      	cmp	r3, #8
 800345e:	d013      	beq.n	8003488 <HAL_ADC_Init+0x1b8>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b0c      	cmp	r3, #12
 8003466:	d00d      	beq.n	8003484 <HAL_ADC_Init+0x1b4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	2b1c      	cmp	r3, #28
 800346e:	d007      	beq.n	8003480 <HAL_ADC_Init+0x1b0>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b18      	cmp	r3, #24
 8003476:	d101      	bne.n	800347c <HAL_ADC_Init+0x1ac>
 8003478:	2318      	movs	r3, #24
 800347a:	e006      	b.n	800348a <HAL_ADC_Init+0x1ba>
 800347c:	2300      	movs	r3, #0
 800347e:	e004      	b.n	800348a <HAL_ADC_Init+0x1ba>
 8003480:	2310      	movs	r3, #16
 8003482:	e002      	b.n	800348a <HAL_ADC_Init+0x1ba>
 8003484:	2308      	movs	r3, #8
 8003486:	e000      	b.n	800348a <HAL_ADC_Init+0x1ba>
 8003488:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800348a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003492:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
 8003498:	e00e      	b.n	80034b8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7e5b      	ldrb	r3, [r3, #25]
 800349e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80034aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d106      	bne.n	80034d0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c6:	3b01      	subs	r3, #1
 80034c8:	045b      	lsls	r3, r3, #17
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	@ (800358c <HAL_ADC_Init+0x2bc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d115      	bne.n	8003522 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	4b26      	ldr	r3, [pc, #152]	@ (8003598 <HAL_ADC_Init+0x2c8>)
 80034fe:	4013      	ands	r3, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	69b9      	ldr	r1, [r7, #24]
 8003506:	430b      	orrs	r3, r1
 8003508:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	611a      	str	r2, [r3, #16]
 8003520:	e009      	b.n	8003536 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <HAL_ADC_Init+0x2cc>)
 800352a:	4013      	ands	r3, r2
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	430b      	orrs	r3, r1
 8003534:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fe8c 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8003540:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff feae 	bl	80032a8 <LL_ADC_INJ_IsConversionOngoing>
 800354c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 808e 	bne.w	8003672 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 808a 	bne.w	8003672 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a0a      	ldr	r2, [pc, #40]	@ (800358c <HAL_ADC_Init+0x2bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d11b      	bne.n	80035a0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	7e1b      	ldrb	r3, [r3, #24]
 800356c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003574:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e018      	b.n	80035ae <HAL_ADC_Init+0x2de>
 800357c:	2400000c 	.word	0x2400000c
 8003580:	053e2d63 	.word	0x053e2d63
 8003584:	40022000 	.word	0x40022000
 8003588:	40022100 	.word	0x40022100
 800358c:	58026000 	.word	0x58026000
 8003590:	40022300 	.word	0x40022300
 8003594:	58026300 	.word	0x58026300
 8003598:	fff04007 	.word	0xfff04007
 800359c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	7e1b      	ldrb	r3, [r3, #24]
 80035a4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	4b46      	ldr	r3, [pc, #280]	@ (80036d0 <HAL_ADC_Init+0x400>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	69b9      	ldr	r1, [r7, #24]
 80035be:	430b      	orrs	r3, r1
 80035c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d137      	bne.n	800363c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a3f      	ldr	r2, [pc, #252]	@ (80036d4 <HAL_ADC_Init+0x404>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d116      	bne.n	800360a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	4b3d      	ldr	r3, [pc, #244]	@ (80036d8 <HAL_ADC_Init+0x408>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80035fa:	430a      	orrs	r2, r1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	e020      	b.n	800364c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	4b32      	ldr	r3, [pc, #200]	@ (80036dc <HAL_ADC_Init+0x40c>)
 8003612:	4013      	ands	r3, r2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003618:	3a01      	subs	r2, #1
 800361a:	0411      	lsls	r1, r2, #16
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003620:	4311      	orrs	r1, r2
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003626:	4311      	orrs	r1, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800362c:	430a      	orrs	r2, r1
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f042 0201 	orr.w	r2, r2, #1
 8003638:	611a      	str	r2, [r3, #16]
 800363a:	e007      	b.n	800364c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1b      	ldr	r2, [pc, #108]	@ (80036d4 <HAL_ADC_Init+0x404>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d002      	beq.n	8003672 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f001 fcd5 	bl	800501c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10c      	bne.n	8003694 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	f023 010f 	bic.w	r1, r3, #15
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	631a      	str	r2, [r3, #48]	@ 0x30
 8003692:	e007      	b.n	80036a4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 020f 	bic.w	r2, r2, #15
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	661a      	str	r2, [r3, #96]	@ 0x60
 80036b4:	e007      	b.n	80036c6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ba:	f043 0210 	orr.w	r2, r3, #16
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3724      	adds	r7, #36	@ 0x24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}
 80036d0:	ffffbffc 	.word	0xffffbffc
 80036d4:	58026000 	.word	0x58026000
 80036d8:	fc00f81f 	.word	0xfc00f81f
 80036dc:	fc00f81e 	.word	0xfc00f81e

080036e0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003860 <HAL_ADC_Start+0x180>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d004      	beq.n	80036fc <HAL_ADC_Start+0x1c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_ADC_Start+0x184>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_Start+0x20>
 80036fc:	4b5a      	ldr	r3, [pc, #360]	@ (8003868 <HAL_ADC_Start+0x188>)
 80036fe:	e000      	b.n	8003702 <HAL_ADC_Start+0x22>
 8003700:	4b5a      	ldr	r3, [pc, #360]	@ (800386c <HAL_ADC_Start+0x18c>)
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fcc8 	bl	8003098 <LL_ADC_GetMultimode>
 8003708:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fda2 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	f040 809a 	bne.w	8003850 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_ADC_Start+0x4a>
 8003726:	2302      	movs	r3, #2
 8003728:	e095      	b.n	8003856 <HAL_ADC_Start+0x176>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f001 faf4 	bl	8004d20 <ADC_Enable>
 8003738:	4603      	mov	r3, r0
 800373a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 8081 	bne.w	8003846 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003748:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <HAL_ADC_Start+0x190>)
 800374a:	4013      	ands	r3, r2
 800374c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a42      	ldr	r2, [pc, #264]	@ (8003864 <HAL_ADC_Start+0x184>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d002      	beq.n	8003764 <HAL_ADC_Start+0x84>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	e000      	b.n	8003766 <HAL_ADC_Start+0x86>
 8003764:	4b3e      	ldr	r3, [pc, #248]	@ (8003860 <HAL_ADC_Start+0x180>)
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	4293      	cmp	r3, r2
 800376c:	d002      	beq.n	8003774 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003778:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003784:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378c:	d106      	bne.n	800379c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003792:	f023 0206 	bic.w	r2, r3, #6
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	665a      	str	r2, [r3, #100]	@ 0x64
 800379a:	e002      	b.n	80037a2 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	221c      	movs	r2, #28
 80037a8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003864 <HAL_ADC_Start+0x184>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d002      	beq.n	80037c2 <HAL_ADC_Start+0xe2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	e000      	b.n	80037c4 <HAL_ADC_Start+0xe4>
 80037c2:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_ADC_Start+0x180>)
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d008      	beq.n	80037de <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d002      	beq.n	80037de <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b09      	cmp	r3, #9
 80037dc:	d114      	bne.n	8003808 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037f4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fd01 	bl	8003208 <LL_ADC_REG_StartConversion>
 8003806:	e025      	b.n	8003854 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	661a      	str	r2, [r3, #96]	@ 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a12      	ldr	r2, [pc, #72]	@ (8003864 <HAL_ADC_Start+0x184>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d002      	beq.n	8003824 <HAL_ADC_Start+0x144>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	e000      	b.n	8003826 <HAL_ADC_Start+0x146>
 8003824:	4b0e      	ldr	r3, [pc, #56]	@ (8003860 <HAL_ADC_Start+0x180>)
 8003826:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00f      	beq.n	8003854 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800383c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	661a      	str	r2, [r3, #96]	@ 0x60
 8003844:	e006      	b.n	8003854 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800384e:	e001      	b.n	8003854 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003850:	2302      	movs	r3, #2
 8003852:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003854:	7dfb      	ldrb	r3, [r7, #23]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40022000 	.word	0x40022000
 8003864:	40022100 	.word	0x40022100
 8003868:	40022300 	.word	0x40022300
 800386c:	58026300 	.word	0x58026300
 8003870:	fffff0fe 	.word	0xfffff0fe

08003874 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_ADC_Stop+0x16>
 8003886:	2302      	movs	r3, #2
 8003888:	e021      	b.n	80038ce <HAL_ADC_Stop+0x5a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003892:	2103      	movs	r1, #3
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f001 f987 	bl	8004ba8 <ADC_ConversionStop>
 800389a:	4603      	mov	r3, r0
 800389c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10f      	bne.n	80038c4 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f001 fac5 	bl	8004e34 <ADC_Disable>
 80038aa:	4603      	mov	r3, r0
 80038ac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d107      	bne.n	80038c4 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80038b8:	4b07      	ldr	r3, [pc, #28]	@ (80038d8 <HAL_ADC_Stop+0x64>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	661a      	str	r2, [r3, #96]	@ 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	ffffeefe 	.word	0xffffeefe

080038dc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a72      	ldr	r2, [pc, #456]	@ (8003ab4 <HAL_ADC_PollForConversion+0x1d8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_ADC_PollForConversion+0x1e>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a70      	ldr	r2, [pc, #448]	@ (8003ab8 <HAL_ADC_PollForConversion+0x1dc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_ADC_PollForConversion+0x22>
 80038fa:	4b70      	ldr	r3, [pc, #448]	@ (8003abc <HAL_ADC_PollForConversion+0x1e0>)
 80038fc:	e000      	b.n	8003900 <HAL_ADC_PollForConversion+0x24>
 80038fe:	4b70      	ldr	r3, [pc, #448]	@ (8003ac0 <HAL_ADC_PollForConversion+0x1e4>)
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fbc9 	bl	8003098 <LL_ADC_GetMultimode>
 8003906:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d102      	bne.n	8003916 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003910:	2308      	movs	r3, #8
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e037      	b.n	8003986 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d002      	beq.n	8003928 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b09      	cmp	r3, #9
 8003926:	d111      	bne.n	800394c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f043 0220 	orr.w	r2, r3, #32
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e0b1      	b.n	8003aaa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003946:	2304      	movs	r3, #4
 8003948:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800394a:	e01c      	b.n	8003986 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a58      	ldr	r2, [pc, #352]	@ (8003ab4 <HAL_ADC_PollForConversion+0x1d8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_ADC_PollForConversion+0x84>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a57      	ldr	r2, [pc, #348]	@ (8003ab8 <HAL_ADC_PollForConversion+0x1dc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_ADC_PollForConversion+0x88>
 8003960:	4b56      	ldr	r3, [pc, #344]	@ (8003abc <HAL_ADC_PollForConversion+0x1e0>)
 8003962:	e000      	b.n	8003966 <HAL_ADC_PollForConversion+0x8a>
 8003964:	4b56      	ldr	r3, [pc, #344]	@ (8003ac0 <HAL_ADC_PollForConversion+0x1e4>)
 8003966:	4618      	mov	r0, r3
 8003968:	f7ff fba4 	bl	80030b4 <LL_ADC_GetMultiDMATransfer>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	661a      	str	r2, [r3, #96]	@ 0x60
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e093      	b.n	8003aaa <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003982:	2304      	movs	r3, #4
 8003984:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003986:	f7ff f937 	bl	8002bf8 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800398c:	e021      	b.n	80039d2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d01d      	beq.n	80039d2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003996:	f7ff f92f 	bl	8002bf8 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <HAL_ADC_PollForConversion+0xd0>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d112      	bne.n	80039d2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	f043 0204 	orr.w	r2, r3, #4
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e06b      	b.n	8003aaa <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0d6      	beq.n	800398e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fa57 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01c      	beq.n	8003a36 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7e5b      	ldrb	r3, [r3, #25]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d118      	bne.n	8003a36 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d111      	bne.n	8003a36 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	661a      	str	r2, [r3, #96]	@ 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d105      	bne.n	8003a36 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	f043 0201 	orr.w	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ab8 <HAL_ADC_PollForConversion+0x1dc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d002      	beq.n	8003a46 <HAL_ADC_PollForConversion+0x16a>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_PollForConversion+0x16c>
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_ADC_PollForConversion+0x1d8>)
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6812      	ldr	r2, [r2, #0]
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d008      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d002      	beq.n	8003a62 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b09      	cmp	r3, #9
 8003a60:	d104      	bne.n	8003a6c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e00c      	b.n	8003a86 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a11      	ldr	r2, [pc, #68]	@ (8003ab8 <HAL_ADC_PollForConversion+0x1dc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d002      	beq.n	8003a7c <HAL_ADC_PollForConversion+0x1a0>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	e000      	b.n	8003a7e <HAL_ADC_PollForConversion+0x1a2>
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <HAL_ADC_PollForConversion+0x1d8>)
 8003a7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d104      	bne.n	8003a96 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2208      	movs	r2, #8
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e008      	b.n	8003aa8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d103      	bne.n	8003aa8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	220c      	movs	r2, #12
 8003aa6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40022000 	.word	0x40022000
 8003ab8:	40022100 	.word	0x40022100
 8003abc:	40022300 	.word	0x40022300
 8003ac0:	58026300 	.word	0x58026300

08003ac4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a60      	ldr	r2, [pc, #384]	@ (8003c58 <HAL_ADC_Start_DMA+0x194>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <HAL_ADC_Start_DMA+0x20>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a5f      	ldr	r2, [pc, #380]	@ (8003c5c <HAL_ADC_Start_DMA+0x198>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <HAL_ADC_Start_DMA+0x24>
 8003ae4:	4b5e      	ldr	r3, [pc, #376]	@ (8003c60 <HAL_ADC_Start_DMA+0x19c>)
 8003ae6:	e000      	b.n	8003aea <HAL_ADC_Start_DMA+0x26>
 8003ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c64 <HAL_ADC_Start_DMA+0x1a0>)
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7ff fad4 	bl	8003098 <LL_ADC_GetMultimode>
 8003af0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff fbae 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f040 80a2 	bne.w	8003c48 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d101      	bne.n	8003b12 <HAL_ADC_Start_DMA+0x4e>
 8003b0e:	2302      	movs	r3, #2
 8003b10:	e09d      	b.n	8003c4e <HAL_ADC_Start_DMA+0x18a>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d003      	beq.n	8003b2e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b09      	cmp	r3, #9
 8003b2a:	f040 8086 	bne.w	8003c3a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f001 f8f6 	bl	8004d20 <ADC_Enable>
 8003b34:	4603      	mov	r3, r0
 8003b36:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d178      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b42:	4b49      	ldr	r3, [pc, #292]	@ (8003c68 <HAL_ADC_Start_DMA+0x1a4>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a42      	ldr	r2, [pc, #264]	@ (8003c5c <HAL_ADC_Start_DMA+0x198>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d002      	beq.n	8003b5e <HAL_ADC_Start_DMA+0x9a>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	e000      	b.n	8003b60 <HAL_ADC_Start_DMA+0x9c>
 8003b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c58 <HAL_ADC_Start_DMA+0x194>)
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	6812      	ldr	r2, [r2, #0]
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d002      	beq.n	8003b6e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d105      	bne.n	8003b7a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d006      	beq.n	8003b94 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8a:	f023 0206 	bic.w	r2, r3, #6
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	665a      	str	r2, [r3, #100]	@ 0x64
 8003b92:	e002      	b.n	8003b9a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9e:	4a33      	ldr	r2, [pc, #204]	@ (8003c6c <HAL_ADC_Start_DMA+0x1a8>)
 8003ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba6:	4a32      	ldr	r2, [pc, #200]	@ (8003c70 <HAL_ADC_Start_DMA+0x1ac>)
 8003ba8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bae:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <HAL_ADC_Start_DMA+0x1b0>)
 8003bb0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	221c      	movs	r2, #28
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0210 	orr.w	r2, r2, #16
 8003bd0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a28      	ldr	r2, [pc, #160]	@ (8003c78 <HAL_ADC_Start_DMA+0x1b4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10f      	bne.n	8003bfc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4619      	mov	r1, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f7ff f9bc 	bl	8002f68 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff f9a7 	bl	8002f48 <LL_ADC_EnableDMAReq>
 8003bfa:	e007      	b.n	8003c0c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7ff f98b 	bl	8002f22 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3340      	adds	r3, #64	@ 0x40
 8003c16:	4619      	mov	r1, r3
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f002 f88e 	bl	8005d3c <HAL_DMA_Start_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff faed 	bl	8003208 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c2e:	e00d      	b.n	8003c4c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8003c38:	e008      	b.n	8003c4c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8003c46:	e001      	b.n	8003c4c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40022000 	.word	0x40022000
 8003c5c:	40022100 	.word	0x40022100
 8003c60:	40022300 	.word	0x40022300
 8003c64:	58026300 	.word	0x58026300
 8003c68:	fffff0fe 	.word	0xfffff0fe
 8003c6c:	08004ef3 	.word	0x08004ef3
 8003c70:	08004fcb 	.word	0x08004fcb
 8003c74:	08004fe7 	.word	0x08004fe7
 8003c78:	58026000 	.word	0x58026000

08003c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08a      	sub	sp, #40	@ 0x28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a87      	ldr	r2, [pc, #540]	@ (8003ed8 <HAL_ADC_IRQHandler+0x240>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d004      	beq.n	8003cc8 <HAL_ADC_IRQHandler+0x30>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a86      	ldr	r2, [pc, #536]	@ (8003edc <HAL_ADC_IRQHandler+0x244>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d101      	bne.n	8003ccc <HAL_ADC_IRQHandler+0x34>
 8003cc8:	4b85      	ldr	r3, [pc, #532]	@ (8003ee0 <HAL_ADC_IRQHandler+0x248>)
 8003cca:	e000      	b.n	8003cce <HAL_ADC_IRQHandler+0x36>
 8003ccc:	4b85      	ldr	r3, [pc, #532]	@ (8003ee4 <HAL_ADC_IRQHandler+0x24c>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7ff f9e2 	bl	8003098 <LL_ADC_GetMultimode>
 8003cd4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d017      	beq.n	8003d10 <HAL_ADC_IRQHandler+0x78>
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d012      	beq.n	8003d10 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d105      	bne.n	8003d02 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cfa:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f001 fac6 	bl	8005294 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <HAL_ADC_IRQHandler+0x8c>
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 8083 	beq.w	8003e36 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d07d      	beq.n	8003e36 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3e:	f003 0310 	and.w	r3, r3, #16
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d105      	bne.n	8003d52 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff f8a4 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d062      	beq.n	8003e28 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5d      	ldr	r2, [pc, #372]	@ (8003edc <HAL_ADC_IRQHandler+0x244>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d002      	beq.n	8003d72 <HAL_ADC_IRQHandler+0xda>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	e000      	b.n	8003d74 <HAL_ADC_IRQHandler+0xdc>
 8003d72:	4b59      	ldr	r3, [pc, #356]	@ (8003ed8 <HAL_ADC_IRQHandler+0x240>)
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d008      	beq.n	8003d8e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b05      	cmp	r3, #5
 8003d86:	d002      	beq.n	8003d8e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b09      	cmp	r3, #9
 8003d8c:	d104      	bne.n	8003d98 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	623b      	str	r3, [r7, #32]
 8003d96:	e00c      	b.n	8003db2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a4f      	ldr	r2, [pc, #316]	@ (8003edc <HAL_ADC_IRQHandler+0x244>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d002      	beq.n	8003da8 <HAL_ADC_IRQHandler+0x110>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e000      	b.n	8003daa <HAL_ADC_IRQHandler+0x112>
 8003da8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed8 <HAL_ADC_IRQHandler+0x240>)
 8003daa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d135      	bne.n	8003e28 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d12e      	bne.n	8003e28 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fa42 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d11a      	bne.n	8003e10 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 020c 	bic.w	r2, r2, #12
 8003de8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d112      	bne.n	8003e28 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e06:	f043 0201 	orr.w	r2, r3, #1
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003e0e:	e00b      	b.n	8003e28 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e14:	f043 0210 	orr.w	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e20:	f043 0201 	orr.w	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fd fc5d 	bl	80016e8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	220c      	movs	r2, #12
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_ADC_IRQHandler+0x1b2>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a0 	beq.w	8003f96 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 809a 	beq.w	8003f96 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d105      	bne.n	8003e7a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f88c 	bl	8002f9c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003e84:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f80a 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e90:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a11      	ldr	r2, [pc, #68]	@ (8003edc <HAL_ADC_IRQHandler+0x244>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d002      	beq.n	8003ea2 <HAL_ADC_IRQHandler+0x20a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	e000      	b.n	8003ea4 <HAL_ADC_IRQHandler+0x20c>
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <HAL_ADC_IRQHandler+0x240>)
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d008      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d002      	beq.n	8003ebe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b07      	cmp	r3, #7
 8003ebc:	d104      	bne.n	8003ec8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	623b      	str	r3, [r7, #32]
 8003ec6:	e014      	b.n	8003ef2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a03      	ldr	r2, [pc, #12]	@ (8003edc <HAL_ADC_IRQHandler+0x244>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00a      	beq.n	8003ee8 <HAL_ADC_IRQHandler+0x250>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	e008      	b.n	8003eea <HAL_ADC_IRQHandler+0x252>
 8003ed8:	40022000 	.word	0x40022000
 8003edc:	40022100 	.word	0x40022100
 8003ee0:	40022300 	.word	0x40022300
 8003ee4:	58026300 	.word	0x58026300
 8003ee8:	4b84      	ldr	r3, [pc, #528]	@ (80040fc <HAL_ADC_IRQHandler+0x464>)
 8003eea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d047      	beq.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <HAL_ADC_IRQHandler+0x27a>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d03f      	beq.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d13a      	bne.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f1c:	2b40      	cmp	r3, #64	@ 0x40
 8003f1e:	d133      	bne.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12e      	bne.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f9ba 	bl	80032a8 <LL_ADC_INJ_IsConversionOngoing>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11a      	bne.n	8003f70 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f48:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d112      	bne.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f66:	f043 0201 	orr.w	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	661a      	str	r2, [r3, #96]	@ 0x60
 8003f6e:	e00b      	b.n	8003f88 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f74:	f043 0210 	orr.w	r2, r3, #16
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f80:	f043 0201 	orr.w	r2, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 f95b 	bl	8005244 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2260      	movs	r2, #96	@ 0x60
 8003f94:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x32c>
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8b2 	bl	8004120 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2280      	movs	r2, #128	@ 0x80
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d012      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x35c>
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f001 f941 	bl	800526c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d012      	beq.n	8004024 <HAL_ADC_IRQHandler+0x38c>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00d      	beq.n	8004024 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f001 f933 	bl	8005280 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d043      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x41e>
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b00      	cmp	r3, #0
 8004036:	d03e      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
 8004044:	e021      	b.n	800408a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2a      	ldr	r2, [pc, #168]	@ (80040fc <HAL_ADC_IRQHandler+0x464>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d004      	beq.n	8004060 <HAL_ADC_IRQHandler+0x3c8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a29      	ldr	r2, [pc, #164]	@ (8004100 <HAL_ADC_IRQHandler+0x468>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_ADC_IRQHandler+0x3cc>
 8004060:	4b28      	ldr	r3, [pc, #160]	@ (8004104 <HAL_ADC_IRQHandler+0x46c>)
 8004062:	e000      	b.n	8004066 <HAL_ADC_IRQHandler+0x3ce>
 8004064:	4b28      	ldr	r3, [pc, #160]	@ (8004108 <HAL_ADC_IRQHandler+0x470>)
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff f824 	bl	80030b4 <LL_ADC_GetMultiDMATransfer>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004072:	2301      	movs	r3, #1
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
 8004076:	e008      	b.n	800408a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004086:	2301      	movs	r3, #1
 8004088:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	2b01      	cmp	r3, #1
 800408e:	d10e      	bne.n	80040ae <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004094:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040a0:	f043 0202 	orr.w	r2, r3, #2
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f843 	bl	8004134 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d018      	beq.n	80040f2 <HAL_ADC_IRQHandler+0x45a>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d013      	beq.n	80040f2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ce:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040da:	f043 0208 	orr.w	r2, r3, #8
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040ea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f001 f8b3 	bl	8005258 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80040f2:	bf00      	nop
 80040f4:	3728      	adds	r7, #40	@ 0x28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40022000 	.word	0x40022000
 8004100:	40022100 	.word	0x40022100
 8004104:	40022300 	.word	0x40022300
 8004108:	58026300 	.word	0x58026300

0800410c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b0b9      	sub	sp, #228	@ 0xe4
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004158:	2300      	movs	r3, #0
 800415a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004162:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	4aab      	ldr	r2, [pc, #684]	@ (8004418 <HAL_ADC_ConfigChannel+0x2d0>)
 800416a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d102      	bne.n	800417c <HAL_ADC_ConfigChannel+0x34>
 8004176:	2302      	movs	r3, #2
 8004178:	f000 bcfe 	b.w	8004b78 <HAL_ADC_ConfigChannel+0xa30>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff f865 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 84e2 	bne.w	8004b5a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db38      	blt.n	8004210 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a9e      	ldr	r2, [pc, #632]	@ (800441c <HAL_ADC_ConfigChannel+0x2d4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d033      	beq.n	8004210 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x7e>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0e9b      	lsrs	r3, r3, #26
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2201      	movs	r2, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	e01d      	b.n	8004202 <HAL_ADC_ConfigChannel+0xba>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 80041ea:	2320      	movs	r3, #32
 80041ec:	e004      	b.n	80041f8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 80041ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2201      	movs	r2, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	69d1      	ldr	r1, [r2, #28]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	430b      	orrs	r3, r1
 800420e:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	f7fe fe54 	bl	8002eca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f816 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 800422c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff f837 	bl	80032a8 <LL_ADC_INJ_IsConversionOngoing>
 800423a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 8270 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f040 826b 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	461a      	mov	r2, r3
 8004260:	f7fe feaf 	bl	8002fc2 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6c      	ldr	r2, [pc, #432]	@ (800441c <HAL_ADC_ConfigChannel+0x2d4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004288:	e032      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800428a:	4b65      	ldr	r3, [pc, #404]	@ (8004420 <HAL_ADC_ConfigChannel+0x2d8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004292:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004296:	d10b      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x168>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	e01d      	b.n	80042ec <HAL_ADC_ConfigChannel+0x1a4>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x18e>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	e00a      	b.n	80042ec <HAL_ADC_ConfigChannel+0x1a4>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d048      	beq.n	800438a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6919      	ldr	r1, [r3, #16]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004308:	f7fe fcda 	bl	8002cc0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a42      	ldr	r2, [pc, #264]	@ (800441c <HAL_ADC_ConfigChannel+0x2d4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d119      	bne.n	800434a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6919      	ldr	r1, [r3, #16]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	461a      	mov	r2, r3
 8004324:	f7fe fd72 	bl	8002e0c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6919      	ldr	r1, [r3, #16]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x1f8>
 800433a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433e:	e000      	b.n	8004342 <HAL_ADC_ConfigChannel+0x1fa>
 8004340:	2300      	movs	r3, #0
 8004342:	461a      	mov	r2, r3
 8004344:	f7fe fd40 	bl	8002dc8 <LL_ADC_SetOffsetSaturation>
 8004348:	e1ee      	b.n	8004728 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6919      	ldr	r1, [r3, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x21a>
 800435c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004360:	e000      	b.n	8004364 <HAL_ADC_ConfigChannel+0x21c>
 8004362:	2300      	movs	r3, #0
 8004364:	461a      	mov	r2, r3
 8004366:	f7fe fd0d 	bl	8002d84 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6919      	ldr	r1, [r3, #16]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	7e1b      	ldrb	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x238>
 800437a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800437e:	e000      	b.n	8004382 <HAL_ADC_ConfigChannel+0x23a>
 8004380:	2300      	movs	r3, #0
 8004382:	461a      	mov	r2, r3
 8004384:	f7fe fce4 	bl	8002d50 <LL_ADC_SetDataRightShift>
 8004388:	e1ce      	b.n	8004728 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a23      	ldr	r2, [pc, #140]	@ (800441c <HAL_ADC_ConfigChannel+0x2d4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	f040 8181 	bne.w	8004698 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe fcc1 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x27a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fcb6 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 80043b8:	4603      	mov	r3, r0
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	f003 021f 	and.w	r2, r3, #31
 80043c0:	e01e      	b.n	8004400 <HAL_ADC_ConfigChannel+0x2b8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fe fcab 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80043e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 80043e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80043f0:	2320      	movs	r3, #32
 80043f2:	e004      	b.n	80043fe <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80043f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x2dc>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0e9b      	lsrs	r3, r3, #26
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	e01e      	b.n	8004456 <HAL_ADC_ConfigChannel+0x30e>
 8004418:	47ff0000 	.word	0x47ff0000
 800441c:	58026000 	.word	0x58026000
 8004420:	5c001000 	.word	0x5c001000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800443c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004448:	2320      	movs	r3, #32
 800444a:	e004      	b.n	8004456 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800444c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	429a      	cmp	r2, r3
 8004458:	d106      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f7fe fcf4 	bl	8002e50 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fc58 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x34c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fc4d 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	0e9b      	lsrs	r3, r3, #26
 800448e:	f003 021f 	and.w	r2, r3, #31
 8004492:	e01e      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x38a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fc42 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80044b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80044ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e004      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80044c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x3a2>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	e018      	b.n	800451c <HAL_ADC_ConfigChannel+0x3d4>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80044fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004502:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8004506:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 800450e:	2320      	movs	r3, #32
 8004510:	e004      	b.n	800451c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8004512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	429a      	cmp	r2, r3
 800451e:	d106      	bne.n	800452e <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2200      	movs	r2, #0
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f7fe fc91 	bl	8002e50 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2102      	movs	r1, #2
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe fbf5 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_ADC_ConfigChannel+0x412>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2102      	movs	r1, #2
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fbea 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	0e9b      	lsrs	r3, r3, #26
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	e01e      	b.n	8004598 <HAL_ADC_ConfigChannel+0x450>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fbdf 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 8004566:	4603      	mov	r3, r0
 8004568:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004578:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800457c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004580:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e004      	b.n	8004596 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x468>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	e014      	b.n	80045da <HAL_ADC_ConfigChannel+0x492>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80045be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80045c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e004      	b.n	80045da <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80045d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	429a      	cmp	r2, r3
 80045dc:	d106      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fc32 	bl	8002e50 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2103      	movs	r1, #3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fb96 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x4d0>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2103      	movs	r1, #3
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fb8b 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	f003 021f 	and.w	r2, r3, #31
 8004616:	e017      	b.n	8004648 <HAL_ADC_ConfigChannel+0x500>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2103      	movs	r1, #3
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe fb80 	bl	8002d24 <LL_ADC_GetOffsetChannel>
 8004624:	4603      	mov	r3, r0
 8004626:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004632:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004634:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e003      	b.n	8004646 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800463e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x518>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	e011      	b.n	8004684 <HAL_ADC_ConfigChannel+0x53c>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800466e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004670:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004672:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800467c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	429a      	cmp	r2, r3
 8004686:	d14f      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	2103      	movs	r1, #3
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe fbdd 	bl	8002e50 <LL_ADC_SetOffsetState>
 8004696:	e047      	b.n	8004728 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	069b      	lsls	r3, r3, #26
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046ba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	069b      	lsls	r3, r3, #26
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d107      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80046de:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	069b      	lsls	r3, r3, #26
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d107      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004702:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	069b      	lsls	r3, r3, #26
 8004714:	429a      	cmp	r2, r3
 8004716:	d107      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004726:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe fd45 	bl	80031bc <LL_ADC_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8219 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fe fc66 	bl	8003018 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4aa1      	ldr	r2, [pc, #644]	@ (80049d8 <HAL_ADC_ConfigChannel+0x890>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f040 812e 	bne.w	80049b4 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x638>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2b09      	cmp	r3, #9
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e019      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x66c>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800478e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004790:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e003      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800479c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	bf94      	ite	ls
 80047ae:	2301      	movls	r3, #1
 80047b0:	2300      	movhi	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d079      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x68c>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	3301      	adds	r3, #1
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047d2:	e015      	b.n	8004800 <HAL_ADC_ConfigChannel+0x6b8>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80047e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80047e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80047f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x6d8>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	3301      	adds	r3, #1
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	e017      	b.n	8004850 <HAL_ADC_ConfigChannel+0x708>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800482e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e003      	b.n	8004844 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	ea42 0103 	orr.w	r1, r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x72e>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e9b      	lsrs	r3, r3, #26
 8004866:	3301      	adds	r3, #1
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	051b      	lsls	r3, r3, #20
 8004874:	e018      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x760>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e003      	b.n	800489a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a8:	430b      	orrs	r3, r1
 80048aa:	e07e      	b.n	80049aa <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x780>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0e9b      	lsrs	r3, r3, #26
 80048be:	3301      	adds	r3, #1
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048c6:	e015      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x7ac>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e003      	b.n	80048ec <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x7cc>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	e017      	b.n	8004944 <HAL_ADC_ConfigChannel+0x7fc>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	61bb      	str	r3, [r7, #24]
  return result;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x828>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	3301      	adds	r3, #1
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	3b1e      	subs	r3, #30
 8004968:	051b      	lsls	r3, r3, #20
 800496a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800496e:	e01b      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x860>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	60fb      	str	r3, [r7, #12]
  return result;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004988:	2320      	movs	r3, #32
 800498a:	e003      	b.n	8004994 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	3301      	adds	r3, #1
 8004996:	f003 021f 	and.w	r2, r3, #31
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	051b      	lsls	r3, r3, #20
 80049a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	430b      	orrs	r3, r1
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f7fe fb07 	bl	8002fc2 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f280 80d7 	bge.w	8004b6c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a06      	ldr	r2, [pc, #24]	@ (80049dc <HAL_ADC_ConfigChannel+0x894>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_ADC_ConfigChannel+0x88a>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_ADC_ConfigChannel+0x898>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10a      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x8a0>
 80049d2:	4b04      	ldr	r3, [pc, #16]	@ (80049e4 <HAL_ADC_ConfigChannel+0x89c>)
 80049d4:	e009      	b.n	80049ea <HAL_ADC_ConfigChannel+0x8a2>
 80049d6:	bf00      	nop
 80049d8:	47ff0000 	.word	0x47ff0000
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022100 	.word	0x40022100
 80049e4:	40022300 	.word	0x40022300
 80049e8:	4b65      	ldr	r3, [pc, #404]	@ (8004b80 <HAL_ADC_ConfigChannel+0xa38>)
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe f95a 	bl	8002ca4 <LL_ADC_GetCommonPathInternalCh>
 80049f0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a62      	ldr	r2, [pc, #392]	@ (8004b84 <HAL_ADC_ConfigChannel+0xa3c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x8c0>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a61      	ldr	r2, [pc, #388]	@ (8004b88 <HAL_ADC_ConfigChannel+0xa40>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10e      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x8de>
 8004a08:	485e      	ldr	r0, [pc, #376]	@ (8004b84 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a0a:	f7fe fbd7 	bl	80031bc <LL_ADC_IsEnabled>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	485d      	ldr	r0, [pc, #372]	@ (8004b88 <HAL_ADC_ConfigChannel+0xa40>)
 8004a12:	f7fe fbd3 	bl	80031bc <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4323      	orrs	r3, r4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e008      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x8f0>
 8004a26:	4859      	ldr	r0, [pc, #356]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa44>)
 8004a28:	f7fe fbc8 	bl	80031bc <LL_ADC_IsEnabled>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8084 	beq.w	8004b46 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a53      	ldr	r2, [pc, #332]	@ (8004b90 <HAL_ADC_ConfigChannel+0xa48>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d132      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x966>
 8004a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d12c      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a4c      	ldr	r2, [pc, #304]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa44>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	f040 8086 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a47      	ldr	r2, [pc, #284]	@ (8004b84 <HAL_ADC_ConfigChannel+0xa3c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x92c>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a46      	ldr	r2, [pc, #280]	@ (8004b88 <HAL_ADC_ConfigChannel+0xa40>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x930>
 8004a74:	4a47      	ldr	r2, [pc, #284]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa4c>)
 8004a76:	e000      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x932>
 8004a78:	4a41      	ldr	r2, [pc, #260]	@ (8004b80 <HAL_ADC_ConfigChannel+0xa38>)
 8004a7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7fe f8fa 	bl	8002c7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8a:	4b43      	ldr	r3, [pc, #268]	@ (8004b98 <HAL_ADC_ConfigChannel+0xa50>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	4a42      	ldr	r2, [pc, #264]	@ (8004b9c <HAL_ADC_ConfigChannel+0xa54>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	3301      	adds	r3, #1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a9e:	e002      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f9      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aac:	e05e      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba0 <HAL_ADC_ConfigChannel+0xa58>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d120      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x9b2>
 8004ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004abc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11a      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa44>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d14e      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b84 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0x99a>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	@ (8004b88 <HAL_ADC_ConfigChannel+0xa40>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x99e>
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa4c>)
 8004ae4:	e000      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x9a0>
 8004ae6:	4a26      	ldr	r2, [pc, #152]	@ (8004b80 <HAL_ADC_ConfigChannel+0xa38>)
 8004ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7fe f8c3 	bl	8002c7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004af8:	e038      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a29      	ldr	r2, [pc, #164]	@ (8004ba4 <HAL_ADC_ConfigChannel+0xa5c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d133      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
 8004b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d12d      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1d      	ldr	r2, [pc, #116]	@ (8004b8c <HAL_ADC_ConfigChannel+0xa44>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d128      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_ADC_ConfigChannel+0x9e6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a17      	ldr	r2, [pc, #92]	@ (8004b88 <HAL_ADC_ConfigChannel+0xa40>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x9ea>
 8004b2e:	4a19      	ldr	r2, [pc, #100]	@ (8004b94 <HAL_ADC_ConfigChannel+0xa4c>)
 8004b30:	e000      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x9ec>
 8004b32:	4a13      	ldr	r2, [pc, #76]	@ (8004b80 <HAL_ADC_ConfigChannel+0xa38>)
 8004b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b38:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7fe f89d 	bl	8002c7e <LL_ADC_SetCommonPathInternalCh>
 8004b44:	e012      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004b58:	e008      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b74:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	37e4      	adds	r7, #228	@ 0xe4
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	58026300 	.word	0x58026300
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40022100 	.word	0x40022100
 8004b8c:	58026000 	.word	0x58026000
 8004b90:	c7520000 	.word	0xc7520000
 8004b94:	40022300 	.word	0x40022300
 8004b98:	2400000c 	.word	0x2400000c
 8004b9c:	053e2d63 	.word	0x053e2d63
 8004ba0:	c3210000 	.word	0xc3210000
 8004ba4:	cb840000 	.word	0xcb840000

08004ba8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fb4a 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8004bc4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fb6c 	bl	80032a8 <LL_ADC_INJ_IsConversionOngoing>
 8004bd0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8098 	beq.w	8004d10 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d02a      	beq.n	8004c44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7e5b      	ldrb	r3, [r3, #25]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d126      	bne.n	8004c44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e1b      	ldrb	r3, [r3, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d122      	bne.n	8004c44 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c02:	e014      	b.n	8004c2e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4a45      	ldr	r2, [pc, #276]	@ (8004d1c <ADC_ConversionStop+0x174>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d90d      	bls.n	8004c28 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c10:	f043 0210 	orr.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c1c:	f043 0201 	orr.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e074      	b.n	8004d12 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c38:	2b40      	cmp	r3, #64	@ 0x40
 8004c3a:	d1e3      	bne.n	8004c04 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2240      	movs	r2, #64	@ 0x40
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d014      	beq.n	8004c74 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fb02 	bl	8003258 <LL_ADC_REG_IsConversionOngoing>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fabf 	bl	80031e2 <LL_ADC_IsDisableOngoing>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fade 	bl	8003230 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d014      	beq.n	8004ca4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fb12 	bl	80032a8 <LL_ADC_INJ_IsConversionOngoing>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe faa7 	bl	80031e2 <LL_ADC_IsDisableOngoing>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe faee 	bl	8003280 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d005      	beq.n	8004cb6 <ADC_ConversionStop+0x10e>
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d105      	bne.n	8004cbc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	617b      	str	r3, [r7, #20]
        break;
 8004cb4:	e005      	b.n	8004cc2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	617b      	str	r3, [r7, #20]
        break;
 8004cba:	e002      	b.n	8004cc2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	617b      	str	r3, [r7, #20]
        break;
 8004cc0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cc2:	f7fd ff99 	bl	8002bf8 <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cc8:	e01b      	b.n	8004d02 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004cca:	f7fd ff95 	bl	8002bf8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d914      	bls.n	8004d02 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cea:	f043 0210 	orr.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e007      	b.n	8004d12 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1dc      	bne.n	8004cca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	000cdbff 	.word	0x000cdbff

08004d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fa45 	bl	80031bc <LL_ADC_IsEnabled>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d16e      	bne.n	8004e16 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b38      	ldr	r3, [pc, #224]	@ (8004e20 <ADC_Enable+0x100>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d4a:	f043 0210 	orr.w	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e05a      	b.n	8004e18 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fa00 	bl	800316c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d6c:	f7fd ff44 	bl	8002bf8 <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2b      	ldr	r2, [pc, #172]	@ (8004e24 <ADC_Enable+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <ADC_Enable+0x66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a29      	ldr	r2, [pc, #164]	@ (8004e28 <ADC_Enable+0x108>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <ADC_Enable+0x6a>
 8004d86:	4b29      	ldr	r3, [pc, #164]	@ (8004e2c <ADC_Enable+0x10c>)
 8004d88:	e000      	b.n	8004d8c <ADC_Enable+0x6c>
 8004d8a:	4b29      	ldr	r3, [pc, #164]	@ (8004e30 <ADC_Enable+0x110>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe f983 	bl	8003098 <LL_ADC_GetMultimode>
 8004d92:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a23      	ldr	r2, [pc, #140]	@ (8004e28 <ADC_Enable+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d002      	beq.n	8004da4 <ADC_Enable+0x84>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e000      	b.n	8004da6 <ADC_Enable+0x86>
 8004da4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e24 <ADC_Enable+0x104>)
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02c      	beq.n	8004e08 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d130      	bne.n	8004e16 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004db4:	e028      	b.n	8004e08 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe f9fe 	bl	80031bc <LL_ADC_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f9ce 	bl	800316c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dd0:	f7fd ff12 	bl	8002bf8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d914      	bls.n	8004e08 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d00d      	beq.n	8004e08 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df0:	f043 0210 	orr.w	r2, r3, #16
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e007      	b.n	8004e18 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d1cf      	bne.n	8004db6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	8000003f 	.word	0x8000003f
 8004e24:	40022000 	.word	0x40022000
 8004e28:	40022100 	.word	0x40022100
 8004e2c:	40022300 	.word	0x40022300
 8004e30:	58026300 	.word	0x58026300

08004e34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fe f9ce 	bl	80031e2 <LL_ADC_IsDisableOngoing>
 8004e46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe f9b5 	bl	80031bc <LL_ADC_IsEnabled>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d047      	beq.n	8004ee8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d144      	bne.n	8004ee8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030d 	and.w	r3, r3, #13
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10c      	bne.n	8004e86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe f98f 	bl	8003194 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e7e:	f7fd febb 	bl	8002bf8 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e84:	e029      	b.n	8004eda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8a:	f043 0210 	orr.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e023      	b.n	8004eea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ea2:	f7fd fea9 	bl	8002bf8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d914      	bls.n	8004eda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e007      	b.n	8004eea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1dc      	bne.n	8004ea2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d14b      	bne.n	8004fa4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f10:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d021      	beq.n	8004f6a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd ffba 	bl	8002ea4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d032      	beq.n	8004f9c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d12b      	bne.n	8004f9c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d11f      	bne.n	8004f9c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f60:	f043 0201 	orr.w	r2, r3, #1
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f68:	e018      	b.n	8004f9c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d111      	bne.n	8004f9c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d105      	bne.n	8004f9c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7fc fba3 	bl	80016e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fa2:	e00e      	b.n	8004fc2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff f8bf 	bl	8004134 <HAL_ADC_ErrorCallback>
}
 8004fb6:	e004      	b.n	8004fc2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
}
 8004fc2:	bf00      	nop
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f7ff f897 	bl	800410c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005004:	f043 0204 	orr.w	r2, r3, #4
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f7ff f891 	bl	8004134 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6c      	ldr	r2, [pc, #432]	@ (80051dc <ADC_ConfigureBoostMode+0x1c0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <ADC_ConfigureBoostMode+0x1c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6b      	ldr	r2, [pc, #428]	@ (80051e0 <ADC_ConfigureBoostMode+0x1c4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d109      	bne.n	800504c <ADC_ConfigureBoostMode+0x30>
 8005038:	4b6a      	ldr	r3, [pc, #424]	@ (80051e4 <ADC_ConfigureBoostMode+0x1c8>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005040:	2b00      	cmp	r3, #0
 8005042:	bf14      	ite	ne
 8005044:	2301      	movne	r3, #1
 8005046:	2300      	moveq	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	e008      	b.n	800505e <ADC_ConfigureBoostMode+0x42>
 800504c:	4b66      	ldr	r3, [pc, #408]	@ (80051e8 <ADC_ConfigureBoostMode+0x1cc>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d01c      	beq.n	800509c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005062:	f004 fec7 	bl	8009df4 <HAL_RCC_GetHCLKFreq>
 8005066:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005070:	d010      	beq.n	8005094 <ADC_ConfigureBoostMode+0x78>
 8005072:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005076:	d873      	bhi.n	8005160 <ADC_ConfigureBoostMode+0x144>
 8005078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800507c:	d002      	beq.n	8005084 <ADC_ConfigureBoostMode+0x68>
 800507e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005082:	d16d      	bne.n	8005160 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	0c1b      	lsrs	r3, r3, #16
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005090:	60fb      	str	r3, [r7, #12]
        break;
 8005092:	e068      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	60fb      	str	r3, [r7, #12]
        break;
 800509a:	e064      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800509c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80050a0:	f04f 0100 	mov.w	r1, #0
 80050a4:	f006 f8a2 	bl	800b1ec <HAL_RCCEx_GetPeriphCLKFreq>
 80050a8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80050b2:	d051      	beq.n	8005158 <ADC_ConfigureBoostMode+0x13c>
 80050b4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80050b8:	d854      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 80050ba:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80050be:	d047      	beq.n	8005150 <ADC_ConfigureBoostMode+0x134>
 80050c0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80050c4:	d84e      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 80050c6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80050ca:	d03d      	beq.n	8005148 <ADC_ConfigureBoostMode+0x12c>
 80050cc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80050d0:	d848      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 80050d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050d6:	d033      	beq.n	8005140 <ADC_ConfigureBoostMode+0x124>
 80050d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80050dc:	d842      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 80050de:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80050e2:	d029      	beq.n	8005138 <ADC_ConfigureBoostMode+0x11c>
 80050e4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80050e8:	d83c      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 80050ea:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80050ee:	d01a      	beq.n	8005126 <ADC_ConfigureBoostMode+0x10a>
 80050f0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80050f4:	d836      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 80050f6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80050fa:	d014      	beq.n	8005126 <ADC_ConfigureBoostMode+0x10a>
 80050fc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005100:	d830      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005106:	d00e      	beq.n	8005126 <ADC_ConfigureBoostMode+0x10a>
 8005108:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510c:	d82a      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 800510e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005112:	d008      	beq.n	8005126 <ADC_ConfigureBoostMode+0x10a>
 8005114:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005118:	d824      	bhi.n	8005164 <ADC_ConfigureBoostMode+0x148>
 800511a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800511e:	d002      	beq.n	8005126 <ADC_ConfigureBoostMode+0x10a>
 8005120:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005124:	d11e      	bne.n	8005164 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	0c9b      	lsrs	r3, r3, #18
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	fbb2 f3f3 	udiv	r3, r2, r3
 8005134:	60fb      	str	r3, [r7, #12]
        break;
 8005136:	e016      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	091b      	lsrs	r3, r3, #4
 800513c:	60fb      	str	r3, [r7, #12]
        break;
 800513e:	e012      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	095b      	lsrs	r3, r3, #5
 8005144:	60fb      	str	r3, [r7, #12]
        break;
 8005146:	e00e      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	099b      	lsrs	r3, r3, #6
 800514c:	60fb      	str	r3, [r7, #12]
        break;
 800514e:	e00a      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	09db      	lsrs	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
        break;
 8005156:	e006      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	60fb      	str	r3, [r7, #12]
        break;
 800515e:	e002      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005160:	bf00      	nop
 8005162:	e000      	b.n	8005166 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005164:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	085b      	lsrs	r3, r3, #1
 800516a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4a1f      	ldr	r2, [pc, #124]	@ (80051ec <ADC_ConfigureBoostMode+0x1d0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d808      	bhi.n	8005186 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005182:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005184:	e025      	b.n	80051d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4a19      	ldr	r2, [pc, #100]	@ (80051f0 <ADC_ConfigureBoostMode+0x1d4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d80a      	bhi.n	80051a4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051a0:	609a      	str	r2, [r3, #8]
}
 80051a2:	e016      	b.n	80051d2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a13      	ldr	r2, [pc, #76]	@ (80051f4 <ADC_ConfigureBoostMode+0x1d8>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d80a      	bhi.n	80051c2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051be:	609a      	str	r2, [r3, #8]
}
 80051c0:	e007      	b.n	80051d2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80051d0:	609a      	str	r2, [r3, #8]
}
 80051d2:	bf00      	nop
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40022000 	.word	0x40022000
 80051e0:	40022100 	.word	0x40022100
 80051e4:	40022300 	.word	0x40022300
 80051e8:	58026300 	.word	0x58026300
 80051ec:	005f5e10 	.word	0x005f5e10
 80051f0:	00bebc20 	.word	0x00bebc20
 80051f4:	017d7840 	.word	0x017d7840

080051f8 <LL_ADC_IsEnabled>:
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	d101      	bne.n	8005210 <LL_ADC_IsEnabled+0x18>
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <LL_ADC_IsEnabled+0x1a>
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <LL_ADC_REG_IsConversionOngoing>:
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d101      	bne.n	8005236 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052a8:	b590      	push	{r4, r7, lr}
 80052aa:	b0a3      	sub	sp, #140	@ 0x8c
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052b2:	2300      	movs	r3, #0
 80052b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d101      	bne.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052c2:	2302      	movs	r3, #2
 80052c4:	e0c1      	b.n	800544a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5e      	ldr	r2, [pc, #376]	@ (8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d102      	bne.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052e0:	4b5d      	ldr	r3, [pc, #372]	@ (8005458 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	e001      	b.n	80052ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052e6:	2300      	movs	r3, #0
 80052e8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e0a0      	b.n	800544a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff ff87 	bl	800521e <LL_ADC_REG_IsConversionOngoing>
 8005310:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff80 	bl	800521e <LL_ADC_REG_IsConversionOngoing>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 8081 	bne.w	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005326:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800532a:	2b00      	cmp	r3, #0
 800532c:	d17c      	bne.n	8005428 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a48      	ldr	r2, [pc, #288]	@ (8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a46      	ldr	r2, [pc, #280]	@ (8005458 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005342:	4b46      	ldr	r3, [pc, #280]	@ (800545c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005344:	e000      	b.n	8005348 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005346:	4b46      	ldr	r3, [pc, #280]	@ (8005460 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005348:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d039      	beq.n	80053c6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005352:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	431a      	orrs	r2, r3
 8005360:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005362:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3a      	ldr	r2, [pc, #232]	@ (8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a39      	ldr	r2, [pc, #228]	@ (8005458 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d10e      	bne.n	8005396 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005378:	4836      	ldr	r0, [pc, #216]	@ (8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800537a:	f7ff ff3d 	bl	80051f8 <LL_ADC_IsEnabled>
 800537e:	4604      	mov	r4, r0
 8005380:	4835      	ldr	r0, [pc, #212]	@ (8005458 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005382:	f7ff ff39 	bl	80051f8 <LL_ADC_IsEnabled>
 8005386:	4603      	mov	r3, r0
 8005388:	4323      	orrs	r3, r4
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf0c      	ite	eq
 800538e:	2301      	moveq	r3, #1
 8005390:	2300      	movne	r3, #0
 8005392:	b2db      	uxtb	r3, r3
 8005394:	e008      	b.n	80053a8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005396:	4833      	ldr	r0, [pc, #204]	@ (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005398:	f7ff ff2e 	bl	80051f8 <LL_ADC_IsEnabled>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf0c      	ite	eq
 80053a2:	2301      	moveq	r3, #1
 80053a4:	2300      	movne	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d047      	beq.n	800543c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	6811      	ldr	r1, [r2, #0]
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	6892      	ldr	r2, [r2, #8]
 80053bc:	430a      	orrs	r2, r1
 80053be:	431a      	orrs	r2, r3
 80053c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053c2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053c4:	e03a      	b.n	800543c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80053c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80053ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d10e      	bne.n	8005404 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80053e6:	481b      	ldr	r0, [pc, #108]	@ (8005454 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053e8:	f7ff ff06 	bl	80051f8 <LL_ADC_IsEnabled>
 80053ec:	4604      	mov	r4, r0
 80053ee:	481a      	ldr	r0, [pc, #104]	@ (8005458 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053f0:	f7ff ff02 	bl	80051f8 <LL_ADC_IsEnabled>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4323      	orrs	r3, r4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	e008      	b.n	8005416 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005404:	4817      	ldr	r0, [pc, #92]	@ (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005406:	f7ff fef7 	bl	80051f8 <LL_ADC_IsEnabled>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	bf0c      	ite	eq
 8005410:	2301      	moveq	r3, #1
 8005412:	2300      	movne	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d010      	beq.n	800543c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800541a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005420:	4013      	ands	r3, r2
 8005422:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005424:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005426:	e009      	b.n	800543c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542c:	f043 0220 	orr.w	r2, r3, #32
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800543a:	e000      	b.n	800543e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800543c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005446:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800544a:	4618      	mov	r0, r3
 800544c:	378c      	adds	r7, #140	@ 0x8c
 800544e:	46bd      	mov	sp, r7
 8005450:	bd90      	pop	{r4, r7, pc}
 8005452:	bf00      	nop
 8005454:	40022000 	.word	0x40022000
 8005458:	40022100 	.word	0x40022100
 800545c:	40022300 	.word	0x40022300
 8005460:	58026300 	.word	0x58026300
 8005464:	58026000 	.word	0x58026000
 8005468:	fffff0e0 	.word	0xfffff0e0

0800546c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800547c:	4b0b      	ldr	r3, [pc, #44]	@ (80054ac <__NVIC_SetPriorityGrouping+0x40>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005488:	4013      	ands	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005494:	4b06      	ldr	r3, [pc, #24]	@ (80054b0 <__NVIC_SetPriorityGrouping+0x44>)
 8005496:	4313      	orrs	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549a:	4a04      	ldr	r2, [pc, #16]	@ (80054ac <__NVIC_SetPriorityGrouping+0x40>)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	60d3      	str	r3, [r2, #12]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000ed00 	.word	0xe000ed00
 80054b0:	05fa0000 	.word	0x05fa0000

080054b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054b8:	4b04      	ldr	r3, [pc, #16]	@ (80054cc <__NVIC_GetPriorityGrouping+0x18>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	f003 0307 	and.w	r3, r3, #7
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db0b      	blt.n	80054fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	f003 021f 	and.w	r2, r3, #31
 80054e8:	4907      	ldr	r1, [pc, #28]	@ (8005508 <__NVIC_EnableIRQ+0x38>)
 80054ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2001      	movs	r0, #1
 80054f2:	fa00 f202 	lsl.w	r2, r0, r2
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000e100 	.word	0xe000e100

0800550c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	6039      	str	r1, [r7, #0]
 8005516:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800551c:	2b00      	cmp	r3, #0
 800551e:	db0a      	blt.n	8005536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	490c      	ldr	r1, [pc, #48]	@ (8005558 <__NVIC_SetPriority+0x4c>)
 8005526:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552a:	0112      	lsls	r2, r2, #4
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	440b      	add	r3, r1
 8005530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005534:	e00a      	b.n	800554c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4908      	ldr	r1, [pc, #32]	@ (800555c <__NVIC_SetPriority+0x50>)
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	3b04      	subs	r3, #4
 8005544:	0112      	lsls	r2, r2, #4
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	440b      	add	r3, r1
 800554a:	761a      	strb	r2, [r3, #24]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000e100 	.word	0xe000e100
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005560:	b480      	push	{r7}
 8005562:	b089      	sub	sp, #36	@ 0x24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f1c3 0307 	rsb	r3, r3, #7
 800557a:	2b04      	cmp	r3, #4
 800557c:	bf28      	it	cs
 800557e:	2304      	movcs	r3, #4
 8005580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3304      	adds	r3, #4
 8005586:	2b06      	cmp	r3, #6
 8005588:	d902      	bls.n	8005590 <NVIC_EncodePriority+0x30>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3b03      	subs	r3, #3
 800558e:	e000      	b.n	8005592 <NVIC_EncodePriority+0x32>
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	401a      	ands	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055a8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	43d9      	mvns	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b8:	4313      	orrs	r3, r2
         );
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3724      	adds	r7, #36	@ 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
	...

080055c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055d8:	d301      	bcc.n	80055de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055da:	2301      	movs	r3, #1
 80055dc:	e00f      	b.n	80055fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055de:	4a0a      	ldr	r2, [pc, #40]	@ (8005608 <SysTick_Config+0x40>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055e6:	210f      	movs	r1, #15
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	f7ff ff8e 	bl	800550c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f0:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <SysTick_Config+0x40>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055f6:	4b04      	ldr	r3, [pc, #16]	@ (8005608 <SysTick_Config+0x40>)
 80055f8:	2207      	movs	r2, #7
 80055fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	e000e010 	.word	0xe000e010

0800560c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff29 	bl	800546c <__NVIC_SetPriorityGrouping>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005630:	f7ff ff40 	bl	80054b4 <__NVIC_GetPriorityGrouping>
 8005634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f7ff ff90 	bl	8005560 <NVIC_EncodePriority>
 8005640:	4602      	mov	r2, r0
 8005642:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ff5f 	bl	800550c <__NVIC_SetPriority>
}
 800564e:	bf00      	nop
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	4603      	mov	r3, r0
 800565e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ff33 	bl	80054d0 <__NVIC_EnableIRQ>
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7ff ffa4 	bl	80055c8 <SysTick_Config>
 8005680:	4603      	mov	r3, r0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005694:	f7fd fab0 	bl	8002bf8 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e312      	b.n	8005cca <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a66      	ldr	r2, [pc, #408]	@ (8005844 <HAL_DMA_Init+0x1b8>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d04a      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a65      	ldr	r2, [pc, #404]	@ (8005848 <HAL_DMA_Init+0x1bc>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d045      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a63      	ldr	r2, [pc, #396]	@ (800584c <HAL_DMA_Init+0x1c0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d040      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a62      	ldr	r2, [pc, #392]	@ (8005850 <HAL_DMA_Init+0x1c4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d03b      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a60      	ldr	r2, [pc, #384]	@ (8005854 <HAL_DMA_Init+0x1c8>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d036      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a5f      	ldr	r2, [pc, #380]	@ (8005858 <HAL_DMA_Init+0x1cc>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d031      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5d      	ldr	r2, [pc, #372]	@ (800585c <HAL_DMA_Init+0x1d0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d02c      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a5c      	ldr	r2, [pc, #368]	@ (8005860 <HAL_DMA_Init+0x1d4>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d027      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a5a      	ldr	r2, [pc, #360]	@ (8005864 <HAL_DMA_Init+0x1d8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d022      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a59      	ldr	r2, [pc, #356]	@ (8005868 <HAL_DMA_Init+0x1dc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d01d      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a57      	ldr	r2, [pc, #348]	@ (800586c <HAL_DMA_Init+0x1e0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d018      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a56      	ldr	r2, [pc, #344]	@ (8005870 <HAL_DMA_Init+0x1e4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a54      	ldr	r2, [pc, #336]	@ (8005874 <HAL_DMA_Init+0x1e8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00e      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a53      	ldr	r2, [pc, #332]	@ (8005878 <HAL_DMA_Init+0x1ec>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d009      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a51      	ldr	r2, [pc, #324]	@ (800587c <HAL_DMA_Init+0x1f0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <HAL_DMA_Init+0xb8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a50      	ldr	r2, [pc, #320]	@ (8005880 <HAL_DMA_Init+0x1f4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d101      	bne.n	8005748 <HAL_DMA_Init+0xbc>
 8005744:	2301      	movs	r3, #1
 8005746:	e000      	b.n	800574a <HAL_DMA_Init+0xbe>
 8005748:	2300      	movs	r3, #0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 813c 	beq.w	80059c8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a37      	ldr	r2, [pc, #220]	@ (8005844 <HAL_DMA_Init+0x1b8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d04a      	beq.n	8005800 <HAL_DMA_Init+0x174>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a36      	ldr	r2, [pc, #216]	@ (8005848 <HAL_DMA_Init+0x1bc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d045      	beq.n	8005800 <HAL_DMA_Init+0x174>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a34      	ldr	r2, [pc, #208]	@ (800584c <HAL_DMA_Init+0x1c0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d040      	beq.n	8005800 <HAL_DMA_Init+0x174>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a33      	ldr	r2, [pc, #204]	@ (8005850 <HAL_DMA_Init+0x1c4>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d03b      	beq.n	8005800 <HAL_DMA_Init+0x174>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a31      	ldr	r2, [pc, #196]	@ (8005854 <HAL_DMA_Init+0x1c8>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d036      	beq.n	8005800 <HAL_DMA_Init+0x174>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a30      	ldr	r2, [pc, #192]	@ (8005858 <HAL_DMA_Init+0x1cc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d031      	beq.n	8005800 <HAL_DMA_Init+0x174>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a2e      	ldr	r2, [pc, #184]	@ (800585c <HAL_DMA_Init+0x1d0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d02c      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005860 <HAL_DMA_Init+0x1d4>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d027      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005864 <HAL_DMA_Init+0x1d8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d022      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2a      	ldr	r2, [pc, #168]	@ (8005868 <HAL_DMA_Init+0x1dc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01d      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a28      	ldr	r2, [pc, #160]	@ (800586c <HAL_DMA_Init+0x1e0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d018      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a27      	ldr	r2, [pc, #156]	@ (8005870 <HAL_DMA_Init+0x1e4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a25      	ldr	r2, [pc, #148]	@ (8005874 <HAL_DMA_Init+0x1e8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00e      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a24      	ldr	r2, [pc, #144]	@ (8005878 <HAL_DMA_Init+0x1ec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a22      	ldr	r2, [pc, #136]	@ (800587c <HAL_DMA_Init+0x1f0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <HAL_DMA_Init+0x174>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a21      	ldr	r2, [pc, #132]	@ (8005880 <HAL_DMA_Init+0x1f4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <HAL_DMA_Init+0x186>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0201 	bic.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e007      	b.n	8005822 <HAL_DMA_Init+0x196>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 0201 	bic.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005822:	e02f      	b.n	8005884 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005824:	f7fd f9e8 	bl	8002bf8 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b05      	cmp	r3, #5
 8005830:	d928      	bls.n	8005884 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2203      	movs	r2, #3
 800583c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e242      	b.n	8005cca <HAL_DMA_Init+0x63e>
 8005844:	40020010 	.word	0x40020010
 8005848:	40020028 	.word	0x40020028
 800584c:	40020040 	.word	0x40020040
 8005850:	40020058 	.word	0x40020058
 8005854:	40020070 	.word	0x40020070
 8005858:	40020088 	.word	0x40020088
 800585c:	400200a0 	.word	0x400200a0
 8005860:	400200b8 	.word	0x400200b8
 8005864:	40020410 	.word	0x40020410
 8005868:	40020428 	.word	0x40020428
 800586c:	40020440 	.word	0x40020440
 8005870:	40020458 	.word	0x40020458
 8005874:	40020470 	.word	0x40020470
 8005878:	40020488 	.word	0x40020488
 800587c:	400204a0 	.word	0x400204a0
 8005880:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1c8      	bne.n	8005824 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4b83      	ldr	r3, [pc, #524]	@ (8005aac <HAL_DMA_Init+0x420>)
 800589e:	4013      	ands	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80058aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d107      	bne.n	80058e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e0:	4313      	orrs	r3, r2
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2b28      	cmp	r3, #40	@ 0x28
 80058ee:	d903      	bls.n	80058f8 <HAL_DMA_Init+0x26c>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80058f6:	d91f      	bls.n	8005938 <HAL_DMA_Init+0x2ac>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80058fe:	d903      	bls.n	8005908 <HAL_DMA_Init+0x27c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b42      	cmp	r3, #66	@ 0x42
 8005906:	d917      	bls.n	8005938 <HAL_DMA_Init+0x2ac>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b46      	cmp	r3, #70	@ 0x46
 800590e:	d903      	bls.n	8005918 <HAL_DMA_Init+0x28c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b48      	cmp	r3, #72	@ 0x48
 8005916:	d90f      	bls.n	8005938 <HAL_DMA_Init+0x2ac>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b4e      	cmp	r3, #78	@ 0x4e
 800591e:	d903      	bls.n	8005928 <HAL_DMA_Init+0x29c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b52      	cmp	r3, #82	@ 0x52
 8005926:	d907      	bls.n	8005938 <HAL_DMA_Init+0x2ac>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b73      	cmp	r3, #115	@ 0x73
 800592e:	d905      	bls.n	800593c <HAL_DMA_Init+0x2b0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b77      	cmp	r3, #119	@ 0x77
 8005936:	d801      	bhi.n	800593c <HAL_DMA_Init+0x2b0>
 8005938:	2301      	movs	r3, #1
 800593a:	e000      	b.n	800593e <HAL_DMA_Init+0x2b2>
 800593c:	2300      	movs	r3, #0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005948:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f023 0307 	bic.w	r3, r3, #7
 8005960:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	2b04      	cmp	r3, #4
 8005972:	d117      	bne.n	80059a4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005978:	697a      	ldr	r2, [r7, #20]
 800597a:	4313      	orrs	r3, r2
 800597c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00e      	beq.n	80059a4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fdca 	bl	8007520 <DMA_CheckFifoParam>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2240      	movs	r2, #64	@ 0x40
 8005996:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e192      	b.n	8005cca <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fd05 	bl	80073bc <DMA_CalcBaseAndBitshift>
 80059b2:	4603      	mov	r3, r0
 80059b4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	223f      	movs	r2, #63	@ 0x3f
 80059c0:	409a      	lsls	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	609a      	str	r2, [r3, #8]
 80059c6:	e0c8      	b.n	8005b5a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a38      	ldr	r2, [pc, #224]	@ (8005ab0 <HAL_DMA_Init+0x424>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d022      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a37      	ldr	r2, [pc, #220]	@ (8005ab4 <HAL_DMA_Init+0x428>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d01d      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a35      	ldr	r2, [pc, #212]	@ (8005ab8 <HAL_DMA_Init+0x42c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d018      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a34      	ldr	r2, [pc, #208]	@ (8005abc <HAL_DMA_Init+0x430>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d013      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a32      	ldr	r2, [pc, #200]	@ (8005ac0 <HAL_DMA_Init+0x434>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d00e      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a31      	ldr	r2, [pc, #196]	@ (8005ac4 <HAL_DMA_Init+0x438>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d009      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac8 <HAL_DMA_Init+0x43c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_DMA_Init+0x38c>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a2e      	ldr	r2, [pc, #184]	@ (8005acc <HAL_DMA_Init+0x440>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d101      	bne.n	8005a1c <HAL_DMA_Init+0x390>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <HAL_DMA_Init+0x392>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8092 	beq.w	8005b48 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a21      	ldr	r2, [pc, #132]	@ (8005ab0 <HAL_DMA_Init+0x424>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d021      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <HAL_DMA_Init+0x428>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01c      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ab8 <HAL_DMA_Init+0x42c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d017      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1d      	ldr	r2, [pc, #116]	@ (8005abc <HAL_DMA_Init+0x430>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d012      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac0 <HAL_DMA_Init+0x434>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00d      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ac4 <HAL_DMA_Init+0x438>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d008      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a18      	ldr	r2, [pc, #96]	@ (8005ac8 <HAL_DMA_Init+0x43c>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d003      	beq.n	8005a72 <HAL_DMA_Init+0x3e6>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a17      	ldr	r2, [pc, #92]	@ (8005acc <HAL_DMA_Init+0x440>)
 8005a70:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	4b10      	ldr	r3, [pc, #64]	@ (8005ad0 <HAL_DMA_Init+0x444>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b40      	cmp	r3, #64	@ 0x40
 8005a98:	d01c      	beq.n	8005ad4 <HAL_DMA_Init+0x448>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b80      	cmp	r3, #128	@ 0x80
 8005aa0:	d102      	bne.n	8005aa8 <HAL_DMA_Init+0x41c>
 8005aa2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005aa6:	e016      	b.n	8005ad6 <HAL_DMA_Init+0x44a>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	e014      	b.n	8005ad6 <HAL_DMA_Init+0x44a>
 8005aac:	fe10803f 	.word	0xfe10803f
 8005ab0:	58025408 	.word	0x58025408
 8005ab4:	5802541c 	.word	0x5802541c
 8005ab8:	58025430 	.word	0x58025430
 8005abc:	58025444 	.word	0x58025444
 8005ac0:	58025458 	.word	0x58025458
 8005ac4:	5802546c 	.word	0x5802546c
 8005ac8:	58025480 	.word	0x58025480
 8005acc:	58025494 	.word	0x58025494
 8005ad0:	fffe000f 	.word	0xfffe000f
 8005ad4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68d2      	ldr	r2, [r2, #12]
 8005ada:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005adc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ae4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b04:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	697a      	ldr	r2, [r7, #20]
 8005b12:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8005cd4 <HAL_DMA_Init+0x648>)
 8005b1c:	4413      	add	r3, r2
 8005b1e:	4a6e      	ldr	r2, [pc, #440]	@ (8005cd8 <HAL_DMA_Init+0x64c>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	091b      	lsrs	r3, r3, #4
 8005b26:	009a      	lsls	r2, r3, #2
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fc45 	bl	80073bc <DMA_CalcBaseAndBitshift>
 8005b32:	4603      	mov	r3, r0
 8005b34:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3a:	f003 031f 	and.w	r3, r3, #31
 8005b3e:	2201      	movs	r2, #1
 8005b40:	409a      	lsls	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]
 8005b46:	e008      	b.n	8005b5a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2240      	movs	r2, #64	@ 0x40
 8005b4c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2203      	movs	r2, #3
 8005b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e0b7      	b.n	8005cca <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a5f      	ldr	r2, [pc, #380]	@ (8005cdc <HAL_DMA_Init+0x650>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d072      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a5d      	ldr	r2, [pc, #372]	@ (8005ce0 <HAL_DMA_Init+0x654>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d06d      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a5c      	ldr	r2, [pc, #368]	@ (8005ce4 <HAL_DMA_Init+0x658>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d068      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a5a      	ldr	r2, [pc, #360]	@ (8005ce8 <HAL_DMA_Init+0x65c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d063      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a59      	ldr	r2, [pc, #356]	@ (8005cec <HAL_DMA_Init+0x660>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d05e      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a57      	ldr	r2, [pc, #348]	@ (8005cf0 <HAL_DMA_Init+0x664>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d059      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a56      	ldr	r2, [pc, #344]	@ (8005cf4 <HAL_DMA_Init+0x668>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d054      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a54      	ldr	r2, [pc, #336]	@ (8005cf8 <HAL_DMA_Init+0x66c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d04f      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a53      	ldr	r2, [pc, #332]	@ (8005cfc <HAL_DMA_Init+0x670>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d04a      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a51      	ldr	r2, [pc, #324]	@ (8005d00 <HAL_DMA_Init+0x674>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d045      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a50      	ldr	r2, [pc, #320]	@ (8005d04 <HAL_DMA_Init+0x678>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d040      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a4e      	ldr	r2, [pc, #312]	@ (8005d08 <HAL_DMA_Init+0x67c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d03b      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8005d0c <HAL_DMA_Init+0x680>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d036      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a4b      	ldr	r2, [pc, #300]	@ (8005d10 <HAL_DMA_Init+0x684>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d031      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a4a      	ldr	r2, [pc, #296]	@ (8005d14 <HAL_DMA_Init+0x688>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d02c      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a48      	ldr	r2, [pc, #288]	@ (8005d18 <HAL_DMA_Init+0x68c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d027      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a47      	ldr	r2, [pc, #284]	@ (8005d1c <HAL_DMA_Init+0x690>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d022      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a45      	ldr	r2, [pc, #276]	@ (8005d20 <HAL_DMA_Init+0x694>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d01d      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a44      	ldr	r2, [pc, #272]	@ (8005d24 <HAL_DMA_Init+0x698>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d018      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a42      	ldr	r2, [pc, #264]	@ (8005d28 <HAL_DMA_Init+0x69c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a41      	ldr	r2, [pc, #260]	@ (8005d2c <HAL_DMA_Init+0x6a0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a3f      	ldr	r2, [pc, #252]	@ (8005d30 <HAL_DMA_Init+0x6a4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d34 <HAL_DMA_Init+0x6a8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_DMA_Init+0x5be>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a3c      	ldr	r2, [pc, #240]	@ (8005d38 <HAL_DMA_Init+0x6ac>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d101      	bne.n	8005c4e <HAL_DMA_Init+0x5c2>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <HAL_DMA_Init+0x5c4>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d032      	beq.n	8005cba <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f001 fcdf 	bl	8007618 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b80      	cmp	r3, #128	@ 0x80
 8005c60:	d102      	bne.n	8005c68 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005c7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_DMA_Init+0x61c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d80c      	bhi.n	8005ca8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fd5c 	bl	800774c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	e008      	b.n	8005cba <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	a7fdabf8 	.word	0xa7fdabf8
 8005cd8:	cccccccd 	.word	0xcccccccd
 8005cdc:	40020010 	.word	0x40020010
 8005ce0:	40020028 	.word	0x40020028
 8005ce4:	40020040 	.word	0x40020040
 8005ce8:	40020058 	.word	0x40020058
 8005cec:	40020070 	.word	0x40020070
 8005cf0:	40020088 	.word	0x40020088
 8005cf4:	400200a0 	.word	0x400200a0
 8005cf8:	400200b8 	.word	0x400200b8
 8005cfc:	40020410 	.word	0x40020410
 8005d00:	40020428 	.word	0x40020428
 8005d04:	40020440 	.word	0x40020440
 8005d08:	40020458 	.word	0x40020458
 8005d0c:	40020470 	.word	0x40020470
 8005d10:	40020488 	.word	0x40020488
 8005d14:	400204a0 	.word	0x400204a0
 8005d18:	400204b8 	.word	0x400204b8
 8005d1c:	58025408 	.word	0x58025408
 8005d20:	5802541c 	.word	0x5802541c
 8005d24:	58025430 	.word	0x58025430
 8005d28:	58025444 	.word	0x58025444
 8005d2c:	58025458 	.word	0x58025458
 8005d30:	5802546c 	.word	0x5802546c
 8005d34:	58025480 	.word	0x58025480
 8005d38:	58025494 	.word	0x58025494

08005d3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e226      	b.n	80061a6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_DMA_Start_IT+0x2a>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e21f      	b.n	80061a6 <HAL_DMA_Start_IT+0x46a>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	f040 820a 	bne.w	8006190 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a68      	ldr	r2, [pc, #416]	@ (8005f30 <HAL_DMA_Start_IT+0x1f4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d04a      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a66      	ldr	r2, [pc, #408]	@ (8005f34 <HAL_DMA_Start_IT+0x1f8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d045      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a65      	ldr	r2, [pc, #404]	@ (8005f38 <HAL_DMA_Start_IT+0x1fc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d040      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a63      	ldr	r2, [pc, #396]	@ (8005f3c <HAL_DMA_Start_IT+0x200>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d03b      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a62      	ldr	r2, [pc, #392]	@ (8005f40 <HAL_DMA_Start_IT+0x204>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a60      	ldr	r2, [pc, #384]	@ (8005f44 <HAL_DMA_Start_IT+0x208>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d031      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a5f      	ldr	r2, [pc, #380]	@ (8005f48 <HAL_DMA_Start_IT+0x20c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d02c      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8005f4c <HAL_DMA_Start_IT+0x210>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d027      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a5c      	ldr	r2, [pc, #368]	@ (8005f50 <HAL_DMA_Start_IT+0x214>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a5a      	ldr	r2, [pc, #360]	@ (8005f54 <HAL_DMA_Start_IT+0x218>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01d      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a59      	ldr	r2, [pc, #356]	@ (8005f58 <HAL_DMA_Start_IT+0x21c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a57      	ldr	r2, [pc, #348]	@ (8005f5c <HAL_DMA_Start_IT+0x220>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a56      	ldr	r2, [pc, #344]	@ (8005f60 <HAL_DMA_Start_IT+0x224>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a54      	ldr	r2, [pc, #336]	@ (8005f64 <HAL_DMA_Start_IT+0x228>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a53      	ldr	r2, [pc, #332]	@ (8005f68 <HAL_DMA_Start_IT+0x22c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_DMA_Start_IT+0xee>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a51      	ldr	r2, [pc, #324]	@ (8005f6c <HAL_DMA_Start_IT+0x230>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <HAL_DMA_Start_IT+0x100>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e007      	b.n	8005e4c <HAL_DMA_Start_IT+0x110>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 f906 	bl	8007064 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a34      	ldr	r2, [pc, #208]	@ (8005f30 <HAL_DMA_Start_IT+0x1f4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d04a      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a33      	ldr	r2, [pc, #204]	@ (8005f34 <HAL_DMA_Start_IT+0x1f8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d045      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a31      	ldr	r2, [pc, #196]	@ (8005f38 <HAL_DMA_Start_IT+0x1fc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d040      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a30      	ldr	r2, [pc, #192]	@ (8005f3c <HAL_DMA_Start_IT+0x200>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d03b      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <HAL_DMA_Start_IT+0x204>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d036      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f44 <HAL_DMA_Start_IT+0x208>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d031      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2b      	ldr	r2, [pc, #172]	@ (8005f48 <HAL_DMA_Start_IT+0x20c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d02c      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f4c <HAL_DMA_Start_IT+0x210>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d027      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a28      	ldr	r2, [pc, #160]	@ (8005f50 <HAL_DMA_Start_IT+0x214>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d022      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a27      	ldr	r2, [pc, #156]	@ (8005f54 <HAL_DMA_Start_IT+0x218>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d01d      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	@ (8005f58 <HAL_DMA_Start_IT+0x21c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d018      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a24      	ldr	r2, [pc, #144]	@ (8005f5c <HAL_DMA_Start_IT+0x220>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d013      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	@ (8005f60 <HAL_DMA_Start_IT+0x224>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00e      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	@ (8005f64 <HAL_DMA_Start_IT+0x228>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d009      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8005f68 <HAL_DMA_Start_IT+0x22c>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d004      	beq.n	8005ef8 <HAL_DMA_Start_IT+0x1bc>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f6c <HAL_DMA_Start_IT+0x230>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <HAL_DMA_Start_IT+0x1c0>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <HAL_DMA_Start_IT+0x1c2>
 8005efc:	2300      	movs	r3, #0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d036      	beq.n	8005f70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 021e 	bic.w	r2, r3, #30
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0216 	orr.w	r2, r2, #22
 8005f14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d03e      	beq.n	8005f9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0208 	orr.w	r2, r2, #8
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	e035      	b.n	8005f9c <HAL_DMA_Start_IT+0x260>
 8005f30:	40020010 	.word	0x40020010
 8005f34:	40020028 	.word	0x40020028
 8005f38:	40020040 	.word	0x40020040
 8005f3c:	40020058 	.word	0x40020058
 8005f40:	40020070 	.word	0x40020070
 8005f44:	40020088 	.word	0x40020088
 8005f48:	400200a0 	.word	0x400200a0
 8005f4c:	400200b8 	.word	0x400200b8
 8005f50:	40020410 	.word	0x40020410
 8005f54:	40020428 	.word	0x40020428
 8005f58:	40020440 	.word	0x40020440
 8005f5c:	40020458 	.word	0x40020458
 8005f60:	40020470 	.word	0x40020470
 8005f64:	40020488 	.word	0x40020488
 8005f68:	400204a0 	.word	0x400204a0
 8005f6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f023 020e 	bic.w	r2, r3, #14
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f042 020a 	orr.w	r2, r2, #10
 8005f82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0204 	orr.w	r2, r2, #4
 8005f9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a83      	ldr	r2, [pc, #524]	@ (80061b0 <HAL_DMA_Start_IT+0x474>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d072      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a82      	ldr	r2, [pc, #520]	@ (80061b4 <HAL_DMA_Start_IT+0x478>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d06d      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a80      	ldr	r2, [pc, #512]	@ (80061b8 <HAL_DMA_Start_IT+0x47c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d068      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a7f      	ldr	r2, [pc, #508]	@ (80061bc <HAL_DMA_Start_IT+0x480>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d063      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a7d      	ldr	r2, [pc, #500]	@ (80061c0 <HAL_DMA_Start_IT+0x484>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d05e      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a7c      	ldr	r2, [pc, #496]	@ (80061c4 <HAL_DMA_Start_IT+0x488>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d059      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a7a      	ldr	r2, [pc, #488]	@ (80061c8 <HAL_DMA_Start_IT+0x48c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d054      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a79      	ldr	r2, [pc, #484]	@ (80061cc <HAL_DMA_Start_IT+0x490>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d04f      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a77      	ldr	r2, [pc, #476]	@ (80061d0 <HAL_DMA_Start_IT+0x494>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d04a      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a76      	ldr	r2, [pc, #472]	@ (80061d4 <HAL_DMA_Start_IT+0x498>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d045      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a74      	ldr	r2, [pc, #464]	@ (80061d8 <HAL_DMA_Start_IT+0x49c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d040      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a73      	ldr	r2, [pc, #460]	@ (80061dc <HAL_DMA_Start_IT+0x4a0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d03b      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a71      	ldr	r2, [pc, #452]	@ (80061e0 <HAL_DMA_Start_IT+0x4a4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d036      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a70      	ldr	r2, [pc, #448]	@ (80061e4 <HAL_DMA_Start_IT+0x4a8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d031      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a6e      	ldr	r2, [pc, #440]	@ (80061e8 <HAL_DMA_Start_IT+0x4ac>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d02c      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a6d      	ldr	r2, [pc, #436]	@ (80061ec <HAL_DMA_Start_IT+0x4b0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d027      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a6b      	ldr	r2, [pc, #428]	@ (80061f0 <HAL_DMA_Start_IT+0x4b4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a6a      	ldr	r2, [pc, #424]	@ (80061f4 <HAL_DMA_Start_IT+0x4b8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01d      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a68      	ldr	r2, [pc, #416]	@ (80061f8 <HAL_DMA_Start_IT+0x4bc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a67      	ldr	r2, [pc, #412]	@ (80061fc <HAL_DMA_Start_IT+0x4c0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a65      	ldr	r2, [pc, #404]	@ (8006200 <HAL_DMA_Start_IT+0x4c4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a64      	ldr	r2, [pc, #400]	@ (8006204 <HAL_DMA_Start_IT+0x4c8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a62      	ldr	r2, [pc, #392]	@ (8006208 <HAL_DMA_Start_IT+0x4cc>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_DMA_Start_IT+0x350>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a61      	ldr	r2, [pc, #388]	@ (800620c <HAL_DMA_Start_IT+0x4d0>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d101      	bne.n	8006090 <HAL_DMA_Start_IT+0x354>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <HAL_DMA_Start_IT+0x356>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01a      	beq.n	80060cc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d007      	beq.n	80060cc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060ca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a37      	ldr	r2, [pc, #220]	@ (80061b0 <HAL_DMA_Start_IT+0x474>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d04a      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a36      	ldr	r2, [pc, #216]	@ (80061b4 <HAL_DMA_Start_IT+0x478>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d045      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a34      	ldr	r2, [pc, #208]	@ (80061b8 <HAL_DMA_Start_IT+0x47c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d040      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a33      	ldr	r2, [pc, #204]	@ (80061bc <HAL_DMA_Start_IT+0x480>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d03b      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a31      	ldr	r2, [pc, #196]	@ (80061c0 <HAL_DMA_Start_IT+0x484>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d036      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a30      	ldr	r2, [pc, #192]	@ (80061c4 <HAL_DMA_Start_IT+0x488>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d031      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2e      	ldr	r2, [pc, #184]	@ (80061c8 <HAL_DMA_Start_IT+0x48c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02c      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2d      	ldr	r2, [pc, #180]	@ (80061cc <HAL_DMA_Start_IT+0x490>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d027      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <HAL_DMA_Start_IT+0x494>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d022      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2a      	ldr	r2, [pc, #168]	@ (80061d4 <HAL_DMA_Start_IT+0x498>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d01d      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a28      	ldr	r2, [pc, #160]	@ (80061d8 <HAL_DMA_Start_IT+0x49c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d018      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a27      	ldr	r2, [pc, #156]	@ (80061dc <HAL_DMA_Start_IT+0x4a0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d013      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a25      	ldr	r2, [pc, #148]	@ (80061e0 <HAL_DMA_Start_IT+0x4a4>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00e      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a24      	ldr	r2, [pc, #144]	@ (80061e4 <HAL_DMA_Start_IT+0x4a8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	@ (80061e8 <HAL_DMA_Start_IT+0x4ac>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_DMA_Start_IT+0x430>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	@ (80061ec <HAL_DMA_Start_IT+0x4b0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d108      	bne.n	800617e <HAL_DMA_Start_IT+0x442>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e012      	b.n	80061a4 <HAL_DMA_Start_IT+0x468>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0201 	orr.w	r2, r2, #1
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e009      	b.n	80061a4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006196:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40020010 	.word	0x40020010
 80061b4:	40020028 	.word	0x40020028
 80061b8:	40020040 	.word	0x40020040
 80061bc:	40020058 	.word	0x40020058
 80061c0:	40020070 	.word	0x40020070
 80061c4:	40020088 	.word	0x40020088
 80061c8:	400200a0 	.word	0x400200a0
 80061cc:	400200b8 	.word	0x400200b8
 80061d0:	40020410 	.word	0x40020410
 80061d4:	40020428 	.word	0x40020428
 80061d8:	40020440 	.word	0x40020440
 80061dc:	40020458 	.word	0x40020458
 80061e0:	40020470 	.word	0x40020470
 80061e4:	40020488 	.word	0x40020488
 80061e8:	400204a0 	.word	0x400204a0
 80061ec:	400204b8 	.word	0x400204b8
 80061f0:	58025408 	.word	0x58025408
 80061f4:	5802541c 	.word	0x5802541c
 80061f8:	58025430 	.word	0x58025430
 80061fc:	58025444 	.word	0x58025444
 8006200:	58025458 	.word	0x58025458
 8006204:	5802546c 	.word	0x5802546c
 8006208:	58025480 	.word	0x58025480
 800620c:	58025494 	.word	0x58025494

08006210 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	@ 0x28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800621c:	4b67      	ldr	r3, [pc, #412]	@ (80063bc <HAL_DMA_IRQHandler+0x1ac>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a67      	ldr	r2, [pc, #412]	@ (80063c0 <HAL_DMA_IRQHandler+0x1b0>)
 8006222:	fba2 2303 	umull	r2, r3, r2, r3
 8006226:	0a9b      	lsrs	r3, r3, #10
 8006228:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006234:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a5f      	ldr	r2, [pc, #380]	@ (80063c4 <HAL_DMA_IRQHandler+0x1b4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a5d      	ldr	r2, [pc, #372]	@ (80063c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a5c      	ldr	r2, [pc, #368]	@ (80063cc <HAL_DMA_IRQHandler+0x1bc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a5a      	ldr	r2, [pc, #360]	@ (80063d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a59      	ldr	r2, [pc, #356]	@ (80063d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a57      	ldr	r2, [pc, #348]	@ (80063d8 <HAL_DMA_IRQHandler+0x1c8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a56      	ldr	r2, [pc, #344]	@ (80063dc <HAL_DMA_IRQHandler+0x1cc>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a54      	ldr	r2, [pc, #336]	@ (80063e0 <HAL_DMA_IRQHandler+0x1d0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a53      	ldr	r2, [pc, #332]	@ (80063e4 <HAL_DMA_IRQHandler+0x1d4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a51      	ldr	r2, [pc, #324]	@ (80063e8 <HAL_DMA_IRQHandler+0x1d8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a50      	ldr	r2, [pc, #320]	@ (80063ec <HAL_DMA_IRQHandler+0x1dc>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a4e      	ldr	r2, [pc, #312]	@ (80063f0 <HAL_DMA_IRQHandler+0x1e0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a4d      	ldr	r2, [pc, #308]	@ (80063f4 <HAL_DMA_IRQHandler+0x1e4>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a4b      	ldr	r2, [pc, #300]	@ (80063f8 <HAL_DMA_IRQHandler+0x1e8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a4a      	ldr	r2, [pc, #296]	@ (80063fc <HAL_DMA_IRQHandler+0x1ec>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <HAL_DMA_IRQHandler+0xd2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a48      	ldr	r2, [pc, #288]	@ (8006400 <HAL_DMA_IRQHandler+0x1f0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <HAL_DMA_IRQHandler+0xd6>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <HAL_DMA_IRQHandler+0xd8>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 842b 	beq.w	8006b44 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f2:	f003 031f 	and.w	r3, r3, #31
 80062f6:	2208      	movs	r2, #8
 80062f8:	409a      	lsls	r2, r3
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	4013      	ands	r3, r2
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f000 80a2 	beq.w	8006448 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2e      	ldr	r2, [pc, #184]	@ (80063c4 <HAL_DMA_IRQHandler+0x1b4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d04a      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2d      	ldr	r2, [pc, #180]	@ (80063c8 <HAL_DMA_IRQHandler+0x1b8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d045      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a2b      	ldr	r2, [pc, #172]	@ (80063cc <HAL_DMA_IRQHandler+0x1bc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d040      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a2a      	ldr	r2, [pc, #168]	@ (80063d0 <HAL_DMA_IRQHandler+0x1c0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d03b      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a28      	ldr	r2, [pc, #160]	@ (80063d4 <HAL_DMA_IRQHandler+0x1c4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d036      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a27      	ldr	r2, [pc, #156]	@ (80063d8 <HAL_DMA_IRQHandler+0x1c8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d031      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a25      	ldr	r2, [pc, #148]	@ (80063dc <HAL_DMA_IRQHandler+0x1cc>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d02c      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a24      	ldr	r2, [pc, #144]	@ (80063e0 <HAL_DMA_IRQHandler+0x1d0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d027      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a22      	ldr	r2, [pc, #136]	@ (80063e4 <HAL_DMA_IRQHandler+0x1d4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d022      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a21      	ldr	r2, [pc, #132]	@ (80063e8 <HAL_DMA_IRQHandler+0x1d8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d01d      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a1f      	ldr	r2, [pc, #124]	@ (80063ec <HAL_DMA_IRQHandler+0x1dc>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d018      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1e      	ldr	r2, [pc, #120]	@ (80063f0 <HAL_DMA_IRQHandler+0x1e0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d013      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1c      	ldr	r2, [pc, #112]	@ (80063f4 <HAL_DMA_IRQHandler+0x1e4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00e      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1b      	ldr	r2, [pc, #108]	@ (80063f8 <HAL_DMA_IRQHandler+0x1e8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d009      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a19      	ldr	r2, [pc, #100]	@ (80063fc <HAL_DMA_IRQHandler+0x1ec>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x194>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a18      	ldr	r2, [pc, #96]	@ (8006400 <HAL_DMA_IRQHandler+0x1f0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d12f      	bne.n	8006404 <HAL_DMA_IRQHandler+0x1f4>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bf14      	ite	ne
 80063b2:	2301      	movne	r3, #1
 80063b4:	2300      	moveq	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	e02e      	b.n	8006418 <HAL_DMA_IRQHandler+0x208>
 80063ba:	bf00      	nop
 80063bc:	2400000c 	.word	0x2400000c
 80063c0:	1b4e81b5 	.word	0x1b4e81b5
 80063c4:	40020010 	.word	0x40020010
 80063c8:	40020028 	.word	0x40020028
 80063cc:	40020040 	.word	0x40020040
 80063d0:	40020058 	.word	0x40020058
 80063d4:	40020070 	.word	0x40020070
 80063d8:	40020088 	.word	0x40020088
 80063dc:	400200a0 	.word	0x400200a0
 80063e0:	400200b8 	.word	0x400200b8
 80063e4:	40020410 	.word	0x40020410
 80063e8:	40020428 	.word	0x40020428
 80063ec:	40020440 	.word	0x40020440
 80063f0:	40020458 	.word	0x40020458
 80063f4:	40020470 	.word	0x40020470
 80063f8:	40020488 	.word	0x40020488
 80063fc:	400204a0 	.word	0x400204a0
 8006400:	400204b8 	.word	0x400204b8
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	bf14      	ite	ne
 8006412:	2301      	movne	r3, #1
 8006414:	2300      	moveq	r3, #0
 8006416:	b2db      	uxtb	r3, r3
 8006418:	2b00      	cmp	r3, #0
 800641a:	d015      	beq.n	8006448 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0204 	bic.w	r2, r2, #4
 800642a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	2208      	movs	r2, #8
 8006436:	409a      	lsls	r2, r3
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006440:	f043 0201 	orr.w	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d06e      	beq.n	800653c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a69      	ldr	r2, [pc, #420]	@ (8006608 <HAL_DMA_IRQHandler+0x3f8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d04a      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a67      	ldr	r2, [pc, #412]	@ (800660c <HAL_DMA_IRQHandler+0x3fc>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d045      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a66      	ldr	r2, [pc, #408]	@ (8006610 <HAL_DMA_IRQHandler+0x400>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d040      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a64      	ldr	r2, [pc, #400]	@ (8006614 <HAL_DMA_IRQHandler+0x404>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d03b      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a63      	ldr	r2, [pc, #396]	@ (8006618 <HAL_DMA_IRQHandler+0x408>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d036      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a61      	ldr	r2, [pc, #388]	@ (800661c <HAL_DMA_IRQHandler+0x40c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d031      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a60      	ldr	r2, [pc, #384]	@ (8006620 <HAL_DMA_IRQHandler+0x410>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d02c      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006624 <HAL_DMA_IRQHandler+0x414>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d027      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a5d      	ldr	r2, [pc, #372]	@ (8006628 <HAL_DMA_IRQHandler+0x418>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d022      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a5b      	ldr	r2, [pc, #364]	@ (800662c <HAL_DMA_IRQHandler+0x41c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01d      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a5a      	ldr	r2, [pc, #360]	@ (8006630 <HAL_DMA_IRQHandler+0x420>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a58      	ldr	r2, [pc, #352]	@ (8006634 <HAL_DMA_IRQHandler+0x424>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a57      	ldr	r2, [pc, #348]	@ (8006638 <HAL_DMA_IRQHandler+0x428>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a55      	ldr	r2, [pc, #340]	@ (800663c <HAL_DMA_IRQHandler+0x42c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a54      	ldr	r2, [pc, #336]	@ (8006640 <HAL_DMA_IRQHandler+0x430>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_DMA_IRQHandler+0x2ee>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a52      	ldr	r2, [pc, #328]	@ (8006644 <HAL_DMA_IRQHandler+0x434>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d10a      	bne.n	8006514 <HAL_DMA_IRQHandler+0x304>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006508:	2b00      	cmp	r3, #0
 800650a:	bf14      	ite	ne
 800650c:	2301      	movne	r3, #1
 800650e:	2300      	moveq	r3, #0
 8006510:	b2db      	uxtb	r3, r3
 8006512:	e003      	b.n	800651c <HAL_DMA_IRQHandler+0x30c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2300      	movs	r3, #0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2201      	movs	r2, #1
 800652a:	409a      	lsls	r2, r3
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006534:	f043 0202 	orr.w	r2, r3, #2
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	2204      	movs	r2, #4
 8006546:	409a      	lsls	r2, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 808f 	beq.w	8006670 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a2c      	ldr	r2, [pc, #176]	@ (8006608 <HAL_DMA_IRQHandler+0x3f8>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d04a      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <HAL_DMA_IRQHandler+0x3fc>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d045      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a29      	ldr	r2, [pc, #164]	@ (8006610 <HAL_DMA_IRQHandler+0x400>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d040      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a27      	ldr	r2, [pc, #156]	@ (8006614 <HAL_DMA_IRQHandler+0x404>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d03b      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a26      	ldr	r2, [pc, #152]	@ (8006618 <HAL_DMA_IRQHandler+0x408>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d036      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a24      	ldr	r2, [pc, #144]	@ (800661c <HAL_DMA_IRQHandler+0x40c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d031      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a23      	ldr	r2, [pc, #140]	@ (8006620 <HAL_DMA_IRQHandler+0x410>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d02c      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a21      	ldr	r2, [pc, #132]	@ (8006624 <HAL_DMA_IRQHandler+0x414>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d027      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a20      	ldr	r2, [pc, #128]	@ (8006628 <HAL_DMA_IRQHandler+0x418>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d022      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a1e      	ldr	r2, [pc, #120]	@ (800662c <HAL_DMA_IRQHandler+0x41c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d01d      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006630 <HAL_DMA_IRQHandler+0x420>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d018      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006634 <HAL_DMA_IRQHandler+0x424>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d013      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006638 <HAL_DMA_IRQHandler+0x428>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00e      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a18      	ldr	r2, [pc, #96]	@ (800663c <HAL_DMA_IRQHandler+0x42c>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <HAL_DMA_IRQHandler+0x430>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_DMA_IRQHandler+0x3e2>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a15      	ldr	r2, [pc, #84]	@ (8006644 <HAL_DMA_IRQHandler+0x434>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d12a      	bne.n	8006648 <HAL_DMA_IRQHandler+0x438>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf14      	ite	ne
 8006600:	2301      	movne	r3, #1
 8006602:	2300      	moveq	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	e023      	b.n	8006650 <HAL_DMA_IRQHandler+0x440>
 8006608:	40020010 	.word	0x40020010
 800660c:	40020028 	.word	0x40020028
 8006610:	40020040 	.word	0x40020040
 8006614:	40020058 	.word	0x40020058
 8006618:	40020070 	.word	0x40020070
 800661c:	40020088 	.word	0x40020088
 8006620:	400200a0 	.word	0x400200a0
 8006624:	400200b8 	.word	0x400200b8
 8006628:	40020410 	.word	0x40020410
 800662c:	40020428 	.word	0x40020428
 8006630:	40020440 	.word	0x40020440
 8006634:	40020458 	.word	0x40020458
 8006638:	40020470 	.word	0x40020470
 800663c:	40020488 	.word	0x40020488
 8006640:	400204a0 	.word	0x400204a0
 8006644:	400204b8 	.word	0x400204b8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00d      	beq.n	8006670 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	2204      	movs	r2, #4
 800665e:	409a      	lsls	r2, r3
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006668:	f043 0204 	orr.w	r2, r3, #4
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006674:	f003 031f 	and.w	r3, r3, #31
 8006678:	2210      	movs	r2, #16
 800667a:	409a      	lsls	r2, r3
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80a6 	beq.w	80067d2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a85      	ldr	r2, [pc, #532]	@ (80068a0 <HAL_DMA_IRQHandler+0x690>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d04a      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a83      	ldr	r2, [pc, #524]	@ (80068a4 <HAL_DMA_IRQHandler+0x694>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d045      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a82      	ldr	r2, [pc, #520]	@ (80068a8 <HAL_DMA_IRQHandler+0x698>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d040      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a80      	ldr	r2, [pc, #512]	@ (80068ac <HAL_DMA_IRQHandler+0x69c>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d03b      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a7f      	ldr	r2, [pc, #508]	@ (80068b0 <HAL_DMA_IRQHandler+0x6a0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d036      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a7d      	ldr	r2, [pc, #500]	@ (80068b4 <HAL_DMA_IRQHandler+0x6a4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d031      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a7c      	ldr	r2, [pc, #496]	@ (80068b8 <HAL_DMA_IRQHandler+0x6a8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d02c      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a7a      	ldr	r2, [pc, #488]	@ (80068bc <HAL_DMA_IRQHandler+0x6ac>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d027      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a79      	ldr	r2, [pc, #484]	@ (80068c0 <HAL_DMA_IRQHandler+0x6b0>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d022      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a77      	ldr	r2, [pc, #476]	@ (80068c4 <HAL_DMA_IRQHandler+0x6b4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d01d      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a76      	ldr	r2, [pc, #472]	@ (80068c8 <HAL_DMA_IRQHandler+0x6b8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d018      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a74      	ldr	r2, [pc, #464]	@ (80068cc <HAL_DMA_IRQHandler+0x6bc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a73      	ldr	r2, [pc, #460]	@ (80068d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00e      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a71      	ldr	r2, [pc, #452]	@ (80068d4 <HAL_DMA_IRQHandler+0x6c4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d009      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a70      	ldr	r2, [pc, #448]	@ (80068d8 <HAL_DMA_IRQHandler+0x6c8>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d004      	beq.n	8006726 <HAL_DMA_IRQHandler+0x516>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a6e      	ldr	r2, [pc, #440]	@ (80068dc <HAL_DMA_IRQHandler+0x6cc>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d10a      	bne.n	800673c <HAL_DMA_IRQHandler+0x52c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0308 	and.w	r3, r3, #8
 8006730:	2b00      	cmp	r3, #0
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	e009      	b.n	8006750 <HAL_DMA_IRQHandler+0x540>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	bf14      	ite	ne
 800674a:	2301      	movne	r3, #1
 800674c:	2300      	moveq	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d03e      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2210      	movs	r2, #16
 800675e:	409a      	lsls	r2, r3
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d108      	bne.n	8006792 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d024      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
 8006790:	e01f      	b.n	80067d2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006796:	2b00      	cmp	r3, #0
 8006798:	d01b      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
 80067a2:	e016      	b.n	80067d2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d107      	bne.n	80067c2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0208 	bic.w	r2, r2, #8
 80067c0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d6:	f003 031f 	and.w	r3, r3, #31
 80067da:	2220      	movs	r2, #32
 80067dc:	409a      	lsls	r2, r3
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f000 8110 	beq.w	8006a08 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a2c      	ldr	r2, [pc, #176]	@ (80068a0 <HAL_DMA_IRQHandler+0x690>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d04a      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a2b      	ldr	r2, [pc, #172]	@ (80068a4 <HAL_DMA_IRQHandler+0x694>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d045      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a29      	ldr	r2, [pc, #164]	@ (80068a8 <HAL_DMA_IRQHandler+0x698>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d040      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a28      	ldr	r2, [pc, #160]	@ (80068ac <HAL_DMA_IRQHandler+0x69c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d03b      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a26      	ldr	r2, [pc, #152]	@ (80068b0 <HAL_DMA_IRQHandler+0x6a0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d036      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a25      	ldr	r2, [pc, #148]	@ (80068b4 <HAL_DMA_IRQHandler+0x6a4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d031      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a23      	ldr	r2, [pc, #140]	@ (80068b8 <HAL_DMA_IRQHandler+0x6a8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d02c      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a22      	ldr	r2, [pc, #136]	@ (80068bc <HAL_DMA_IRQHandler+0x6ac>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d027      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a20      	ldr	r2, [pc, #128]	@ (80068c0 <HAL_DMA_IRQHandler+0x6b0>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d022      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1f      	ldr	r2, [pc, #124]	@ (80068c4 <HAL_DMA_IRQHandler+0x6b4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d01d      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1d      	ldr	r2, [pc, #116]	@ (80068c8 <HAL_DMA_IRQHandler+0x6b8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d018      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1c      	ldr	r2, [pc, #112]	@ (80068cc <HAL_DMA_IRQHandler+0x6bc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a1a      	ldr	r2, [pc, #104]	@ (80068d0 <HAL_DMA_IRQHandler+0x6c0>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00e      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a19      	ldr	r2, [pc, #100]	@ (80068d4 <HAL_DMA_IRQHandler+0x6c4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d009      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a17      	ldr	r2, [pc, #92]	@ (80068d8 <HAL_DMA_IRQHandler+0x6c8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_DMA_IRQHandler+0x678>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <HAL_DMA_IRQHandler+0x6cc>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d12b      	bne.n	80068e0 <HAL_DMA_IRQHandler+0x6d0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0310 	and.w	r3, r3, #16
 8006892:	2b00      	cmp	r3, #0
 8006894:	bf14      	ite	ne
 8006896:	2301      	movne	r3, #1
 8006898:	2300      	moveq	r3, #0
 800689a:	b2db      	uxtb	r3, r3
 800689c:	e02a      	b.n	80068f4 <HAL_DMA_IRQHandler+0x6e4>
 800689e:	bf00      	nop
 80068a0:	40020010 	.word	0x40020010
 80068a4:	40020028 	.word	0x40020028
 80068a8:	40020040 	.word	0x40020040
 80068ac:	40020058 	.word	0x40020058
 80068b0:	40020070 	.word	0x40020070
 80068b4:	40020088 	.word	0x40020088
 80068b8:	400200a0 	.word	0x400200a0
 80068bc:	400200b8 	.word	0x400200b8
 80068c0:	40020410 	.word	0x40020410
 80068c4:	40020428 	.word	0x40020428
 80068c8:	40020440 	.word	0x40020440
 80068cc:	40020458 	.word	0x40020458
 80068d0:	40020470 	.word	0x40020470
 80068d4:	40020488 	.word	0x40020488
 80068d8:	400204a0 	.word	0x400204a0
 80068dc:	400204b8 	.word	0x400204b8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bf14      	ite	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	2300      	moveq	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8087 	beq.w	8006a08 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068fe:	f003 031f 	and.w	r3, r3, #31
 8006902:	2220      	movs	r2, #32
 8006904:	409a      	lsls	r2, r3
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b04      	cmp	r3, #4
 8006914:	d139      	bne.n	800698a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f022 0216 	bic.w	r2, r2, #22
 8006924:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695a      	ldr	r2, [r3, #20]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006934:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <HAL_DMA_IRQHandler+0x736>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006942:	2b00      	cmp	r3, #0
 8006944:	d007      	beq.n	8006956 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0208 	bic.w	r2, r2, #8
 8006954:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	223f      	movs	r2, #63	@ 0x3f
 8006960:	409a      	lsls	r2, r3
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 834a 	beq.w	8007014 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	4798      	blx	r3
          }
          return;
 8006988:	e344      	b.n	8007014 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d018      	beq.n	80069ca <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d108      	bne.n	80069b8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d02c      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	4798      	blx	r3
 80069b6:	e027      	b.n	8006a08 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d023      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
 80069c8:	e01e      	b.n	8006a08 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10f      	bne.n	80069f8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0210 	bic.w	r2, r2, #16
 80069e6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8306 	beq.w	800701e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8088 	beq.w	8006b30 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2204      	movs	r2, #4
 8006a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a7a      	ldr	r2, [pc, #488]	@ (8006c18 <HAL_DMA_IRQHandler+0xa08>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d04a      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a79      	ldr	r2, [pc, #484]	@ (8006c1c <HAL_DMA_IRQHandler+0xa0c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d045      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a77      	ldr	r2, [pc, #476]	@ (8006c20 <HAL_DMA_IRQHandler+0xa10>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d040      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a76      	ldr	r2, [pc, #472]	@ (8006c24 <HAL_DMA_IRQHandler+0xa14>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d03b      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a74      	ldr	r2, [pc, #464]	@ (8006c28 <HAL_DMA_IRQHandler+0xa18>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d036      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a73      	ldr	r2, [pc, #460]	@ (8006c2c <HAL_DMA_IRQHandler+0xa1c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d031      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a71      	ldr	r2, [pc, #452]	@ (8006c30 <HAL_DMA_IRQHandler+0xa20>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d02c      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a70      	ldr	r2, [pc, #448]	@ (8006c34 <HAL_DMA_IRQHandler+0xa24>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d027      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a6e      	ldr	r2, [pc, #440]	@ (8006c38 <HAL_DMA_IRQHandler+0xa28>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d022      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a6d      	ldr	r2, [pc, #436]	@ (8006c3c <HAL_DMA_IRQHandler+0xa2c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d01d      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a6b      	ldr	r2, [pc, #428]	@ (8006c40 <HAL_DMA_IRQHandler+0xa30>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d018      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a6a      	ldr	r2, [pc, #424]	@ (8006c44 <HAL_DMA_IRQHandler+0xa34>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a68      	ldr	r2, [pc, #416]	@ (8006c48 <HAL_DMA_IRQHandler+0xa38>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d00e      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a67      	ldr	r2, [pc, #412]	@ (8006c4c <HAL_DMA_IRQHandler+0xa3c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d009      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a65      	ldr	r2, [pc, #404]	@ (8006c50 <HAL_DMA_IRQHandler+0xa40>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d004      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x8b8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a64      	ldr	r2, [pc, #400]	@ (8006c54 <HAL_DMA_IRQHandler+0xa44>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d108      	bne.n	8006ada <HAL_DMA_IRQHandler+0x8ca>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e007      	b.n	8006aea <HAL_DMA_IRQHandler+0x8da>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3301      	adds	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d307      	bcc.n	8006b06 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f2      	bne.n	8006aea <HAL_DMA_IRQHandler+0x8da>
 8006b04:	e000      	b.n	8006b08 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b06:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2203      	movs	r2, #3
 8006b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8006b1e:	e003      	b.n	8006b28 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8272 	beq.w	800701e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	4798      	blx	r3
 8006b42:	e26c      	b.n	800701e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a43      	ldr	r2, [pc, #268]	@ (8006c58 <HAL_DMA_IRQHandler+0xa48>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d022      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a42      	ldr	r2, [pc, #264]	@ (8006c5c <HAL_DMA_IRQHandler+0xa4c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d01d      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a40      	ldr	r2, [pc, #256]	@ (8006c60 <HAL_DMA_IRQHandler+0xa50>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d018      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3f      	ldr	r2, [pc, #252]	@ (8006c64 <HAL_DMA_IRQHandler+0xa54>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d013      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3d      	ldr	r2, [pc, #244]	@ (8006c68 <HAL_DMA_IRQHandler+0xa58>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00e      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a3c      	ldr	r2, [pc, #240]	@ (8006c6c <HAL_DMA_IRQHandler+0xa5c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d009      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a3a      	ldr	r2, [pc, #232]	@ (8006c70 <HAL_DMA_IRQHandler+0xa60>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d004      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x984>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a39      	ldr	r2, [pc, #228]	@ (8006c74 <HAL_DMA_IRQHandler+0xa64>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d101      	bne.n	8006b98 <HAL_DMA_IRQHandler+0x988>
 8006b94:	2301      	movs	r3, #1
 8006b96:	e000      	b.n	8006b9a <HAL_DMA_IRQHandler+0x98a>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 823f 	beq.w	800701e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bac:	f003 031f 	and.w	r3, r3, #31
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	409a      	lsls	r2, r3
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f000 80cd 	beq.w	8006d58 <HAL_DMA_IRQHandler+0xb48>
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80c7 	beq.w	8006d58 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bce:	f003 031f 	and.w	r3, r3, #31
 8006bd2:	2204      	movs	r2, #4
 8006bd4:	409a      	lsls	r2, r3
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d049      	beq.n	8006c78 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f000 8210 	beq.w	8007018 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c00:	e20a      	b.n	8007018 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 8206 	beq.w	8007018 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c14:	e200      	b.n	8007018 <HAL_DMA_IRQHandler+0xe08>
 8006c16:	bf00      	nop
 8006c18:	40020010 	.word	0x40020010
 8006c1c:	40020028 	.word	0x40020028
 8006c20:	40020040 	.word	0x40020040
 8006c24:	40020058 	.word	0x40020058
 8006c28:	40020070 	.word	0x40020070
 8006c2c:	40020088 	.word	0x40020088
 8006c30:	400200a0 	.word	0x400200a0
 8006c34:	400200b8 	.word	0x400200b8
 8006c38:	40020410 	.word	0x40020410
 8006c3c:	40020428 	.word	0x40020428
 8006c40:	40020440 	.word	0x40020440
 8006c44:	40020458 	.word	0x40020458
 8006c48:	40020470 	.word	0x40020470
 8006c4c:	40020488 	.word	0x40020488
 8006c50:	400204a0 	.word	0x400204a0
 8006c54:	400204b8 	.word	0x400204b8
 8006c58:	58025408 	.word	0x58025408
 8006c5c:	5802541c 	.word	0x5802541c
 8006c60:	58025430 	.word	0x58025430
 8006c64:	58025444 	.word	0x58025444
 8006c68:	58025458 	.word	0x58025458
 8006c6c:	5802546c 	.word	0x5802546c
 8006c70:	58025480 	.word	0x58025480
 8006c74:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f003 0320 	and.w	r3, r3, #32
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d160      	bne.n	8006d44 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a7f      	ldr	r2, [pc, #508]	@ (8006e84 <HAL_DMA_IRQHandler+0xc74>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d04a      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a7d      	ldr	r2, [pc, #500]	@ (8006e88 <HAL_DMA_IRQHandler+0xc78>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d045      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8006e8c <HAL_DMA_IRQHandler+0xc7c>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d040      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a7a      	ldr	r2, [pc, #488]	@ (8006e90 <HAL_DMA_IRQHandler+0xc80>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d03b      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a79      	ldr	r2, [pc, #484]	@ (8006e94 <HAL_DMA_IRQHandler+0xc84>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d036      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a77      	ldr	r2, [pc, #476]	@ (8006e98 <HAL_DMA_IRQHandler+0xc88>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d031      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a76      	ldr	r2, [pc, #472]	@ (8006e9c <HAL_DMA_IRQHandler+0xc8c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d02c      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a74      	ldr	r2, [pc, #464]	@ (8006ea0 <HAL_DMA_IRQHandler+0xc90>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d027      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a73      	ldr	r2, [pc, #460]	@ (8006ea4 <HAL_DMA_IRQHandler+0xc94>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d022      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a71      	ldr	r2, [pc, #452]	@ (8006ea8 <HAL_DMA_IRQHandler+0xc98>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01d      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a70      	ldr	r2, [pc, #448]	@ (8006eac <HAL_DMA_IRQHandler+0xc9c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d018      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a6e      	ldr	r2, [pc, #440]	@ (8006eb0 <HAL_DMA_IRQHandler+0xca0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8006eb4 <HAL_DMA_IRQHandler+0xca4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00e      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a6b      	ldr	r2, [pc, #428]	@ (8006eb8 <HAL_DMA_IRQHandler+0xca8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a6a      	ldr	r2, [pc, #424]	@ (8006ebc <HAL_DMA_IRQHandler+0xcac>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_DMA_IRQHandler+0xb12>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a68      	ldr	r2, [pc, #416]	@ (8006ec0 <HAL_DMA_IRQHandler+0xcb0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <HAL_DMA_IRQHandler+0xb24>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0208 	bic.w	r2, r2, #8
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	e007      	b.n	8006d44 <HAL_DMA_IRQHandler+0xb34>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0204 	bic.w	r2, r2, #4
 8006d42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8165 	beq.w	8007018 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d56:	e15f      	b.n	8007018 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	2202      	movs	r2, #2
 8006d62:	409a      	lsls	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	4013      	ands	r3, r2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80c5 	beq.w	8006ef8 <HAL_DMA_IRQHandler+0xce8>
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80bf 	beq.w	8006ef8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d7e:	f003 031f 	and.w	r3, r3, #31
 8006d82:	2202      	movs	r2, #2
 8006d84:	409a      	lsls	r2, r3
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d018      	beq.n	8006dc6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 813a 	beq.w	800701c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db0:	e134      	b.n	800701c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 8130 	beq.w	800701c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc4:	e12a      	b.n	800701c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f003 0320 	and.w	r3, r3, #32
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f040 8089 	bne.w	8006ee4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006e84 <HAL_DMA_IRQHandler+0xc74>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d04a      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a29      	ldr	r2, [pc, #164]	@ (8006e88 <HAL_DMA_IRQHandler+0xc78>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d045      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a28      	ldr	r2, [pc, #160]	@ (8006e8c <HAL_DMA_IRQHandler+0xc7c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d040      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <HAL_DMA_IRQHandler+0xc80>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d03b      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a25      	ldr	r2, [pc, #148]	@ (8006e94 <HAL_DMA_IRQHandler+0xc84>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d036      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a23      	ldr	r2, [pc, #140]	@ (8006e98 <HAL_DMA_IRQHandler+0xc88>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d031      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a22      	ldr	r2, [pc, #136]	@ (8006e9c <HAL_DMA_IRQHandler+0xc8c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d02c      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a20      	ldr	r2, [pc, #128]	@ (8006ea0 <HAL_DMA_IRQHandler+0xc90>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d027      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1f      	ldr	r2, [pc, #124]	@ (8006ea4 <HAL_DMA_IRQHandler+0xc94>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d022      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea8 <HAL_DMA_IRQHandler+0xc98>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d01d      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8006eac <HAL_DMA_IRQHandler+0xc9c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d018      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb0 <HAL_DMA_IRQHandler+0xca0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <HAL_DMA_IRQHandler+0xca4>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00e      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a17      	ldr	r2, [pc, #92]	@ (8006eb8 <HAL_DMA_IRQHandler+0xca8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d009      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a16      	ldr	r2, [pc, #88]	@ (8006ebc <HAL_DMA_IRQHandler+0xcac>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d004      	beq.n	8006e72 <HAL_DMA_IRQHandler+0xc62>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a14      	ldr	r2, [pc, #80]	@ (8006ec0 <HAL_DMA_IRQHandler+0xcb0>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d128      	bne.n	8006ec4 <HAL_DMA_IRQHandler+0xcb4>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0214 	bic.w	r2, r2, #20
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	e027      	b.n	8006ed4 <HAL_DMA_IRQHandler+0xcc4>
 8006e84:	40020010 	.word	0x40020010
 8006e88:	40020028 	.word	0x40020028
 8006e8c:	40020040 	.word	0x40020040
 8006e90:	40020058 	.word	0x40020058
 8006e94:	40020070 	.word	0x40020070
 8006e98:	40020088 	.word	0x40020088
 8006e9c:	400200a0 	.word	0x400200a0
 8006ea0:	400200b8 	.word	0x400200b8
 8006ea4:	40020410 	.word	0x40020410
 8006ea8:	40020428 	.word	0x40020428
 8006eac:	40020440 	.word	0x40020440
 8006eb0:	40020458 	.word	0x40020458
 8006eb4:	40020470 	.word	0x40020470
 8006eb8:	40020488 	.word	0x40020488
 8006ebc:	400204a0 	.word	0x400204a0
 8006ec0:	400204b8 	.word	0x400204b8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 020a 	bic.w	r2, r2, #10
 8006ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 8097 	beq.w	800701c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ef6:	e091      	b.n	800701c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2208      	movs	r2, #8
 8006f02:	409a      	lsls	r2, r3
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8088 	beq.w	800701e <HAL_DMA_IRQHandler+0xe0e>
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 8082 	beq.w	800701e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a41      	ldr	r2, [pc, #260]	@ (8007024 <HAL_DMA_IRQHandler+0xe14>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d04a      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a3f      	ldr	r2, [pc, #252]	@ (8007028 <HAL_DMA_IRQHandler+0xe18>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d045      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a3e      	ldr	r2, [pc, #248]	@ (800702c <HAL_DMA_IRQHandler+0xe1c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d040      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a3c      	ldr	r2, [pc, #240]	@ (8007030 <HAL_DMA_IRQHandler+0xe20>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d03b      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a3b      	ldr	r2, [pc, #236]	@ (8007034 <HAL_DMA_IRQHandler+0xe24>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d036      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a39      	ldr	r2, [pc, #228]	@ (8007038 <HAL_DMA_IRQHandler+0xe28>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d031      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a38      	ldr	r2, [pc, #224]	@ (800703c <HAL_DMA_IRQHandler+0xe2c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d02c      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a36      	ldr	r2, [pc, #216]	@ (8007040 <HAL_DMA_IRQHandler+0xe30>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d027      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a35      	ldr	r2, [pc, #212]	@ (8007044 <HAL_DMA_IRQHandler+0xe34>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d022      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a33      	ldr	r2, [pc, #204]	@ (8007048 <HAL_DMA_IRQHandler+0xe38>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01d      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a32      	ldr	r2, [pc, #200]	@ (800704c <HAL_DMA_IRQHandler+0xe3c>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d018      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a30      	ldr	r2, [pc, #192]	@ (8007050 <HAL_DMA_IRQHandler+0xe40>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a2f      	ldr	r2, [pc, #188]	@ (8007054 <HAL_DMA_IRQHandler+0xe44>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8007058 <HAL_DMA_IRQHandler+0xe48>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a2c      	ldr	r2, [pc, #176]	@ (800705c <HAL_DMA_IRQHandler+0xe4c>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_DMA_IRQHandler+0xdaa>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8007060 <HAL_DMA_IRQHandler+0xe50>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d108      	bne.n	8006fcc <HAL_DMA_IRQHandler+0xdbc>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 021c 	bic.w	r2, r2, #28
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	e007      	b.n	8006fdc <HAL_DMA_IRQHandler+0xdcc>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 020e 	bic.w	r2, r2, #14
 8006fda:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007006:	2b00      	cmp	r3, #0
 8007008:	d009      	beq.n	800701e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	4798      	blx	r3
 8007012:	e004      	b.n	800701e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800701c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800701e:	3728      	adds	r7, #40	@ 0x28
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40020010 	.word	0x40020010
 8007028:	40020028 	.word	0x40020028
 800702c:	40020040 	.word	0x40020040
 8007030:	40020058 	.word	0x40020058
 8007034:	40020070 	.word	0x40020070
 8007038:	40020088 	.word	0x40020088
 800703c:	400200a0 	.word	0x400200a0
 8007040:	400200b8 	.word	0x400200b8
 8007044:	40020410 	.word	0x40020410
 8007048:	40020428 	.word	0x40020428
 800704c:	40020440 	.word	0x40020440
 8007050:	40020458 	.word	0x40020458
 8007054:	40020470 	.word	0x40020470
 8007058:	40020488 	.word	0x40020488
 800705c:	400204a0 	.word	0x400204a0
 8007060:	400204b8 	.word	0x400204b8

08007064 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007076:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a7f      	ldr	r2, [pc, #508]	@ (8007280 <DMA_SetConfig+0x21c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d072      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a7d      	ldr	r2, [pc, #500]	@ (8007284 <DMA_SetConfig+0x220>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d06d      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a7c      	ldr	r2, [pc, #496]	@ (8007288 <DMA_SetConfig+0x224>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d068      	beq.n	800716e <DMA_SetConfig+0x10a>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a7a      	ldr	r2, [pc, #488]	@ (800728c <DMA_SetConfig+0x228>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d063      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a79      	ldr	r2, [pc, #484]	@ (8007290 <DMA_SetConfig+0x22c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d05e      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a77      	ldr	r2, [pc, #476]	@ (8007294 <DMA_SetConfig+0x230>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d059      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a76      	ldr	r2, [pc, #472]	@ (8007298 <DMA_SetConfig+0x234>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d054      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a74      	ldr	r2, [pc, #464]	@ (800729c <DMA_SetConfig+0x238>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d04f      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a73      	ldr	r2, [pc, #460]	@ (80072a0 <DMA_SetConfig+0x23c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d04a      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a71      	ldr	r2, [pc, #452]	@ (80072a4 <DMA_SetConfig+0x240>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d045      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a70      	ldr	r2, [pc, #448]	@ (80072a8 <DMA_SetConfig+0x244>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d040      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a6e      	ldr	r2, [pc, #440]	@ (80072ac <DMA_SetConfig+0x248>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d03b      	beq.n	800716e <DMA_SetConfig+0x10a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a6d      	ldr	r2, [pc, #436]	@ (80072b0 <DMA_SetConfig+0x24c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d036      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a6b      	ldr	r2, [pc, #428]	@ (80072b4 <DMA_SetConfig+0x250>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d031      	beq.n	800716e <DMA_SetConfig+0x10a>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a6a      	ldr	r2, [pc, #424]	@ (80072b8 <DMA_SetConfig+0x254>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d02c      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a68      	ldr	r2, [pc, #416]	@ (80072bc <DMA_SetConfig+0x258>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d027      	beq.n	800716e <DMA_SetConfig+0x10a>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a67      	ldr	r2, [pc, #412]	@ (80072c0 <DMA_SetConfig+0x25c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a65      	ldr	r2, [pc, #404]	@ (80072c4 <DMA_SetConfig+0x260>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a64      	ldr	r2, [pc, #400]	@ (80072c8 <DMA_SetConfig+0x264>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <DMA_SetConfig+0x10a>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a62      	ldr	r2, [pc, #392]	@ (80072cc <DMA_SetConfig+0x268>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a61      	ldr	r2, [pc, #388]	@ (80072d0 <DMA_SetConfig+0x26c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a5f      	ldr	r2, [pc, #380]	@ (80072d4 <DMA_SetConfig+0x270>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <DMA_SetConfig+0x10a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a5e      	ldr	r2, [pc, #376]	@ (80072d8 <DMA_SetConfig+0x274>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <DMA_SetConfig+0x10a>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a5c      	ldr	r2, [pc, #368]	@ (80072dc <DMA_SetConfig+0x278>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d101      	bne.n	8007172 <DMA_SetConfig+0x10e>
 800716e:	2301      	movs	r3, #1
 8007170:	e000      	b.n	8007174 <DMA_SetConfig+0x110>
 8007172:	2300      	movs	r3, #0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007180:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007192:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a39      	ldr	r2, [pc, #228]	@ (8007280 <DMA_SetConfig+0x21c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d04a      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a38      	ldr	r2, [pc, #224]	@ (8007284 <DMA_SetConfig+0x220>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d045      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a36      	ldr	r2, [pc, #216]	@ (8007288 <DMA_SetConfig+0x224>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d040      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a35      	ldr	r2, [pc, #212]	@ (800728c <DMA_SetConfig+0x228>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d03b      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a33      	ldr	r2, [pc, #204]	@ (8007290 <DMA_SetConfig+0x22c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d036      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a32      	ldr	r2, [pc, #200]	@ (8007294 <DMA_SetConfig+0x230>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d031      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a30      	ldr	r2, [pc, #192]	@ (8007298 <DMA_SetConfig+0x234>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d02c      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a2f      	ldr	r2, [pc, #188]	@ (800729c <DMA_SetConfig+0x238>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d027      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a2d      	ldr	r2, [pc, #180]	@ (80072a0 <DMA_SetConfig+0x23c>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d022      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a2c      	ldr	r2, [pc, #176]	@ (80072a4 <DMA_SetConfig+0x240>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d01d      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2a      	ldr	r2, [pc, #168]	@ (80072a8 <DMA_SetConfig+0x244>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a29      	ldr	r2, [pc, #164]	@ (80072ac <DMA_SetConfig+0x248>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d013      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a27      	ldr	r2, [pc, #156]	@ (80072b0 <DMA_SetConfig+0x24c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a26      	ldr	r2, [pc, #152]	@ (80072b4 <DMA_SetConfig+0x250>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a24      	ldr	r2, [pc, #144]	@ (80072b8 <DMA_SetConfig+0x254>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <DMA_SetConfig+0x1d0>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a23      	ldr	r2, [pc, #140]	@ (80072bc <DMA_SetConfig+0x258>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d101      	bne.n	8007238 <DMA_SetConfig+0x1d4>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <DMA_SetConfig+0x1d6>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d059      	beq.n	80072f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	223f      	movs	r2, #63	@ 0x3f
 8007248:	409a      	lsls	r2, r3
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800725c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b40      	cmp	r3, #64	@ 0x40
 800726c:	d138      	bne.n	80072e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800727e:	e086      	b.n	800738e <DMA_SetConfig+0x32a>
 8007280:	40020010 	.word	0x40020010
 8007284:	40020028 	.word	0x40020028
 8007288:	40020040 	.word	0x40020040
 800728c:	40020058 	.word	0x40020058
 8007290:	40020070 	.word	0x40020070
 8007294:	40020088 	.word	0x40020088
 8007298:	400200a0 	.word	0x400200a0
 800729c:	400200b8 	.word	0x400200b8
 80072a0:	40020410 	.word	0x40020410
 80072a4:	40020428 	.word	0x40020428
 80072a8:	40020440 	.word	0x40020440
 80072ac:	40020458 	.word	0x40020458
 80072b0:	40020470 	.word	0x40020470
 80072b4:	40020488 	.word	0x40020488
 80072b8:	400204a0 	.word	0x400204a0
 80072bc:	400204b8 	.word	0x400204b8
 80072c0:	58025408 	.word	0x58025408
 80072c4:	5802541c 	.word	0x5802541c
 80072c8:	58025430 	.word	0x58025430
 80072cc:	58025444 	.word	0x58025444
 80072d0:	58025458 	.word	0x58025458
 80072d4:	5802546c 	.word	0x5802546c
 80072d8:	58025480 	.word	0x58025480
 80072dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	60da      	str	r2, [r3, #12]
}
 80072f0:	e04d      	b.n	800738e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a29      	ldr	r2, [pc, #164]	@ (800739c <DMA_SetConfig+0x338>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <DMA_SetConfig+0x2de>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a27      	ldr	r2, [pc, #156]	@ (80073a0 <DMA_SetConfig+0x33c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01d      	beq.n	8007342 <DMA_SetConfig+0x2de>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a26      	ldr	r2, [pc, #152]	@ (80073a4 <DMA_SetConfig+0x340>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <DMA_SetConfig+0x2de>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a24      	ldr	r2, [pc, #144]	@ (80073a8 <DMA_SetConfig+0x344>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <DMA_SetConfig+0x2de>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a23      	ldr	r2, [pc, #140]	@ (80073ac <DMA_SetConfig+0x348>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <DMA_SetConfig+0x2de>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a21      	ldr	r2, [pc, #132]	@ (80073b0 <DMA_SetConfig+0x34c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <DMA_SetConfig+0x2de>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a20      	ldr	r2, [pc, #128]	@ (80073b4 <DMA_SetConfig+0x350>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <DMA_SetConfig+0x2de>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1e      	ldr	r2, [pc, #120]	@ (80073b8 <DMA_SetConfig+0x354>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d101      	bne.n	8007346 <DMA_SetConfig+0x2e2>
 8007342:	2301      	movs	r3, #1
 8007344:	e000      	b.n	8007348 <DMA_SetConfig+0x2e4>
 8007346:	2300      	movs	r3, #0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d020      	beq.n	800738e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007350:	f003 031f 	and.w	r3, r3, #31
 8007354:	2201      	movs	r2, #1
 8007356:	409a      	lsls	r2, r3
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	2b40      	cmp	r3, #64	@ 0x40
 800736a:	d108      	bne.n	800737e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	60da      	str	r2, [r3, #12]
}
 800737c:	e007      	b.n	800738e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	60da      	str	r2, [r3, #12]
}
 800738e:	bf00      	nop
 8007390:	371c      	adds	r7, #28
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	58025408 	.word	0x58025408
 80073a0:	5802541c 	.word	0x5802541c
 80073a4:	58025430 	.word	0x58025430
 80073a8:	58025444 	.word	0x58025444
 80073ac:	58025458 	.word	0x58025458
 80073b0:	5802546c 	.word	0x5802546c
 80073b4:	58025480 	.word	0x58025480
 80073b8:	58025494 	.word	0x58025494

080073bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a42      	ldr	r2, [pc, #264]	@ (80074d4 <DMA_CalcBaseAndBitshift+0x118>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d04a      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a41      	ldr	r2, [pc, #260]	@ (80074d8 <DMA_CalcBaseAndBitshift+0x11c>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d045      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a3f      	ldr	r2, [pc, #252]	@ (80074dc <DMA_CalcBaseAndBitshift+0x120>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d040      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a3e      	ldr	r2, [pc, #248]	@ (80074e0 <DMA_CalcBaseAndBitshift+0x124>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d03b      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a3c      	ldr	r2, [pc, #240]	@ (80074e4 <DMA_CalcBaseAndBitshift+0x128>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d036      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3b      	ldr	r2, [pc, #236]	@ (80074e8 <DMA_CalcBaseAndBitshift+0x12c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d031      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a39      	ldr	r2, [pc, #228]	@ (80074ec <DMA_CalcBaseAndBitshift+0x130>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d02c      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a38      	ldr	r2, [pc, #224]	@ (80074f0 <DMA_CalcBaseAndBitshift+0x134>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d027      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a36      	ldr	r2, [pc, #216]	@ (80074f4 <DMA_CalcBaseAndBitshift+0x138>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d022      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a35      	ldr	r2, [pc, #212]	@ (80074f8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01d      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a33      	ldr	r2, [pc, #204]	@ (80074fc <DMA_CalcBaseAndBitshift+0x140>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a32      	ldr	r2, [pc, #200]	@ (8007500 <DMA_CalcBaseAndBitshift+0x144>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a30      	ldr	r2, [pc, #192]	@ (8007504 <DMA_CalcBaseAndBitshift+0x148>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2f      	ldr	r2, [pc, #188]	@ (8007508 <DMA_CalcBaseAndBitshift+0x14c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a2d      	ldr	r2, [pc, #180]	@ (800750c <DMA_CalcBaseAndBitshift+0x150>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <DMA_CalcBaseAndBitshift+0xa8>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a2c      	ldr	r2, [pc, #176]	@ (8007510 <DMA_CalcBaseAndBitshift+0x154>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d101      	bne.n	8007468 <DMA_CalcBaseAndBitshift+0xac>
 8007464:	2301      	movs	r3, #1
 8007466:	e000      	b.n	800746a <DMA_CalcBaseAndBitshift+0xae>
 8007468:	2300      	movs	r3, #0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d024      	beq.n	80074b8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	3b10      	subs	r3, #16
 8007476:	4a27      	ldr	r2, [pc, #156]	@ (8007514 <DMA_CalcBaseAndBitshift+0x158>)
 8007478:	fba2 2303 	umull	r2, r3, r2, r3
 800747c:	091b      	lsrs	r3, r3, #4
 800747e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 0307 	and.w	r3, r3, #7
 8007486:	4a24      	ldr	r2, [pc, #144]	@ (8007518 <DMA_CalcBaseAndBitshift+0x15c>)
 8007488:	5cd3      	ldrb	r3, [r2, r3]
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d908      	bls.n	80074a8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	4b1f      	ldr	r3, [pc, #124]	@ (800751c <DMA_CalcBaseAndBitshift+0x160>)
 800749e:	4013      	ands	r3, r2
 80074a0:	1d1a      	adds	r2, r3, #4
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	659a      	str	r2, [r3, #88]	@ 0x58
 80074a6:	e00d      	b.n	80074c4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	4b1b      	ldr	r3, [pc, #108]	@ (800751c <DMA_CalcBaseAndBitshift+0x160>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074b6:	e005      	b.n	80074c4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	40020010 	.word	0x40020010
 80074d8:	40020028 	.word	0x40020028
 80074dc:	40020040 	.word	0x40020040
 80074e0:	40020058 	.word	0x40020058
 80074e4:	40020070 	.word	0x40020070
 80074e8:	40020088 	.word	0x40020088
 80074ec:	400200a0 	.word	0x400200a0
 80074f0:	400200b8 	.word	0x400200b8
 80074f4:	40020410 	.word	0x40020410
 80074f8:	40020428 	.word	0x40020428
 80074fc:	40020440 	.word	0x40020440
 8007500:	40020458 	.word	0x40020458
 8007504:	40020470 	.word	0x40020470
 8007508:	40020488 	.word	0x40020488
 800750c:	400204a0 	.word	0x400204a0
 8007510:	400204b8 	.word	0x400204b8
 8007514:	aaaaaaab 	.word	0xaaaaaaab
 8007518:	08012510 	.word	0x08012510
 800751c:	fffffc00 	.word	0xfffffc00

08007520 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007520:	b480      	push	{r7}
 8007522:	b085      	sub	sp, #20
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d120      	bne.n	8007576 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	2b03      	cmp	r3, #3
 800753a:	d858      	bhi.n	80075ee <DMA_CheckFifoParam+0xce>
 800753c:	a201      	add	r2, pc, #4	@ (adr r2, 8007544 <DMA_CheckFifoParam+0x24>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007555 	.word	0x08007555
 8007548:	08007567 	.word	0x08007567
 800754c:	08007555 	.word	0x08007555
 8007550:	080075ef 	.word	0x080075ef
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d048      	beq.n	80075f2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007564:	e045      	b.n	80075f2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800756e:	d142      	bne.n	80075f6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007574:	e03f      	b.n	80075f6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800757e:	d123      	bne.n	80075c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007584:	2b03      	cmp	r3, #3
 8007586:	d838      	bhi.n	80075fa <DMA_CheckFifoParam+0xda>
 8007588:	a201      	add	r2, pc, #4	@ (adr r2, 8007590 <DMA_CheckFifoParam+0x70>)
 800758a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758e:	bf00      	nop
 8007590:	080075a1 	.word	0x080075a1
 8007594:	080075a7 	.word	0x080075a7
 8007598:	080075a1 	.word	0x080075a1
 800759c:	080075b9 	.word	0x080075b9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	73fb      	strb	r3, [r7, #15]
        break;
 80075a4:	e030      	b.n	8007608 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d025      	beq.n	80075fe <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075b6:	e022      	b.n	80075fe <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80075c0:	d11f      	bne.n	8007602 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075c6:	e01c      	b.n	8007602 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d902      	bls.n	80075d6 <DMA_CheckFifoParam+0xb6>
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d003      	beq.n	80075dc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075d4:	e018      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
        break;
 80075da:	e015      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00e      	beq.n	8007606 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
    break;
 80075ec:	e00b      	b.n	8007606 <DMA_CheckFifoParam+0xe6>
        break;
 80075ee:	bf00      	nop
 80075f0:	e00a      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        break;
 80075f2:	bf00      	nop
 80075f4:	e008      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        break;
 80075f6:	bf00      	nop
 80075f8:	e006      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        break;
 80075fa:	bf00      	nop
 80075fc:	e004      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
        break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <DMA_CheckFifoParam+0xe8>
    break;
 8007606:	bf00      	nop
    }
  }

  return status;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop

08007618 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a38      	ldr	r2, [pc, #224]	@ (800770c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d022      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a36      	ldr	r2, [pc, #216]	@ (8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d01d      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a35      	ldr	r2, [pc, #212]	@ (8007714 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d018      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a33      	ldr	r2, [pc, #204]	@ (8007718 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a32      	ldr	r2, [pc, #200]	@ (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00e      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a30      	ldr	r2, [pc, #192]	@ (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d009      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a2f      	ldr	r2, [pc, #188]	@ (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a2d      	ldr	r2, [pc, #180]	@ (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d101      	bne.n	800767a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01a      	beq.n	80076b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	b2db      	uxtb	r3, r3
 8007686:	3b08      	subs	r3, #8
 8007688:	4a28      	ldr	r2, [pc, #160]	@ (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800768a:	fba2 2303 	umull	r2, r3, r2, r3
 800768e:	091b      	lsrs	r3, r3, #4
 8007690:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4b26      	ldr	r3, [pc, #152]	@ (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a24      	ldr	r2, [pc, #144]	@ (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	2201      	movs	r2, #1
 80076ae:	409a      	lsls	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076b4:	e024      	b.n	8007700 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	3b10      	subs	r3, #16
 80076be:	4a1e      	ldr	r2, [pc, #120]	@ (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	091b      	lsrs	r3, r3, #4
 80076c6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4a1c      	ldr	r2, [pc, #112]	@ (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d806      	bhi.n	80076de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d902      	bls.n	80076de <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3308      	adds	r3, #8
 80076dc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4b18      	ldr	r3, [pc, #96]	@ (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076e2:	4413      	add	r3, r2
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	461a      	mov	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a16      	ldr	r2, [pc, #88]	@ (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80076f0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	2201      	movs	r2, #1
 80076fa:	409a      	lsls	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	58025408 	.word	0x58025408
 8007710:	5802541c 	.word	0x5802541c
 8007714:	58025430 	.word	0x58025430
 8007718:	58025444 	.word	0x58025444
 800771c:	58025458 	.word	0x58025458
 8007720:	5802546c 	.word	0x5802546c
 8007724:	58025480 	.word	0x58025480
 8007728:	58025494 	.word	0x58025494
 800772c:	cccccccd 	.word	0xcccccccd
 8007730:	16009600 	.word	0x16009600
 8007734:	58025880 	.word	0x58025880
 8007738:	aaaaaaab 	.word	0xaaaaaaab
 800773c:	400204b8 	.word	0x400204b8
 8007740:	4002040f 	.word	0x4002040f
 8007744:	10008200 	.word	0x10008200
 8007748:	40020880 	.word	0x40020880

0800774c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d04a      	beq.n	80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b08      	cmp	r3, #8
 8007766:	d847      	bhi.n	80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a25      	ldr	r2, [pc, #148]	@ (8007804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d022      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a24      	ldr	r2, [pc, #144]	@ (8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d01d      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a22      	ldr	r2, [pc, #136]	@ (800780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d018      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a21      	ldr	r2, [pc, #132]	@ (8007810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d013      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1f      	ldr	r2, [pc, #124]	@ (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00e      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1e      	ldr	r2, [pc, #120]	@ (8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d009      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1c      	ldr	r2, [pc, #112]	@ (800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1b      	ldr	r2, [pc, #108]	@ (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d101      	bne.n	80077bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e000      	b.n	80077be <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077bc:	2300      	movs	r3, #0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4b17      	ldr	r3, [pc, #92]	@ (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a15      	ldr	r2, [pc, #84]	@ (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80077d6:	e009      	b.n	80077ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	4b14      	ldr	r3, [pc, #80]	@ (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	461a      	mov	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a11      	ldr	r2, [pc, #68]	@ (8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077ea:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	2201      	movs	r2, #1
 80077f2:	409a      	lsls	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	58025408 	.word	0x58025408
 8007808:	5802541c 	.word	0x5802541c
 800780c:	58025430 	.word	0x58025430
 8007810:	58025444 	.word	0x58025444
 8007814:	58025458 	.word	0x58025458
 8007818:	5802546c 	.word	0x5802546c
 800781c:	58025480 	.word	0x58025480
 8007820:	58025494 	.word	0x58025494
 8007824:	1600963f 	.word	0x1600963f
 8007828:	58025940 	.word	0x58025940
 800782c:	1000823f 	.word	0x1000823f
 8007830:	40020940 	.word	0x40020940

08007834 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b098      	sub	sp, #96	@ 0x60
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800783c:	4a84      	ldr	r2, [pc, #528]	@ (8007a50 <HAL_FDCAN_Init+0x21c>)
 800783e:	f107 030c 	add.w	r3, r7, #12
 8007842:	4611      	mov	r1, r2
 8007844:	224c      	movs	r2, #76	@ 0x4c
 8007846:	4618      	mov	r0, r3
 8007848:	f00a f892 	bl	8011970 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d101      	bne.n	8007856 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e1c6      	b.n	8007be4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a7e      	ldr	r2, [pc, #504]	@ (8007a54 <HAL_FDCAN_Init+0x220>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d106      	bne.n	800786e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007874:	b2db      	uxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d106      	bne.n	8007888 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f7fa fcd6 	bl	8002234 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	699a      	ldr	r2, [r3, #24]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f022 0210 	bic.w	r2, r2, #16
 8007896:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007898:	f7fb f9ae 	bl	8002bf8 <HAL_GetTick>
 800789c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800789e:	e014      	b.n	80078ca <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078a0:	f7fb f9aa 	bl	8002bf8 <HAL_GetTick>
 80078a4:	4602      	mov	r2, r0
 80078a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a8:	1ad3      	subs	r3, r2, r3
 80078aa:	2b0a      	cmp	r3, #10
 80078ac:	d90d      	bls.n	80078ca <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078b4:	f043 0201 	orr.w	r2, r3, #1
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2203      	movs	r2, #3
 80078c2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e18c      	b.n	8007be4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d0e3      	beq.n	80078a0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699a      	ldr	r2, [r3, #24]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078e8:	f7fb f986 	bl	8002bf8 <HAL_GetTick>
 80078ec:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078ee:	e014      	b.n	800791a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078f0:	f7fb f982 	bl	8002bf8 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b0a      	cmp	r3, #10
 80078fc:	d90d      	bls.n	800791a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007904:	f043 0201 	orr.w	r2, r3, #1
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2203      	movs	r2, #3
 8007912:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e164      	b.n	8007be4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d0e3      	beq.n	80078f0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0202 	orr.w	r2, r2, #2
 8007936:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7c1b      	ldrb	r3, [r3, #16]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d108      	bne.n	8007952 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800794e:	619a      	str	r2, [r3, #24]
 8007950:	e007      	b.n	8007962 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	699a      	ldr	r2, [r3, #24]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007960:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	7c5b      	ldrb	r3, [r3, #17]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d108      	bne.n	800797c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	699a      	ldr	r2, [r3, #24]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007978:	619a      	str	r2, [r3, #24]
 800797a:	e007      	b.n	800798c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800798a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7c9b      	ldrb	r3, [r3, #18]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d108      	bne.n	80079a6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699a      	ldr	r2, [r3, #24]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079a2:	619a      	str	r2, [r3, #24]
 80079a4:	e007      	b.n	80079b6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	699a      	ldr	r2, [r3, #24]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079b4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80079da:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 0210 	bic.w	r2, r2, #16
 80079ea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d108      	bne.n	8007a06 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699a      	ldr	r2, [r3, #24]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0204 	orr.w	r2, r2, #4
 8007a02:	619a      	str	r2, [r3, #24]
 8007a04:	e030      	b.n	8007a68 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d02c      	beq.n	8007a68 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d020      	beq.n	8007a58 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007a24:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	691a      	ldr	r2, [r3, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0210 	orr.w	r2, r2, #16
 8007a34:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b03      	cmp	r3, #3
 8007a3c:	d114      	bne.n	8007a68 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	699a      	ldr	r2, [r3, #24]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0220 	orr.w	r2, r2, #32
 8007a4c:	619a      	str	r2, [r3, #24]
 8007a4e:	e00b      	b.n	8007a68 <HAL_FDCAN_Init+0x234>
 8007a50:	080124b4 	.word	0x080124b4
 8007a54:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	699a      	ldr	r2, [r3, #24]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0220 	orr.w	r2, r2, #32
 8007a66:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	3b01      	subs	r3, #1
 8007a76:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a78:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a80:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a90:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a92:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a9c:	d115      	bne.n	8007aca <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aa2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007aac:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007ab6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007ac6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007ac8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af0:	4413      	add	r3, r2
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d011      	beq.n	8007b1a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007afe:	f023 0107 	bic.w	r1, r3, #7
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	3360      	adds	r3, #96	@ 0x60
 8007b0a:	443b      	add	r3, r7
 8007b0c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b2a:	f023 0107 	bic.w	r1, r3, #7
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	3360      	adds	r3, #96	@ 0x60
 8007b36:	443b      	add	r3, r7
 8007b38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d012      	beq.n	8007b74 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b56:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	3360      	adds	r3, #96	@ 0x60
 8007b62:	443b      	add	r3, r7
 8007b64:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b68:	011a      	lsls	r2, r3, #4
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d012      	beq.n	8007ba2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b84:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	3360      	adds	r3, #96	@ 0x60
 8007b90:	443b      	add	r3, r7
 8007b92:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b96:	021a      	lsls	r2, r3, #8
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a11      	ldr	r2, [pc, #68]	@ (8007bec <HAL_FDCAN_Init+0x3b8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d107      	bne.n	8007bbc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f022 0203 	bic.w	r2, r2, #3
 8007bba:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fdeb 	bl	80087b0 <FDCAN_CalcultateRamBlockAddresses>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8007be0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3760      	adds	r7, #96	@ 0x60
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	4000a000 	.word	0x4000a000

08007bf0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007c00:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d002      	beq.n	8007c0e <HAL_FDCAN_ConfigFilter+0x1e>
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d157      	bne.n	8007cbe <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d12b      	bne.n	8007c6e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	2b07      	cmp	r3, #7
 8007c1c:	d10d      	bne.n	8007c3a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8007c2a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007c30:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007c32:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e00e      	b.n	8007c58 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c46:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8007c4e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	e025      	b.n	8007cba <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	075a      	lsls	r2, r3, #29
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	2b07      	cmp	r3, #7
 8007c82:	d103      	bne.n	8007c8c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	e006      	b.n	8007c9a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	079a      	lsls	r2, r3, #30
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e008      	b.n	8007cd0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cc4:	f043 0202 	orr.w	r2, r3, #2
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
  }
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	371c      	adds	r7, #28
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d111      	bne.n	8007d14 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f022 0201 	bic.w	r2, r2, #1
 8007d06:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	e008      	b.n	8007d26 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d1a:	f043 0204 	orr.w	r2, r3, #4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
  }
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b086      	sub	sp, #24
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d141      	bne.n	8007dce <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d52:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d109      	bne.n	8007d6e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d60:	f043 0220 	orr.w	r2, r3, #32
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e038      	b.n	8007de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007d84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e026      	b.n	8007de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	68f8      	ldr	r0, [r7, #12]
 8007daa:	f000 fe87 	bl	8008abc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2101      	movs	r1, #1
 8007db4:	697a      	ldr	r2, [r7, #20]
 8007db6:	fa01 f202 	lsl.w	r2, r1, r2
 8007dba:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	409a      	lsls	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e008      	b.n	8007de0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007dd4:	f043 0208 	orr.w	r2, r3, #8
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
  }
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3718      	adds	r7, #24
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b08b      	sub	sp, #44	@ 0x2c
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007e00:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8007e02:	7efb      	ldrb	r3, [r7, #27]
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	f040 8149 	bne.w	800809c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	2b40      	cmp	r3, #64	@ 0x40
 8007e0e:	d14c      	bne.n	8007eaa <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e18:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d109      	bne.n	8007e34 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e26:	f043 0220 	orr.w	r2, r3, #32
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e13c      	b.n	80080ae <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d109      	bne.n	8007e58 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e12a      	b.n	80080ae <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e68:	d10a      	bne.n	8007e80 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e7a:	d101      	bne.n	8007e80 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e88:	0a1b      	lsrs	r3, r3, #8
 8007e8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	4413      	add	r3, r2
 8007e92:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9c:	69f9      	ldr	r1, [r7, #28]
 8007e9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ea8:	e068      	b.n	8007f7c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2b41      	cmp	r3, #65	@ 0x41
 8007eae:	d14c      	bne.n	8007f4a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007eb8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e0ec      	b.n	80080ae <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007edc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d109      	bne.n	8007ef8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007eea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e0da      	b.n	80080ae <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f08:	d10a      	bne.n	8007f20 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007f12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f1a:	d101      	bne.n	8007f20 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f28:	0a1b      	lsrs	r3, r3, #8
 8007f2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f2e:	69fa      	ldr	r2, [r7, #28]
 8007f30:	4413      	add	r3, r2
 8007f32:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f3c:	69f9      	ldr	r1, [r7, #28]
 8007f3e:	fb01 f303 	mul.w	r3, r1, r3
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f48:	e018      	b.n	8007f7c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d309      	bcc.n	8007f68 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f5a:	f043 0220 	orr.w	r2, r3, #32
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e0a2      	b.n	80080ae <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	fb01 f303 	mul.w	r3, r1, r3
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4413      	add	r3, r2
 8007f7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d107      	bne.n	8007fa0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	0c9b      	lsrs	r3, r3, #18
 8007f96:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	e005      	b.n	8007fac <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	f003 020f 	and.w	r2, r3, #15
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	0e1b      	lsrs	r3, r3, #24
 8008000:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	0fda      	lsrs	r2, r3, #31
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008014:	3304      	adds	r3, #4
 8008016:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800801c:	2300      	movs	r3, #0
 800801e:	623b      	str	r3, [r7, #32]
 8008020:	e00a      	b.n	8008038 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	6a3b      	ldr	r3, [r7, #32]
 8008026:	441a      	add	r2, r3
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	440b      	add	r3, r1
 800802e:	7812      	ldrb	r2, [r2, #0]
 8008030:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	3301      	adds	r3, #1
 8008036:	623b      	str	r3, [r7, #32]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	4a1f      	ldr	r2, [pc, #124]	@ (80080bc <HAL_FDCAN_GetRxMessage+0x2d4>)
 800803e:	5cd3      	ldrb	r3, [r2, r3]
 8008040:	461a      	mov	r2, r3
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	4293      	cmp	r3, r2
 8008046:	d3ec      	bcc.n	8008022 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b40      	cmp	r3, #64	@ 0x40
 800804c:	d105      	bne.n	800805a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	69fa      	ldr	r2, [r7, #28]
 8008054:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8008058:	e01e      	b.n	8008098 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b41      	cmp	r3, #65	@ 0x41
 800805e:	d105      	bne.n	800806c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800806a:	e015      	b.n	8008098 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b1f      	cmp	r3, #31
 8008070:	d808      	bhi.n	8008084 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2101      	movs	r1, #1
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	fa01 f202 	lsl.w	r2, r1, r2
 800807e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8008082:	e009      	b.n	8008098 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f003 021f 	and.w	r2, r3, #31
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2101      	movs	r1, #1
 8008090:	fa01 f202 	lsl.w	r2, r1, r2
 8008094:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8008098:	2300      	movs	r3, #0
 800809a:	e008      	b.n	80080ae <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080a2:	f043 0208 	orr.w	r2, r3, #8
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
  }
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	372c      	adds	r7, #44	@ 0x2c
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	08012518 	.word	0x08012518

080080c0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80080d2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d002      	beq.n	80080e0 <HAL_FDCAN_ActivateNotification+0x20>
 80080da:	7dfb      	ldrb	r3, [r7, #23]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d155      	bne.n	800818c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d108      	bne.n	8008100 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f042 0201 	orr.w	r2, r2, #1
 80080fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80080fe:	e014      	b.n	800812a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4013      	ands	r3, r2
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	429a      	cmp	r2, r3
 800810e:	d108      	bne.n	8008122 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0202 	orr.w	r2, r2, #2
 800811e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008120:	e003      	b.n	800812a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2203      	movs	r2, #3
 8008128:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	430a      	orrs	r2, r1
 8008144:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800814e:	2b00      	cmp	r3, #0
 8008150:	d009      	beq.n	8008166 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	430a      	orrs	r2, r1
 8008162:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	4b0f      	ldr	r3, [pc, #60]	@ (80081ac <HAL_FDCAN_ActivateNotification+0xec>)
 8008170:	4013      	ands	r3, r2
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	430b      	orrs	r3, r1
 8008178:	6553      	str	r3, [r2, #84]	@ 0x54
 800817a:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <HAL_FDCAN_ActivateNotification+0xf0>)
 800817c:	695a      	ldr	r2, [r3, #20]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	0f9b      	lsrs	r3, r3, #30
 8008182:	490b      	ldr	r1, [pc, #44]	@ (80081b0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8008184:	4313      	orrs	r3, r2
 8008186:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	e008      	b.n	800819e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008192:	f043 0202 	orr.w	r2, r3, #2
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	3fcfffff 	.word	0x3fcfffff
 80081b0:	4000a800 	.word	0x4000a800

080081b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b096      	sub	sp, #88	@ 0x58
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80081bc:	4b9a      	ldr	r3, [pc, #616]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	079b      	lsls	r3, r3, #30
 80081c2:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80081c4:	4b98      	ldr	r3, [pc, #608]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	079b      	lsls	r3, r3, #30
 80081ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081cc:	4013      	ands	r3, r2
 80081ce:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80081da:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081e4:	4013      	ands	r3, r2
 80081e6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80081fc:	4013      	ands	r3, r2
 80081fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008206:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800820a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008214:	4013      	ands	r3, r2
 8008216:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800821e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8008222:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800822c:	4013      	ands	r3, r2
 800822e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008236:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800823a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008244:	4013      	ands	r3, r2
 8008246:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800824e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008256:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8008258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008266:	0a1b      	lsrs	r3, r3, #8
 8008268:	f003 0301 	and.w	r3, r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008278:	651a      	str	r2, [r3, #80]	@ 0x50
 800827a:	4b6b      	ldr	r3, [pc, #428]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 800827c:	2200      	movs	r2, #0
 800827e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fa54 	bl	800872e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008288:	0a9b      	lsrs	r3, r3, #10
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d01d      	beq.n	80082ce <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008294:	0a9b      	lsrs	r3, r3, #10
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d017      	beq.n	80082ce <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80082b2:	4013      	ands	r3, r2
 80082b4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80082be:	651a      	str	r2, [r3, #80]	@ 0x50
 80082c0:	4b59      	ldr	r3, [pc, #356]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80082c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fa07 	bl	80086dc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80082ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00d      	beq.n	80082f0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082da:	4b54      	ldr	r3, [pc, #336]	@ (800842c <HAL_FDCAN_IRQHandler+0x278>)
 80082dc:	400b      	ands	r3, r1
 80082de:	6513      	str	r3, [r2, #80]	@ 0x50
 80082e0:	4a51      	ldr	r2, [pc, #324]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 80082e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082e4:	0f9b      	lsrs	r3, r3, #30
 80082e6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80082e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f9c0 	bl	8008670 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80082f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80082fc:	4b4b      	ldr	r3, [pc, #300]	@ (800842c <HAL_FDCAN_IRQHandler+0x278>)
 80082fe:	400b      	ands	r3, r1
 8008300:	6513      	str	r3, [r2, #80]	@ 0x50
 8008302:	4a49      	ldr	r2, [pc, #292]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 8008304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008306:	0f9b      	lsrs	r3, r3, #30
 8008308:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800830a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f9ba 	bl	8008686 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8008312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00d      	beq.n	8008334 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800831e:	4b43      	ldr	r3, [pc, #268]	@ (800842c <HAL_FDCAN_IRQHandler+0x278>)
 8008320:	400b      	ands	r3, r1
 8008322:	6513      	str	r3, [r2, #80]	@ 0x50
 8008324:	4a40      	ldr	r2, [pc, #256]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 8008326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008328:	0f9b      	lsrs	r3, r3, #30
 800832a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800832c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7f9 f9e4 	bl	80016fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00d      	beq.n	8008356 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008340:	4b3a      	ldr	r3, [pc, #232]	@ (800842c <HAL_FDCAN_IRQHandler+0x278>)
 8008342:	400b      	ands	r3, r1
 8008344:	6513      	str	r3, [r2, #80]	@ 0x50
 8008346:	4a38      	ldr	r2, [pc, #224]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 8008348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800834a:	0f9b      	lsrs	r3, r3, #30
 800834c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800834e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9a3 	bl	800869c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008358:	0adb      	lsrs	r3, r3, #11
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d010      	beq.n	8008384 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008364:	0adb      	lsrs	r3, r3, #11
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008376:	651a      	str	r2, [r3, #80]	@ 0x50
 8008378:	4b2b      	ldr	r3, [pc, #172]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 800837a:	2200      	movs	r2, #0
 800837c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f997 	bl	80086b2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8008384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008386:	0a5b      	lsrs	r3, r3, #9
 8008388:	f003 0301 	and.w	r3, r3, #1
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01d      	beq.n	80083cc <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	0a5b      	lsrs	r3, r3, #9
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d017      	beq.n	80083cc <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083a4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b0:	4013      	ands	r3, r2
 80083b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80083be:	4b1a      	ldr	r3, [pc, #104]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80083c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f97d 	bl	80086c6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80083cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083ce:	0cdb      	lsrs	r3, r3, #19
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d010      	beq.n	80083fa <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	0cdb      	lsrs	r3, r3, #19
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00a      	beq.n	80083fa <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80083ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80083ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f97c 	bl	80086f2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80083fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083fc:	0c1b      	lsrs	r3, r3, #16
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d016      	beq.n	8008434 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008408:	0c1b      	lsrs	r3, r3, #16
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d010      	beq.n	8008434 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800841a:	651a      	str	r2, [r3, #80]	@ 0x50
 800841c:	4b02      	ldr	r3, [pc, #8]	@ (8008428 <HAL_FDCAN_IRQHandler+0x274>)
 800841e:	2200      	movs	r2, #0
 8008420:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	e004      	b.n	8008430 <HAL_FDCAN_IRQHandler+0x27c>
 8008426:	bf00      	nop
 8008428:	4000a800 	.word	0x4000a800
 800842c:	3fcfffff 	.word	0x3fcfffff
 8008430:	f000 f969 	bl	8008706 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008436:	0c9b      	lsrs	r3, r3, #18
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d010      	beq.n	8008462 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	0c9b      	lsrs	r3, r3, #18
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8008454:	651a      	str	r2, [r3, #80]	@ 0x50
 8008456:	4b83      	ldr	r3, [pc, #524]	@ (8008664 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008458:	2200      	movs	r2, #0
 800845a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f95c 	bl	800871a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008464:	0c5b      	lsrs	r3, r3, #17
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	2b00      	cmp	r3, #0
 800846c:	d015      	beq.n	800849a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800846e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008470:	0c5b      	lsrs	r3, r3, #17
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00f      	beq.n	800849a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008482:	651a      	str	r2, [r3, #80]	@ 0x50
 8008484:	4b77      	ldr	r3, [pc, #476]	@ (8008664 <HAL_FDCAN_IRQHandler+0x4b0>)
 8008486:	2200      	movs	r2, #0
 8008488:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008490:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800849a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00d      	beq.n	80084bc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084a6:	4b70      	ldr	r3, [pc, #448]	@ (8008668 <HAL_FDCAN_IRQHandler+0x4b4>)
 80084a8:	400b      	ands	r3, r1
 80084aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80084ac:	4a6d      	ldr	r2, [pc, #436]	@ (8008664 <HAL_FDCAN_IRQHandler+0x4b0>)
 80084ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084b0:	0f9b      	lsrs	r3, r3, #30
 80084b2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80084b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 fa24 	bl	8001904 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80084bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d011      	beq.n	80084e6 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80084c8:	4b67      	ldr	r3, [pc, #412]	@ (8008668 <HAL_FDCAN_IRQHandler+0x4b4>)
 80084ca:	400b      	ands	r3, r1
 80084cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80084ce:	4a65      	ldr	r2, [pc, #404]	@ (8008664 <HAL_FDCAN_IRQHandler+0x4b0>)
 80084d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d2:	0f9b      	lsrs	r3, r3, #30
 80084d4:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80084dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a60      	ldr	r2, [pc, #384]	@ (800866c <HAL_FDCAN_IRQHandler+0x4b8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	f040 80ac 	bne.w	800864a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f003 0303 	and.w	r3, r3, #3
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 80a4 	beq.w	800864a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	f003 030f 	and.w	r3, r3, #15
 800850c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008516:	4013      	ands	r3, r2
 8008518:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	6a1b      	ldr	r3, [r3, #32]
 8008520:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008524:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800852c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800852e:	4013      	ands	r3, r2
 8008530:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800853c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008546:	4013      	ands	r3, r2
 8008548:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8008554:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800855c:	6a3a      	ldr	r2, [r7, #32]
 800855e:	4013      	ands	r3, r2
 8008560:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800856c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008574:	69fa      	ldr	r2, [r7, #28]
 8008576:	4013      	ands	r3, r2
 8008578:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800858a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d007      	beq.n	80085a0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008596:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8008598:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f8db 	bl	8008756 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80085a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d007      	beq.n	80085b6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80085ac:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80085ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f8db 	bl	800876c <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	099b      	lsrs	r3, r3, #6
 80085ba:	f003 0301 	and.w	r3, r3, #1
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d01a      	beq.n	80085f8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	099b      	lsrs	r3, r3, #6
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d014      	beq.n	80085f8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d4:	0c1b      	lsrs	r3, r3, #16
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085e4:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2240      	movs	r2, #64	@ 0x40
 80085ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	6939      	ldr	r1, [r7, #16]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8c5 	bl	8008782 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008604:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8008606:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f8c6 	bl	800879a <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800860e:	6a3b      	ldr	r3, [r7, #32]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00b      	beq.n	800862c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	6a3a      	ldr	r2, [r7, #32]
 800861a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008622:	6a3b      	ldr	r3, [r7, #32]
 8008624:	431a      	orrs	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8008640:	69fb      	ldr	r3, [r7, #28]
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f874 	bl	8008742 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800865a:	bf00      	nop
 800865c:	3758      	adds	r7, #88	@ 0x58
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	4000a800 	.word	0x4000a800
 8008668:	3fcfffff 	.word	0x3fcfffff
 800866c:	4000a000 	.word	0x4000a000

08008670 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800867a:	bf00      	nop
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80086ba:	bf00      	nop
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b083      	sub	sp, #12
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800874a:	bf00      	nop
 800874c:	370c      	adds	r7, #12
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr

08008756 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8008756:	b480      	push	{r7}
 8008758:	b083      	sub	sp, #12
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	60f8      	str	r0, [r7, #12]
 800878a:	60b9      	str	r1, [r7, #8]
 800878c:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
 80087a2:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80087c6:	4ba7      	ldr	r3, [pc, #668]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087c8:	4013      	ands	r3, r2
 80087ca:	68ba      	ldr	r2, [r7, #8]
 80087cc:	0091      	lsls	r1, r2, #2
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	6812      	ldr	r2, [r2, #0]
 80087d2:	430b      	orrs	r3, r1
 80087d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e0:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e8:	041a      	lsls	r2, r3, #16
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	4413      	add	r3, r2
 80087fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008806:	4b97      	ldr	r3, [pc, #604]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008808:	4013      	ands	r3, r2
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	0091      	lsls	r1, r2, #2
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6812      	ldr	r2, [r2, #0]
 8008812:	430b      	orrs	r3, r1
 8008814:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008820:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008828:	041a      	lsls	r2, r3, #16
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	430a      	orrs	r2, r1
 8008830:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008848:	4b86      	ldr	r3, [pc, #536]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800884a:	4013      	ands	r3, r2
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	0091      	lsls	r1, r2, #2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	430b      	orrs	r3, r1
 8008856:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008862:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800886a:	041a      	lsls	r2, r3, #16
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800887e:	fb02 f303 	mul.w	r3, r2, r3
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	4413      	add	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008890:	4b74      	ldr	r3, [pc, #464]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008892:	4013      	ands	r3, r2
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	0091      	lsls	r1, r2, #2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	6812      	ldr	r2, [r2, #0]
 800889c:	430b      	orrs	r3, r1
 800889e:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80088aa:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088b2:	041a      	lsls	r2, r3, #16
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	430a      	orrs	r2, r1
 80088ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80088c6:	fb02 f303 	mul.w	r3, r2, r3
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	4413      	add	r3, r2
 80088ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80088d8:	4b62      	ldr	r3, [pc, #392]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088da:	4013      	ands	r3, r2
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	0091      	lsls	r1, r2, #2
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	6812      	ldr	r2, [r2, #0]
 80088e4:	430b      	orrs	r3, r1
 80088e6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80088f2:	fb02 f303 	mul.w	r3, r2, r3
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	4413      	add	r3, r2
 80088fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8008904:	4b57      	ldr	r3, [pc, #348]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008906:	4013      	ands	r3, r2
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	0091      	lsls	r1, r2, #2
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	6812      	ldr	r2, [r2, #0]
 8008910:	430b      	orrs	r3, r1
 8008912:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800891e:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008926:	041a      	lsls	r2, r3, #16
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	430a      	orrs	r2, r1
 800892e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	4413      	add	r3, r2
 800893c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8008946:	4b47      	ldr	r3, [pc, #284]	@ (8008a64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008948:	4013      	ands	r3, r2
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	0091      	lsls	r1, r2, #2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	430b      	orrs	r3, r1
 8008954:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008960:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008968:	041a      	lsls	r2, r3, #16
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800897c:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008984:	061a      	lsls	r2, r3, #24
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008994:	4b34      	ldr	r3, [pc, #208]	@ (8008a68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008996:	4413      	add	r3, r2
 8008998:	009a      	lsls	r2, r3, #2
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	441a      	add	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b6:	00db      	lsls	r3, r3, #3
 80089b8:	441a      	add	r2, r3
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 80089ca:	fb01 f303 	mul.w	r3, r1, r3
 80089ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80089d0:	441a      	add	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 80089e2:	fb01 f303 	mul.w	r3, r1, r3
 80089e6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80089e8:	441a      	add	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089f6:	6879      	ldr	r1, [r7, #4]
 80089f8:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 80089fa:	fb01 f303 	mul.w	r3, r1, r3
 80089fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8008a00:	441a      	add	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a12:	00db      	lsls	r3, r3, #3
 8008a14:	441a      	add	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008a2a:	fb01 f303 	mul.w	r3, r1, r3
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	441a      	add	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8008a46:	fb01 f303 	mul.w	r3, r1, r3
 8008a4a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8008a4c:	441a      	add	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a5a:	4a04      	ldr	r2, [pc, #16]	@ (8008a6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d915      	bls.n	8008a8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008a60:	e006      	b.n	8008a70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008a62:	bf00      	nop
 8008a64:	ffff0003 	.word	0xffff0003
 8008a68:	10002b00 	.word	0x10002b00
 8008a6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a76:	f043 0220 	orr.w	r2, r3, #32
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2203      	movs	r2, #3
 8008a84:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	e010      	b.n	8008aae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a90:	60fb      	str	r3, [r7, #12]
 8008a92:	e005      	b.n	8008aa0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d3f3      	bcc.n	8008a94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop

08008abc <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b089      	sub	sp, #36	@ 0x24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008ada:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	e00a      	b.n	8008afe <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008af0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8008af6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008af8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008afc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b08:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008b0e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008b14:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	fb01 f303 	mul.w	r3, r1, r3
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	3304      	adds	r3, #4
 8008b4c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008b4e:	2300      	movs	r3, #0
 8008b50:	617b      	str	r3, [r7, #20]
 8008b52:	e020      	b.n	8008b96 <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	3303      	adds	r3, #3
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	3302      	adds	r3, #2
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	440b      	add	r3, r1
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008b6c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	3301      	adds	r3, #1
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	440b      	add	r3, r1
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008b7a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008b7c:	6879      	ldr	r1, [r7, #4]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	440a      	add	r2, r1
 8008b82:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008b84:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	3304      	adds	r3, #4
 8008b8e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	3304      	adds	r3, #4
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	4a06      	ldr	r2, [pc, #24]	@ (8008bb4 <FDCAN_CopyMessageToRAM+0xf8>)
 8008b9c:	5cd3      	ldrb	r3, [r2, r3]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d3d6      	bcc.n	8008b54 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	3724      	adds	r7, #36	@ 0x24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	08012518 	.word	0x08012518

08008bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b089      	sub	sp, #36	@ 0x24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008bc6:	4b86      	ldr	r3, [pc, #536]	@ (8008de0 <HAL_GPIO_Init+0x228>)
 8008bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bca:	e18c      	b.n	8008ee6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd8:	4013      	ands	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f000 817e 	beq.w	8008ee0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f003 0303 	and.w	r3, r3, #3
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d005      	beq.n	8008bfc <HAL_GPIO_Init+0x44>
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f003 0303 	and.w	r3, r3, #3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d130      	bne.n	8008c5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	2203      	movs	r2, #3
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	4013      	ands	r3, r2
 8008c12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	68da      	ldr	r2, [r3, #12]
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008c32:	2201      	movs	r2, #1
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3a:	43db      	mvns	r3, r3
 8008c3c:	69ba      	ldr	r2, [r7, #24]
 8008c3e:	4013      	ands	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	091b      	lsrs	r3, r3, #4
 8008c48:	f003 0201 	and.w	r2, r3, #1
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c52:	69ba      	ldr	r2, [r7, #24]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d017      	beq.n	8008c9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	2203      	movs	r2, #3
 8008c76:	fa02 f303 	lsl.w	r3, r2, r3
 8008c7a:	43db      	mvns	r3, r3
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	4013      	ands	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d123      	bne.n	8008cee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	08da      	lsrs	r2, r3, #3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	3208      	adds	r2, #8
 8008cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	220f      	movs	r2, #15
 8008cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc2:	43db      	mvns	r3, r3
 8008cc4:	69ba      	ldr	r2, [r7, #24]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691a      	ldr	r2, [r3, #16]
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	f003 0307 	and.w	r3, r3, #7
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	08da      	lsrs	r2, r3, #3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3208      	adds	r2, #8
 8008ce8:	69b9      	ldr	r1, [r7, #24]
 8008cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	005b      	lsls	r3, r3, #1
 8008cf8:	2203      	movs	r2, #3
 8008cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	4013      	ands	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f003 0203 	and.w	r2, r3, #3
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 80d8 	beq.w	8008ee0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d30:	4b2c      	ldr	r3, [pc, #176]	@ (8008de4 <HAL_GPIO_Init+0x22c>)
 8008d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d36:	4a2b      	ldr	r2, [pc, #172]	@ (8008de4 <HAL_GPIO_Init+0x22c>)
 8008d38:	f043 0302 	orr.w	r3, r3, #2
 8008d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8008d40:	4b28      	ldr	r3, [pc, #160]	@ (8008de4 <HAL_GPIO_Init+0x22c>)
 8008d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008d46:	f003 0302 	and.w	r3, r3, #2
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d4e:	4a26      	ldr	r2, [pc, #152]	@ (8008de8 <HAL_GPIO_Init+0x230>)
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	089b      	lsrs	r3, r3, #2
 8008d54:	3302      	adds	r3, #2
 8008d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	f003 0303 	and.w	r3, r3, #3
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	220f      	movs	r2, #15
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	43db      	mvns	r3, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	4013      	ands	r3, r2
 8008d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a1d      	ldr	r2, [pc, #116]	@ (8008dec <HAL_GPIO_Init+0x234>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d04a      	beq.n	8008e10 <HAL_GPIO_Init+0x258>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8008df0 <HAL_GPIO_Init+0x238>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d02b      	beq.n	8008dda <HAL_GPIO_Init+0x222>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a1b      	ldr	r2, [pc, #108]	@ (8008df4 <HAL_GPIO_Init+0x23c>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d025      	beq.n	8008dd6 <HAL_GPIO_Init+0x21e>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a1a      	ldr	r2, [pc, #104]	@ (8008df8 <HAL_GPIO_Init+0x240>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d01f      	beq.n	8008dd2 <HAL_GPIO_Init+0x21a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a19      	ldr	r2, [pc, #100]	@ (8008dfc <HAL_GPIO_Init+0x244>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d019      	beq.n	8008dce <HAL_GPIO_Init+0x216>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a18      	ldr	r2, [pc, #96]	@ (8008e00 <HAL_GPIO_Init+0x248>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <HAL_GPIO_Init+0x212>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a17      	ldr	r2, [pc, #92]	@ (8008e04 <HAL_GPIO_Init+0x24c>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00d      	beq.n	8008dc6 <HAL_GPIO_Init+0x20e>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a16      	ldr	r2, [pc, #88]	@ (8008e08 <HAL_GPIO_Init+0x250>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <HAL_GPIO_Init+0x20a>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a15      	ldr	r2, [pc, #84]	@ (8008e0c <HAL_GPIO_Init+0x254>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d101      	bne.n	8008dbe <HAL_GPIO_Init+0x206>
 8008dba:	2309      	movs	r3, #9
 8008dbc:	e029      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	e027      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dc2:	2307      	movs	r3, #7
 8008dc4:	e025      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dc6:	2306      	movs	r3, #6
 8008dc8:	e023      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dca:	2305      	movs	r3, #5
 8008dcc:	e021      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dce:	2304      	movs	r3, #4
 8008dd0:	e01f      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e01d      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dd6:	2302      	movs	r3, #2
 8008dd8:	e01b      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e019      	b.n	8008e12 <HAL_GPIO_Init+0x25a>
 8008dde:	bf00      	nop
 8008de0:	58000080 	.word	0x58000080
 8008de4:	58024400 	.word	0x58024400
 8008de8:	58000400 	.word	0x58000400
 8008dec:	58020000 	.word	0x58020000
 8008df0:	58020400 	.word	0x58020400
 8008df4:	58020800 	.word	0x58020800
 8008df8:	58020c00 	.word	0x58020c00
 8008dfc:	58021000 	.word	0x58021000
 8008e00:	58021400 	.word	0x58021400
 8008e04:	58021800 	.word	0x58021800
 8008e08:	58021c00 	.word	0x58021c00
 8008e0c:	58022400 	.word	0x58022400
 8008e10:	2300      	movs	r3, #0
 8008e12:	69fa      	ldr	r2, [r7, #28]
 8008e14:	f002 0203 	and.w	r2, r2, #3
 8008e18:	0092      	lsls	r2, r2, #2
 8008e1a:	4093      	lsls	r3, r2
 8008e1c:	69ba      	ldr	r2, [r7, #24]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e22:	4938      	ldr	r1, [pc, #224]	@ (8008f04 <HAL_GPIO_Init+0x34c>)
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	089b      	lsrs	r3, r3, #2
 8008e28:	3302      	adds	r3, #2
 8008e2a:	69ba      	ldr	r2, [r7, #24]
 8008e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	43db      	mvns	r3, r3
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	4013      	ands	r3, r2
 8008e40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008e4e:	69ba      	ldr	r2, [r7, #24]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008e56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	43db      	mvns	r3, r3
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d003      	beq.n	8008e84 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008e84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	43db      	mvns	r3, r3
 8008e96:	69ba      	ldr	r2, [r7, #24]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d003      	beq.n	8008eb0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008ea8:	69ba      	ldr	r2, [r7, #24]
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	43db      	mvns	r3, r3
 8008ec0:	69ba      	ldr	r2, [r7, #24]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f47f ae6b 	bne.w	8008bcc <HAL_GPIO_Init+0x14>
  }
}
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	3724      	adds	r7, #36	@ 0x24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	58000400 	.word	0x58000400

08008f08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	460b      	mov	r3, r1
 8008f12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	887b      	ldrh	r3, [r7, #2]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008f20:	2301      	movs	r3, #1
 8008f22:	73fb      	strb	r3, [r7, #15]
 8008f24:	e001      	b.n	8008f2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008f26:	2300      	movs	r3, #0
 8008f28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3714      	adds	r7, #20
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	807b      	strh	r3, [r7, #2]
 8008f44:	4613      	mov	r3, r2
 8008f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f48:	787b      	ldrb	r3, [r7, #1]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f4e:	887a      	ldrh	r2, [r7, #2]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008f54:	e003      	b.n	8008f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f56:	887b      	ldrh	r3, [r7, #2]
 8008f58:	041a      	lsls	r2, r3, #16
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	619a      	str	r2, [r3, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
	...

08008f6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008f74:	4b19      	ldr	r3, [pc, #100]	@ (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d00a      	beq.n	8008f96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008f80:	4b16      	ldr	r3, [pc, #88]	@ (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0307 	and.w	r3, r3, #7
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d001      	beq.n	8008f92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e01f      	b.n	8008fd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	e01d      	b.n	8008fd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008f96:	4b11      	ldr	r3, [pc, #68]	@ (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	f023 0207 	bic.w	r2, r3, #7
 8008f9e:	490f      	ldr	r1, [pc, #60]	@ (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008fa6:	f7f9 fe27 	bl	8002bf8 <HAL_GetTick>
 8008faa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fac:	e009      	b.n	8008fc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008fae:	f7f9 fe23 	bl	8002bf8 <HAL_GetTick>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fbc:	d901      	bls.n	8008fc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e007      	b.n	8008fd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008fc2:	4b06      	ldr	r3, [pc, #24]	@ (8008fdc <HAL_PWREx_ConfigSupply+0x70>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fce:	d1ee      	bne.n	8008fae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	58024800 	.word	0x58024800

08008fe0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b08c      	sub	sp, #48	@ 0x30
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e3c8      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 8087 	beq.w	800910e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009000:	4b88      	ldr	r3, [pc, #544]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800900a:	4b86      	ldr	r3, [pc, #536]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800900c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009012:	2b10      	cmp	r3, #16
 8009014:	d007      	beq.n	8009026 <HAL_RCC_OscConfig+0x46>
 8009016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009018:	2b18      	cmp	r3, #24
 800901a:	d110      	bne.n	800903e <HAL_RCC_OscConfig+0x5e>
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	2b02      	cmp	r3, #2
 8009024:	d10b      	bne.n	800903e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009026:	4b7f      	ldr	r3, [pc, #508]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d06c      	beq.n	800910c <HAL_RCC_OscConfig+0x12c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d168      	bne.n	800910c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e3a2      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009046:	d106      	bne.n	8009056 <HAL_RCC_OscConfig+0x76>
 8009048:	4b76      	ldr	r3, [pc, #472]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a75      	ldr	r2, [pc, #468]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800904e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009052:	6013      	str	r3, [r2, #0]
 8009054:	e02e      	b.n	80090b4 <HAL_RCC_OscConfig+0xd4>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10c      	bne.n	8009078 <HAL_RCC_OscConfig+0x98>
 800905e:	4b71      	ldr	r3, [pc, #452]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a70      	ldr	r2, [pc, #448]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	4b6e      	ldr	r3, [pc, #440]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a6d      	ldr	r2, [pc, #436]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	e01d      	b.n	80090b4 <HAL_RCC_OscConfig+0xd4>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009080:	d10c      	bne.n	800909c <HAL_RCC_OscConfig+0xbc>
 8009082:	4b68      	ldr	r3, [pc, #416]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a67      	ldr	r2, [pc, #412]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	4b65      	ldr	r3, [pc, #404]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a64      	ldr	r2, [pc, #400]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	e00b      	b.n	80090b4 <HAL_RCC_OscConfig+0xd4>
 800909c:	4b61      	ldr	r3, [pc, #388]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a60      	ldr	r2, [pc, #384]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80090a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	4b5e      	ldr	r3, [pc, #376]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a5d      	ldr	r2, [pc, #372]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80090ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d013      	beq.n	80090e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090bc:	f7f9 fd9c 	bl	8002bf8 <HAL_GetTick>
 80090c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090c4:	f7f9 fd98 	bl	8002bf8 <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b64      	cmp	r3, #100	@ 0x64
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e356      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090d6:	4b53      	ldr	r3, [pc, #332]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0xe4>
 80090e2:	e014      	b.n	800910e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e4:	f7f9 fd88 	bl	8002bf8 <HAL_GetTick>
 80090e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090ec:	f7f9 fd84 	bl	8002bf8 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b64      	cmp	r3, #100	@ 0x64
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e342      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80090fe:	4b49      	ldr	r3, [pc, #292]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f0      	bne.n	80090ec <HAL_RCC_OscConfig+0x10c>
 800910a:	e000      	b.n	800910e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800910c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 808c 	beq.w	8009234 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800911c:	4b41      	ldr	r3, [pc, #260]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009124:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009126:	4b3f      	ldr	r3, [pc, #252]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d007      	beq.n	8009142 <HAL_RCC_OscConfig+0x162>
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	2b18      	cmp	r3, #24
 8009136:	d137      	bne.n	80091a8 <HAL_RCC_OscConfig+0x1c8>
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d132      	bne.n	80091a8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009142:	4b38      	ldr	r3, [pc, #224]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <HAL_RCC_OscConfig+0x17a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e314      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800915a:	4b32      	ldr	r3, [pc, #200]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f023 0219 	bic.w	r2, r3, #25
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	492f      	ldr	r1, [pc, #188]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009168:	4313      	orrs	r3, r2
 800916a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916c:	f7f9 fd44 	bl	8002bf8 <HAL_GetTick>
 8009170:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009172:	e008      	b.n	8009186 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009174:	f7f9 fd40 	bl	8002bf8 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e2fe      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009186:	4b27      	ldr	r3, [pc, #156]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0304 	and.w	r3, r3, #4
 800918e:	2b00      	cmp	r3, #0
 8009190:	d0f0      	beq.n	8009174 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009192:	4b24      	ldr	r3, [pc, #144]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	691b      	ldr	r3, [r3, #16]
 800919e:	061b      	lsls	r3, r3, #24
 80091a0:	4920      	ldr	r1, [pc, #128]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091a6:	e045      	b.n	8009234 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d026      	beq.n	80091fe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80091b0:	4b1c      	ldr	r3, [pc, #112]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f023 0219 	bic.w	r2, r3, #25
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	4919      	ldr	r1, [pc, #100]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c2:	f7f9 fd19 	bl	8002bf8 <HAL_GetTick>
 80091c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091c8:	e008      	b.n	80091dc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091ca:	f7f9 fd15 	bl	8002bf8 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d901      	bls.n	80091dc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e2d3      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091dc:	4b11      	ldr	r3, [pc, #68]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0f0      	beq.n	80091ca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091e8:	4b0e      	ldr	r3, [pc, #56]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	061b      	lsls	r3, r3, #24
 80091f6:	490b      	ldr	r1, [pc, #44]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	604b      	str	r3, [r1, #4]
 80091fc:	e01a      	b.n	8009234 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091fe:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a08      	ldr	r2, [pc, #32]	@ (8009224 <HAL_RCC_OscConfig+0x244>)
 8009204:	f023 0301 	bic.w	r3, r3, #1
 8009208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800920a:	f7f9 fcf5 	bl	8002bf8 <HAL_GetTick>
 800920e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009210:	e00a      	b.n	8009228 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009212:	f7f9 fcf1 	bl	8002bf8 <HAL_GetTick>
 8009216:	4602      	mov	r2, r0
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	2b02      	cmp	r3, #2
 800921e:	d903      	bls.n	8009228 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e2af      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
 8009224:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009228:	4b96      	ldr	r3, [pc, #600]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1ee      	bne.n	8009212 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 0310 	and.w	r3, r3, #16
 800923c:	2b00      	cmp	r3, #0
 800923e:	d06a      	beq.n	8009316 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009240:	4b90      	ldr	r3, [pc, #576]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009248:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800924a:	4b8e      	ldr	r3, [pc, #568]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800924c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	2b08      	cmp	r3, #8
 8009254:	d007      	beq.n	8009266 <HAL_RCC_OscConfig+0x286>
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	2b18      	cmp	r3, #24
 800925a:	d11b      	bne.n	8009294 <HAL_RCC_OscConfig+0x2b4>
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f003 0303 	and.w	r3, r3, #3
 8009262:	2b01      	cmp	r3, #1
 8009264:	d116      	bne.n	8009294 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009266:	4b87      	ldr	r3, [pc, #540]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <HAL_RCC_OscConfig+0x29e>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	2b80      	cmp	r3, #128	@ 0x80
 8009278:	d001      	beq.n	800927e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e282      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800927e:	4b81      	ldr	r3, [pc, #516]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	061b      	lsls	r3, r3, #24
 800928c:	497d      	ldr	r1, [pc, #500]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800928e:	4313      	orrs	r3, r2
 8009290:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009292:	e040      	b.n	8009316 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	69db      	ldr	r3, [r3, #28]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d023      	beq.n	80092e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800929c:	4b79      	ldr	r3, [pc, #484]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a78      	ldr	r2, [pc, #480]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80092a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a8:	f7f9 fca6 	bl	8002bf8 <HAL_GetTick>
 80092ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80092b0:	f7f9 fca2 	bl	8002bf8 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e260      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80092c2:	4b70      	ldr	r3, [pc, #448]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f0      	beq.n	80092b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092ce:	4b6d      	ldr	r3, [pc, #436]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	061b      	lsls	r3, r3, #24
 80092dc:	4969      	ldr	r1, [pc, #420]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80092de:	4313      	orrs	r3, r2
 80092e0:	60cb      	str	r3, [r1, #12]
 80092e2:	e018      	b.n	8009316 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80092e4:	4b67      	ldr	r3, [pc, #412]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a66      	ldr	r2, [pc, #408]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80092ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092f0:	f7f9 fc82 	bl	8002bf8 <HAL_GetTick>
 80092f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80092f8:	f7f9 fc7e 	bl	8002bf8 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e23c      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800930a:	4b5e      	ldr	r3, [pc, #376]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f0      	bne.n	80092f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d036      	beq.n	8009390 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d019      	beq.n	800935e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800932a:	4b56      	ldr	r3, [pc, #344]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800932c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932e:	4a55      	ldr	r2, [pc, #340]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009330:	f043 0301 	orr.w	r3, r3, #1
 8009334:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009336:	f7f9 fc5f 	bl	8002bf8 <HAL_GetTick>
 800933a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800933c:	e008      	b.n	8009350 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800933e:	f7f9 fc5b 	bl	8002bf8 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	2b02      	cmp	r3, #2
 800934a:	d901      	bls.n	8009350 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800934c:	2303      	movs	r3, #3
 800934e:	e219      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009350:	4b4c      	ldr	r3, [pc, #304]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009354:	f003 0302 	and.w	r3, r3, #2
 8009358:	2b00      	cmp	r3, #0
 800935a:	d0f0      	beq.n	800933e <HAL_RCC_OscConfig+0x35e>
 800935c:	e018      	b.n	8009390 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800935e:	4b49      	ldr	r3, [pc, #292]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009362:	4a48      	ldr	r2, [pc, #288]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009364:	f023 0301 	bic.w	r3, r3, #1
 8009368:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800936a:	f7f9 fc45 	bl	8002bf8 <HAL_GetTick>
 800936e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009370:	e008      	b.n	8009384 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009372:	f7f9 fc41 	bl	8002bf8 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	2b02      	cmp	r3, #2
 800937e:	d901      	bls.n	8009384 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e1ff      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009384:	4b3f      	ldr	r3, [pc, #252]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009386:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f0      	bne.n	8009372 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0320 	and.w	r3, r3, #32
 8009398:	2b00      	cmp	r3, #0
 800939a:	d036      	beq.n	800940a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d019      	beq.n	80093d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093a4:	4b37      	ldr	r3, [pc, #220]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a36      	ldr	r2, [pc, #216]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80093aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80093ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093b0:	f7f9 fc22 	bl	8002bf8 <HAL_GetTick>
 80093b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093b6:	e008      	b.n	80093ca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093b8:	f7f9 fc1e 	bl	8002bf8 <HAL_GetTick>
 80093bc:	4602      	mov	r2, r0
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d901      	bls.n	80093ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80093c6:	2303      	movs	r3, #3
 80093c8:	e1dc      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80093ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0f0      	beq.n	80093b8 <HAL_RCC_OscConfig+0x3d8>
 80093d6:	e018      	b.n	800940a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80093d8:	4b2a      	ldr	r3, [pc, #168]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a29      	ldr	r2, [pc, #164]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 80093de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80093e4:	f7f9 fc08 	bl	8002bf8 <HAL_GetTick>
 80093e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093ea:	e008      	b.n	80093fe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093ec:	f7f9 fc04 	bl	8002bf8 <HAL_GetTick>
 80093f0:	4602      	mov	r2, r0
 80093f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f4:	1ad3      	subs	r3, r2, r3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d901      	bls.n	80093fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80093fa:	2303      	movs	r3, #3
 80093fc:	e1c2      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80093fe:	4b21      	ldr	r3, [pc, #132]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1f0      	bne.n	80093ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 0304 	and.w	r3, r3, #4
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 8086 	beq.w	8009524 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009418:	4b1b      	ldr	r3, [pc, #108]	@ (8009488 <HAL_RCC_OscConfig+0x4a8>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a1a      	ldr	r2, [pc, #104]	@ (8009488 <HAL_RCC_OscConfig+0x4a8>)
 800941e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009422:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009424:	f7f9 fbe8 	bl	8002bf8 <HAL_GetTick>
 8009428:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800942a:	e008      	b.n	800943e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800942c:	f7f9 fbe4 	bl	8002bf8 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b64      	cmp	r3, #100	@ 0x64
 8009438:	d901      	bls.n	800943e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e1a2      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800943e:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <HAL_RCC_OscConfig+0x4a8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009446:	2b00      	cmp	r3, #0
 8009448:	d0f0      	beq.n	800942c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d106      	bne.n	8009460 <HAL_RCC_OscConfig+0x480>
 8009452:	4b0c      	ldr	r3, [pc, #48]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009456:	4a0b      	ldr	r2, [pc, #44]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009458:	f043 0301 	orr.w	r3, r3, #1
 800945c:	6713      	str	r3, [r2, #112]	@ 0x70
 800945e:	e032      	b.n	80094c6 <HAL_RCC_OscConfig+0x4e6>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d111      	bne.n	800948c <HAL_RCC_OscConfig+0x4ac>
 8009468:	4b06      	ldr	r3, [pc, #24]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800946a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800946c:	4a05      	ldr	r2, [pc, #20]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	6713      	str	r3, [r2, #112]	@ 0x70
 8009474:	4b03      	ldr	r3, [pc, #12]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 8009476:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009478:	4a02      	ldr	r2, [pc, #8]	@ (8009484 <HAL_RCC_OscConfig+0x4a4>)
 800947a:	f023 0304 	bic.w	r3, r3, #4
 800947e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009480:	e021      	b.n	80094c6 <HAL_RCC_OscConfig+0x4e6>
 8009482:	bf00      	nop
 8009484:	58024400 	.word	0x58024400
 8009488:	58024800 	.word	0x58024800
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2b05      	cmp	r3, #5
 8009492:	d10c      	bne.n	80094ae <HAL_RCC_OscConfig+0x4ce>
 8009494:	4b83      	ldr	r3, [pc, #524]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009498:	4a82      	ldr	r2, [pc, #520]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800949a:	f043 0304 	orr.w	r3, r3, #4
 800949e:	6713      	str	r3, [r2, #112]	@ 0x70
 80094a0:	4b80      	ldr	r3, [pc, #512]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094a4:	4a7f      	ldr	r2, [pc, #508]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094a6:	f043 0301 	orr.w	r3, r3, #1
 80094aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80094ac:	e00b      	b.n	80094c6 <HAL_RCC_OscConfig+0x4e6>
 80094ae:	4b7d      	ldr	r3, [pc, #500]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094b2:	4a7c      	ldr	r2, [pc, #496]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094b4:	f023 0301 	bic.w	r3, r3, #1
 80094b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80094ba:	4b7a      	ldr	r3, [pc, #488]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094be:	4a79      	ldr	r2, [pc, #484]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094c0:	f023 0304 	bic.w	r3, r3, #4
 80094c4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d015      	beq.n	80094fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094ce:	f7f9 fb93 	bl	8002bf8 <HAL_GetTick>
 80094d2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094d4:	e00a      	b.n	80094ec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094d6:	f7f9 fb8f 	bl	8002bf8 <HAL_GetTick>
 80094da:	4602      	mov	r2, r0
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	1ad3      	subs	r3, r2, r3
 80094e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e14b      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80094ec:	4b6d      	ldr	r3, [pc, #436]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80094ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d0ee      	beq.n	80094d6 <HAL_RCC_OscConfig+0x4f6>
 80094f8:	e014      	b.n	8009524 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094fa:	f7f9 fb7d 	bl	8002bf8 <HAL_GetTick>
 80094fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009500:	e00a      	b.n	8009518 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009502:	f7f9 fb79 	bl	8002bf8 <HAL_GetTick>
 8009506:	4602      	mov	r2, r0
 8009508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009510:	4293      	cmp	r3, r2
 8009512:	d901      	bls.n	8009518 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e135      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009518:	4b62      	ldr	r3, [pc, #392]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800951a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800951c:	f003 0302 	and.w	r3, r3, #2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1ee      	bne.n	8009502 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 812a 	beq.w	8009782 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800952e:	4b5d      	ldr	r3, [pc, #372]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009536:	2b18      	cmp	r3, #24
 8009538:	f000 80ba 	beq.w	80096b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009540:	2b02      	cmp	r3, #2
 8009542:	f040 8095 	bne.w	8009670 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009546:	4b57      	ldr	r3, [pc, #348]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a56      	ldr	r2, [pc, #344]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800954c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009550:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009552:	f7f9 fb51 	bl	8002bf8 <HAL_GetTick>
 8009556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009558:	e008      	b.n	800956c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800955a:	f7f9 fb4d 	bl	8002bf8 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d901      	bls.n	800956c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e10b      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800956c:	4b4d      	ldr	r3, [pc, #308]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1f0      	bne.n	800955a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009578:	4b4a      	ldr	r3, [pc, #296]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800957a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800957c:	4b4a      	ldr	r3, [pc, #296]	@ (80096a8 <HAL_RCC_OscConfig+0x6c8>)
 800957e:	4013      	ands	r3, r2
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009588:	0112      	lsls	r2, r2, #4
 800958a:	430a      	orrs	r2, r1
 800958c:	4945      	ldr	r1, [pc, #276]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800958e:	4313      	orrs	r3, r2
 8009590:	628b      	str	r3, [r1, #40]	@ 0x28
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009596:	3b01      	subs	r3, #1
 8009598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095a0:	3b01      	subs	r3, #1
 80095a2:	025b      	lsls	r3, r3, #9
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	431a      	orrs	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ac:	3b01      	subs	r3, #1
 80095ae:	041b      	lsls	r3, r3, #16
 80095b0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095b4:	431a      	orrs	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095ba:	3b01      	subs	r3, #1
 80095bc:	061b      	lsls	r3, r3, #24
 80095be:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80095c2:	4938      	ldr	r1, [pc, #224]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80095c8:	4b36      	ldr	r3, [pc, #216]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095cc:	4a35      	ldr	r2, [pc, #212]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80095d4:	4b33      	ldr	r3, [pc, #204]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095d8:	4b34      	ldr	r3, [pc, #208]	@ (80096ac <HAL_RCC_OscConfig+0x6cc>)
 80095da:	4013      	ands	r3, r2
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80095e0:	00d2      	lsls	r2, r2, #3
 80095e2:	4930      	ldr	r1, [pc, #192]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80095e8:	4b2e      	ldr	r3, [pc, #184]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ec:	f023 020c 	bic.w	r2, r3, #12
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095f4:	492b      	ldr	r1, [pc, #172]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80095fa:	4b2a      	ldr	r3, [pc, #168]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 80095fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fe:	f023 0202 	bic.w	r2, r3, #2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009606:	4927      	ldr	r1, [pc, #156]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009608:	4313      	orrs	r3, r2
 800960a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800960c:	4b25      	ldr	r3, [pc, #148]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800960e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009610:	4a24      	ldr	r2, [pc, #144]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009618:	4b22      	ldr	r3, [pc, #136]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800961a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961c:	4a21      	ldr	r2, [pc, #132]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800961e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009624:	4b1f      	ldr	r3, [pc, #124]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009628:	4a1e      	ldr	r2, [pc, #120]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800962a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800962e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009630:	4b1c      	ldr	r3, [pc, #112]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009634:	4a1b      	ldr	r2, [pc, #108]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009636:	f043 0301 	orr.w	r3, r3, #1
 800963a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800963c:	4b19      	ldr	r3, [pc, #100]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009648:	f7f9 fad6 	bl	8002bf8 <HAL_GetTick>
 800964c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800964e:	e008      	b.n	8009662 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009650:	f7f9 fad2 	bl	8002bf8 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e090      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009662:	4b10      	ldr	r3, [pc, #64]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d0f0      	beq.n	8009650 <HAL_RCC_OscConfig+0x670>
 800966e:	e088      	b.n	8009782 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009670:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a0b      	ldr	r2, [pc, #44]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009676:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800967a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800967c:	f7f9 fabc 	bl	8002bf8 <HAL_GetTick>
 8009680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009682:	e008      	b.n	8009696 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009684:	f7f9 fab8 	bl	8002bf8 <HAL_GetTick>
 8009688:	4602      	mov	r2, r0
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	2b02      	cmp	r3, #2
 8009690:	d901      	bls.n	8009696 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e076      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009696:	4b03      	ldr	r3, [pc, #12]	@ (80096a4 <HAL_RCC_OscConfig+0x6c4>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d1f0      	bne.n	8009684 <HAL_RCC_OscConfig+0x6a4>
 80096a2:	e06e      	b.n	8009782 <HAL_RCC_OscConfig+0x7a2>
 80096a4:	58024400 	.word	0x58024400
 80096a8:	fffffc0c 	.word	0xfffffc0c
 80096ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80096b0:	4b36      	ldr	r3, [pc, #216]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80096b6:	4b35      	ldr	r3, [pc, #212]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 80096b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d031      	beq.n	8009728 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f003 0203 	and.w	r2, r3, #3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d12a      	bne.n	8009728 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	091b      	lsrs	r3, r3, #4
 80096d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80096de:	429a      	cmp	r2, r3
 80096e0:	d122      	bne.n	8009728 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d11a      	bne.n	8009728 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	0a5b      	lsrs	r3, r3, #9
 80096f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009700:	429a      	cmp	r2, r3
 8009702:	d111      	bne.n	8009728 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	0c1b      	lsrs	r3, r3, #16
 8009708:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009710:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009712:	429a      	cmp	r2, r3
 8009714:	d108      	bne.n	8009728 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	0e1b      	lsrs	r3, r3, #24
 800971a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009722:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009724:	429a      	cmp	r2, r3
 8009726:	d001      	beq.n	800972c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e02b      	b.n	8009784 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800972c:	4b17      	ldr	r3, [pc, #92]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 800972e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009730:	08db      	lsrs	r3, r3, #3
 8009732:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009736:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	429a      	cmp	r2, r3
 8009740:	d01f      	beq.n	8009782 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009742:	4b12      	ldr	r3, [pc, #72]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	4a11      	ldr	r2, [pc, #68]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 8009748:	f023 0301 	bic.w	r3, r3, #1
 800974c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800974e:	f7f9 fa53 	bl	8002bf8 <HAL_GetTick>
 8009752:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009754:	bf00      	nop
 8009756:	f7f9 fa4f 	bl	8002bf8 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975e:	4293      	cmp	r3, r2
 8009760:	d0f9      	beq.n	8009756 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009762:	4b0a      	ldr	r3, [pc, #40]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 8009764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009766:	4b0a      	ldr	r3, [pc, #40]	@ (8009790 <HAL_RCC_OscConfig+0x7b0>)
 8009768:	4013      	ands	r3, r2
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800976e:	00d2      	lsls	r2, r2, #3
 8009770:	4906      	ldr	r1, [pc, #24]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 8009772:	4313      	orrs	r3, r2
 8009774:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009776:	4b05      	ldr	r3, [pc, #20]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 8009778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800977a:	4a04      	ldr	r2, [pc, #16]	@ (800978c <HAL_RCC_OscConfig+0x7ac>)
 800977c:	f043 0301 	orr.w	r3, r3, #1
 8009780:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3730      	adds	r7, #48	@ 0x30
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	58024400 	.word	0x58024400
 8009790:	ffff0007 	.word	0xffff0007

08009794 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
 800979c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e19c      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80097a8:	4b8a      	ldr	r3, [pc, #552]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 030f 	and.w	r3, r3, #15
 80097b0:	683a      	ldr	r2, [r7, #0]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d910      	bls.n	80097d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097b6:	4b87      	ldr	r3, [pc, #540]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f023 020f 	bic.w	r2, r3, #15
 80097be:	4985      	ldr	r1, [pc, #532]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097c6:	4b83      	ldr	r3, [pc, #524]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f003 030f 	and.w	r3, r3, #15
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d001      	beq.n	80097d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e184      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0304 	and.w	r3, r3, #4
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d010      	beq.n	8009806 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	4b7b      	ldr	r3, [pc, #492]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d908      	bls.n	8009806 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097f4:	4b78      	ldr	r3, [pc, #480]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	4975      	ldr	r1, [pc, #468]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009802:	4313      	orrs	r3, r2
 8009804:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0308 	and.w	r3, r3, #8
 800980e:	2b00      	cmp	r3, #0
 8009810:	d010      	beq.n	8009834 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	695a      	ldr	r2, [r3, #20]
 8009816:	4b70      	ldr	r3, [pc, #448]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009818:	69db      	ldr	r3, [r3, #28]
 800981a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800981e:	429a      	cmp	r2, r3
 8009820:	d908      	bls.n	8009834 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009822:	4b6d      	ldr	r3, [pc, #436]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	496a      	ldr	r1, [pc, #424]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009830:	4313      	orrs	r3, r2
 8009832:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0310 	and.w	r3, r3, #16
 800983c:	2b00      	cmp	r3, #0
 800983e:	d010      	beq.n	8009862 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699a      	ldr	r2, [r3, #24]
 8009844:	4b64      	ldr	r3, [pc, #400]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800984c:	429a      	cmp	r2, r3
 800984e:	d908      	bls.n	8009862 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009850:	4b61      	ldr	r3, [pc, #388]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	699b      	ldr	r3, [r3, #24]
 800985c:	495e      	ldr	r1, [pc, #376]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 800985e:	4313      	orrs	r3, r2
 8009860:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0320 	and.w	r3, r3, #32
 800986a:	2b00      	cmp	r3, #0
 800986c:	d010      	beq.n	8009890 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69da      	ldr	r2, [r3, #28]
 8009872:	4b59      	ldr	r3, [pc, #356]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009874:	6a1b      	ldr	r3, [r3, #32]
 8009876:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800987a:	429a      	cmp	r2, r3
 800987c:	d908      	bls.n	8009890 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800987e:	4b56      	ldr	r3, [pc, #344]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	69db      	ldr	r3, [r3, #28]
 800988a:	4953      	ldr	r1, [pc, #332]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 800988c:	4313      	orrs	r3, r2
 800988e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d010      	beq.n	80098be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	68da      	ldr	r2, [r3, #12]
 80098a0:	4b4d      	ldr	r3, [pc, #308]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	f003 030f 	and.w	r3, r3, #15
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d908      	bls.n	80098be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098ac:	4b4a      	ldr	r3, [pc, #296]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	f023 020f 	bic.w	r2, r3, #15
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	4947      	ldr	r1, [pc, #284]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d055      	beq.n	8009976 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80098ca:	4b43      	ldr	r3, [pc, #268]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	4940      	ldr	r1, [pc, #256]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b02      	cmp	r3, #2
 80098e2:	d107      	bne.n	80098f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098e4:	4b3c      	ldr	r3, [pc, #240]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d121      	bne.n	8009934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	e0f6      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	d107      	bne.n	800990c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80098fc:	4b36      	ldr	r3, [pc, #216]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d115      	bne.n	8009934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e0ea      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d107      	bne.n	8009924 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009914:	4b30      	ldr	r3, [pc, #192]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800991c:	2b00      	cmp	r3, #0
 800991e:	d109      	bne.n	8009934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e0de      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009924:	4b2c      	ldr	r3, [pc, #176]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e0d6      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009934:	4b28      	ldr	r3, [pc, #160]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f023 0207 	bic.w	r2, r3, #7
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	4925      	ldr	r1, [pc, #148]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009942:	4313      	orrs	r3, r2
 8009944:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009946:	f7f9 f957 	bl	8002bf8 <HAL_GetTick>
 800994a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800994c:	e00a      	b.n	8009964 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800994e:	f7f9 f953 	bl	8002bf8 <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800995c:	4293      	cmp	r3, r2
 800995e:	d901      	bls.n	8009964 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e0be      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009964:	4b1c      	ldr	r3, [pc, #112]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	00db      	lsls	r3, r3, #3
 8009972:	429a      	cmp	r2, r3
 8009974:	d1eb      	bne.n	800994e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0302 	and.w	r3, r3, #2
 800997e:	2b00      	cmp	r3, #0
 8009980:	d010      	beq.n	80099a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	68da      	ldr	r2, [r3, #12]
 8009986:	4b14      	ldr	r3, [pc, #80]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	f003 030f 	and.w	r3, r3, #15
 800998e:	429a      	cmp	r2, r3
 8009990:	d208      	bcs.n	80099a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009992:	4b11      	ldr	r3, [pc, #68]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 8009994:	699b      	ldr	r3, [r3, #24]
 8009996:	f023 020f 	bic.w	r2, r3, #15
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	490e      	ldr	r1, [pc, #56]	@ (80099d8 <HAL_RCC_ClockConfig+0x244>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80099a4:	4b0b      	ldr	r3, [pc, #44]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 030f 	and.w	r3, r3, #15
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d214      	bcs.n	80099dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099b2:	4b08      	ldr	r3, [pc, #32]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f023 020f 	bic.w	r2, r3, #15
 80099ba:	4906      	ldr	r1, [pc, #24]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	4313      	orrs	r3, r2
 80099c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80099c2:	4b04      	ldr	r3, [pc, #16]	@ (80099d4 <HAL_RCC_ClockConfig+0x240>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 030f 	and.w	r3, r3, #15
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d005      	beq.n	80099dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e086      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x34e>
 80099d4:	52002000 	.word	0x52002000
 80099d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d010      	beq.n	8009a0a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	4b3f      	ldr	r3, [pc, #252]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d208      	bcs.n	8009a0a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099f8:	4b3c      	ldr	r3, [pc, #240]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 80099fa:	699b      	ldr	r3, [r3, #24]
 80099fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	4939      	ldr	r1, [pc, #228]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0308 	and.w	r3, r3, #8
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d010      	beq.n	8009a38 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	695a      	ldr	r2, [r3, #20]
 8009a1a:	4b34      	ldr	r3, [pc, #208]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d208      	bcs.n	8009a38 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a26:	4b31      	ldr	r3, [pc, #196]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	492e      	ldr	r1, [pc, #184]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 0310 	and.w	r3, r3, #16
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d010      	beq.n	8009a66 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699a      	ldr	r2, [r3, #24]
 8009a48:	4b28      	ldr	r3, [pc, #160]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d208      	bcs.n	8009a66 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a54:	4b25      	ldr	r3, [pc, #148]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	4922      	ldr	r1, [pc, #136]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f003 0320 	and.w	r3, r3, #32
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d010      	beq.n	8009a94 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69da      	ldr	r2, [r3, #28]
 8009a76:	4b1d      	ldr	r3, [pc, #116]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d208      	bcs.n	8009a94 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a82:	4b1a      	ldr	r3, [pc, #104]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	4917      	ldr	r1, [pc, #92]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a90:	4313      	orrs	r3, r2
 8009a92:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009a94:	f000 f834 	bl	8009b00 <HAL_RCC_GetSysClockFreq>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	4b14      	ldr	r3, [pc, #80]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009a9c:	699b      	ldr	r3, [r3, #24]
 8009a9e:	0a1b      	lsrs	r3, r3, #8
 8009aa0:	f003 030f 	and.w	r3, r3, #15
 8009aa4:	4912      	ldr	r1, [pc, #72]	@ (8009af0 <HAL_RCC_ClockConfig+0x35c>)
 8009aa6:	5ccb      	ldrb	r3, [r1, r3]
 8009aa8:	f003 031f 	and.w	r3, r3, #31
 8009aac:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8009aec <HAL_RCC_ClockConfig+0x358>)
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	4a0d      	ldr	r2, [pc, #52]	@ (8009af0 <HAL_RCC_ClockConfig+0x35c>)
 8009abc:	5cd3      	ldrb	r3, [r2, r3]
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8009af4 <HAL_RCC_ClockConfig+0x360>)
 8009aca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009acc:	4a0a      	ldr	r2, [pc, #40]	@ (8009af8 <HAL_RCC_ClockConfig+0x364>)
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8009afc <HAL_RCC_ClockConfig+0x368>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f9 f844 	bl	8002b64 <HAL_InitTick>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3718      	adds	r7, #24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	58024400 	.word	0x58024400
 8009af0:	08012500 	.word	0x08012500
 8009af4:	24000010 	.word	0x24000010
 8009af8:	2400000c 	.word	0x2400000c
 8009afc:	24000014 	.word	0x24000014

08009b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b089      	sub	sp, #36	@ 0x24
 8009b04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b06:	4bb3      	ldr	r3, [pc, #716]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b0e:	2b18      	cmp	r3, #24
 8009b10:	f200 8155 	bhi.w	8009dbe <HAL_RCC_GetSysClockFreq+0x2be>
 8009b14:	a201      	add	r2, pc, #4	@ (adr r2, 8009b1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1a:	bf00      	nop
 8009b1c:	08009b81 	.word	0x08009b81
 8009b20:	08009dbf 	.word	0x08009dbf
 8009b24:	08009dbf 	.word	0x08009dbf
 8009b28:	08009dbf 	.word	0x08009dbf
 8009b2c:	08009dbf 	.word	0x08009dbf
 8009b30:	08009dbf 	.word	0x08009dbf
 8009b34:	08009dbf 	.word	0x08009dbf
 8009b38:	08009dbf 	.word	0x08009dbf
 8009b3c:	08009ba7 	.word	0x08009ba7
 8009b40:	08009dbf 	.word	0x08009dbf
 8009b44:	08009dbf 	.word	0x08009dbf
 8009b48:	08009dbf 	.word	0x08009dbf
 8009b4c:	08009dbf 	.word	0x08009dbf
 8009b50:	08009dbf 	.word	0x08009dbf
 8009b54:	08009dbf 	.word	0x08009dbf
 8009b58:	08009dbf 	.word	0x08009dbf
 8009b5c:	08009bad 	.word	0x08009bad
 8009b60:	08009dbf 	.word	0x08009dbf
 8009b64:	08009dbf 	.word	0x08009dbf
 8009b68:	08009dbf 	.word	0x08009dbf
 8009b6c:	08009dbf 	.word	0x08009dbf
 8009b70:	08009dbf 	.word	0x08009dbf
 8009b74:	08009dbf 	.word	0x08009dbf
 8009b78:	08009dbf 	.word	0x08009dbf
 8009b7c:	08009bb3 	.word	0x08009bb3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b80:	4b94      	ldr	r3, [pc, #592]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 0320 	and.w	r3, r3, #32
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d009      	beq.n	8009ba0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b8c:	4b91      	ldr	r3, [pc, #580]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	08db      	lsrs	r3, r3, #3
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	4a90      	ldr	r2, [pc, #576]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009b98:	fa22 f303 	lsr.w	r3, r2, r3
 8009b9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009b9e:	e111      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009ba0:	4b8d      	ldr	r3, [pc, #564]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ba2:	61bb      	str	r3, [r7, #24]
      break;
 8009ba4:	e10e      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009ba6:	4b8d      	ldr	r3, [pc, #564]	@ (8009ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009ba8:	61bb      	str	r3, [r7, #24]
      break;
 8009baa:	e10b      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009bac:	4b8c      	ldr	r3, [pc, #560]	@ (8009de0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009bae:	61bb      	str	r3, [r7, #24]
      break;
 8009bb0:	e108      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bb2:	4b88      	ldr	r3, [pc, #544]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb6:	f003 0303 	and.w	r3, r3, #3
 8009bba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009bbc:	4b85      	ldr	r3, [pc, #532]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bc0:	091b      	lsrs	r3, r3, #4
 8009bc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009bc8:	4b82      	ldr	r3, [pc, #520]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bcc:	f003 0301 	and.w	r3, r3, #1
 8009bd0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009bd2:	4b80      	ldr	r3, [pc, #512]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bd6:	08db      	lsrs	r3, r3, #3
 8009bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	fb02 f303 	mul.w	r3, r2, r3
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80e1 	beq.w	8009db8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	f000 8083 	beq.w	8009d04 <HAL_RCC_GetSysClockFreq+0x204>
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	f200 80a1 	bhi.w	8009d48 <HAL_RCC_GetSysClockFreq+0x248>
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <HAL_RCC_GetSysClockFreq+0x114>
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d056      	beq.n	8009cc0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009c12:	e099      	b.n	8009d48 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c14:	4b6f      	ldr	r3, [pc, #444]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0320 	and.w	r3, r3, #32
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d02d      	beq.n	8009c7c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c20:	4b6c      	ldr	r3, [pc, #432]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	08db      	lsrs	r3, r3, #3
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	4a6b      	ldr	r2, [pc, #428]	@ (8009dd8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c30:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	ee07 3a90 	vmov	s15, r3
 8009c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c4a:	4b62      	ldr	r3, [pc, #392]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c52:	ee07 3a90 	vmov	s15, r3
 8009c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c5e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c76:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009c7a:	e087      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	ee07 3a90 	vmov	s15, r3
 8009c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c86:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009de8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8e:	4b51      	ldr	r3, [pc, #324]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c96:	ee07 3a90 	vmov	s15, r3
 8009c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ca2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cbe:	e065      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	ee07 3a90 	vmov	s15, r3
 8009cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd2:	4b40      	ldr	r3, [pc, #256]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cda:	ee07 3a90 	vmov	s15, r3
 8009cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ce2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ce6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d02:	e043      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	ee07 3a90 	vmov	s15, r3
 8009d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009df0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d16:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1e:	ee07 3a90 	vmov	s15, r3
 8009d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d26:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d2a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d46:	e021      	b.n	8009d8c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	ee07 3a90 	vmov	s15, r3
 8009d4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d52:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009dec <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d62:	ee07 3a90 	vmov	s15, r3
 8009d66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d6e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009de4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d8a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009d8c:	4b11      	ldr	r3, [pc, #68]	@ (8009dd4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d90:	0a5b      	lsrs	r3, r3, #9
 8009d92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d96:	3301      	adds	r3, #1
 8009d98:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	ee07 3a90 	vmov	s15, r3
 8009da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009da4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db0:	ee17 3a90 	vmov	r3, s15
 8009db4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009db6:	e005      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	61bb      	str	r3, [r7, #24]
      break;
 8009dbc:	e002      	b.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009dbe:	4b07      	ldr	r3, [pc, #28]	@ (8009ddc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009dc0:	61bb      	str	r3, [r7, #24]
      break;
 8009dc2:	bf00      	nop
  }

  return sysclockfreq;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3724      	adds	r7, #36	@ 0x24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	58024400 	.word	0x58024400
 8009dd8:	03d09000 	.word	0x03d09000
 8009ddc:	003d0900 	.word	0x003d0900
 8009de0:	016e3600 	.word	0x016e3600
 8009de4:	46000000 	.word	0x46000000
 8009de8:	4c742400 	.word	0x4c742400
 8009dec:	4a742400 	.word	0x4a742400
 8009df0:	4bb71b00 	.word	0x4bb71b00

08009df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009dfa:	f7ff fe81 	bl	8009b00 <HAL_RCC_GetSysClockFreq>
 8009dfe:	4602      	mov	r2, r0
 8009e00:	4b10      	ldr	r3, [pc, #64]	@ (8009e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	f003 030f 	and.w	r3, r3, #15
 8009e0a:	490f      	ldr	r1, [pc, #60]	@ (8009e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e0c:	5ccb      	ldrb	r3, [r1, r3]
 8009e0e:	f003 031f 	and.w	r3, r3, #31
 8009e12:	fa22 f303 	lsr.w	r3, r2, r3
 8009e16:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e18:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	f003 030f 	and.w	r3, r3, #15
 8009e20:	4a09      	ldr	r2, [pc, #36]	@ (8009e48 <HAL_RCC_GetHCLKFreq+0x54>)
 8009e22:	5cd3      	ldrb	r3, [r2, r3]
 8009e24:	f003 031f 	and.w	r3, r3, #31
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2e:	4a07      	ldr	r2, [pc, #28]	@ (8009e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8009e30:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e32:	4a07      	ldr	r2, [pc, #28]	@ (8009e50 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <HAL_RCC_GetHCLKFreq+0x58>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	58024400 	.word	0x58024400
 8009e48:	08012500 	.word	0x08012500
 8009e4c:	24000010 	.word	0x24000010
 8009e50:	2400000c 	.word	0x2400000c

08009e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e58:	f7ff ffcc 	bl	8009df4 <HAL_RCC_GetHCLKFreq>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	4b06      	ldr	r3, [pc, #24]	@ (8009e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	091b      	lsrs	r3, r3, #4
 8009e64:	f003 0307 	and.w	r3, r3, #7
 8009e68:	4904      	ldr	r1, [pc, #16]	@ (8009e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e6a:	5ccb      	ldrb	r3, [r1, r3]
 8009e6c:	f003 031f 	and.w	r3, r3, #31
 8009e70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	58024400 	.word	0x58024400
 8009e7c:	08012500 	.word	0x08012500

08009e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009e84:	f7ff ffb6 	bl	8009df4 <HAL_RCC_GetHCLKFreq>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4b06      	ldr	r3, [pc, #24]	@ (8009ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	f003 0307 	and.w	r3, r3, #7
 8009e94:	4904      	ldr	r1, [pc, #16]	@ (8009ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009e96:	5ccb      	ldrb	r3, [r1, r3]
 8009e98:	f003 031f 	and.w	r3, r3, #31
 8009e9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	58024400 	.word	0x58024400
 8009ea8:	08012500 	.word	0x08012500

08009eac <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009eb0:	b0c6      	sub	sp, #280	@ 0x118
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	ea54 0305 	orrs.w	r3, r4, r5
 8009ed6:	d049      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ede:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ee2:	d02f      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009ee4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ee8:	d828      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009eea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eee:	d01a      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009ef0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ef4:	d822      	bhi.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009efe:	d007      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f00:	e01c      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f02:	4bab      	ldr	r3, [pc, #684]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	4aaa      	ldr	r2, [pc, #680]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f0e:	e01a      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f14:	3308      	adds	r3, #8
 8009f16:	2102      	movs	r1, #2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f002 fa49 	bl	800c3b0 <RCCEx_PLL2_Config>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f24:	e00f      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2a:	3328      	adds	r3, #40	@ 0x28
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f002 faf0 	bl	800c514 <RCCEx_PLL3_Config>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f3a:	e004      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009f42:	e000      	b.n	8009f46 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009f44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d10a      	bne.n	8009f64 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f4e:	4b98      	ldr	r3, [pc, #608]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f5c:	4a94      	ldr	r2, [pc, #592]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f5e:	430b      	orrs	r3, r1
 8009f60:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f62:	e003      	b.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009f78:	f04f 0900 	mov.w	r9, #0
 8009f7c:	ea58 0309 	orrs.w	r3, r8, r9
 8009f80:	d047      	beq.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d82a      	bhi.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f94 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fa9 	.word	0x08009fa9
 8009f98:	08009fb7 	.word	0x08009fb7
 8009f9c:	08009fcd 	.word	0x08009fcd
 8009fa0:	08009feb 	.word	0x08009feb
 8009fa4:	08009feb 	.word	0x08009feb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fa8:	4b81      	ldr	r3, [pc, #516]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	4a80      	ldr	r2, [pc, #512]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fb4:	e01a      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fba:	3308      	adds	r3, #8
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f002 f9f6 	bl	800c3b0 <RCCEx_PLL2_Config>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fca:	e00f      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fd0:	3328      	adds	r3, #40	@ 0x28
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f002 fa9d 	bl	800c514 <RCCEx_PLL3_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe0:	e004      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009fe8:	e000      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10a      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009ff4:	4b6e      	ldr	r3, [pc, #440]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff8:	f023 0107 	bic.w	r1, r3, #7
 8009ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a002:	4a6b      	ldr	r2, [pc, #428]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a004:	430b      	orrs	r3, r1
 800a006:	6513      	str	r3, [r2, #80]	@ 0x50
 800a008:	e003      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a00a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a00e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800a01e:	f04f 0b00 	mov.w	fp, #0
 800a022:	ea5a 030b 	orrs.w	r3, sl, fp
 800a026:	d05b      	beq.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a02c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a030:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a034:	d03b      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a036:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a03a:	d834      	bhi.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a03c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a040:	d037      	beq.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a042:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a046:	d82e      	bhi.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a048:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a04c:	d033      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a04e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a052:	d828      	bhi.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a054:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a058:	d01a      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a05a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a05e:	d822      	bhi.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a064:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a068:	d007      	beq.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a06a:	e01c      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a06c:	4b50      	ldr	r3, [pc, #320]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a070:	4a4f      	ldr	r2, [pc, #316]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a076:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a078:	e01e      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07e:	3308      	adds	r3, #8
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f002 f994 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a088:	4603      	mov	r3, r0
 800a08a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a08e:	e013      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a094:	3328      	adds	r3, #40	@ 0x28
 800a096:	2100      	movs	r1, #0
 800a098:	4618      	mov	r0, r3
 800a09a:	f002 fa3b 	bl	800c514 <RCCEx_PLL3_Config>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0a4:	e008      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a0ac:	e004      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0ae:	bf00      	nop
 800a0b0:	e002      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10b      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a0c0:	4b3b      	ldr	r3, [pc, #236]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0c4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800a0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0d0:	4a37      	ldr	r2, [pc, #220]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0d6:	e003      	b.n	800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a0dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800a0ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a0f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a0fa:	460b      	mov	r3, r1
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	d05d      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a104:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a108:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a10c:	d03b      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a10e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a112:	d834      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a114:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a118:	d037      	beq.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a11a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a11e:	d82e      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a120:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a124:	d033      	beq.n	800a18e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a126:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a12a:	d828      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a12c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a130:	d01a      	beq.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a136:	d822      	bhi.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d003      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a13c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a140:	d007      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a142:	e01c      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a144:	4b1a      	ldr	r3, [pc, #104]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a148:	4a19      	ldr	r2, [pc, #100]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a14a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a14e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a150:	e01e      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a156:	3308      	adds	r3, #8
 800a158:	2100      	movs	r1, #0
 800a15a:	4618      	mov	r0, r3
 800a15c:	f002 f928 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a160:	4603      	mov	r3, r0
 800a162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a166:	e013      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16c:	3328      	adds	r3, #40	@ 0x28
 800a16e:	2100      	movs	r1, #0
 800a170:	4618      	mov	r0, r3
 800a172:	f002 f9cf 	bl	800c514 <RCCEx_PLL3_Config>
 800a176:	4603      	mov	r3, r0
 800a178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a17c:	e008      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a184:	e004      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a186:	bf00      	nop
 800a188:	e002      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a18a:	bf00      	nop
 800a18c:	e000      	b.n	800a190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a18e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a190:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10d      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a198:	4b05      	ldr	r3, [pc, #20]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a19a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a19c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800a1a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a1a8:	4a01      	ldr	r2, [pc, #4]	@ (800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1aa:	430b      	orrs	r3, r1
 800a1ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800a1ae:	e005      	b.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a1b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a1b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a1c8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a1d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	d03a      	beq.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1e2:	2b30      	cmp	r3, #48	@ 0x30
 800a1e4:	d01f      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a1e6:	2b30      	cmp	r3, #48	@ 0x30
 800a1e8:	d819      	bhi.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d00c      	beq.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a1ee:	2b20      	cmp	r3, #32
 800a1f0:	d815      	bhi.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d019      	beq.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a1f6:	2b10      	cmp	r3, #16
 800a1f8:	d111      	bne.n	800a21e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1fa:	4baa      	ldr	r3, [pc, #680]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1fe:	4aa9      	ldr	r2, [pc, #676]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a206:	e011      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a20c:	3308      	adds	r3, #8
 800a20e:	2102      	movs	r1, #2
 800a210:	4618      	mov	r0, r3
 800a212:	f002 f8cd 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a216:	4603      	mov	r3, r0
 800a218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a21c:	e006      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a224:	e002      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a226:	bf00      	nop
 800a228:	e000      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a22a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a22c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10a      	bne.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a234:	4b9b      	ldr	r3, [pc, #620]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a238:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a242:	4a98      	ldr	r2, [pc, #608]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a244:	430b      	orrs	r3, r1
 800a246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a248:	e003      	b.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a24a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a24e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a25e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a262:	2300      	movs	r3, #0
 800a264:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a268:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a26c:	460b      	mov	r3, r1
 800a26e:	4313      	orrs	r3, r2
 800a270:	d051      	beq.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a27c:	d035      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a27e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a282:	d82e      	bhi.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a284:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a288:	d031      	beq.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a28a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a28e:	d828      	bhi.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a294:	d01a      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a29a:	d822      	bhi.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d003      	beq.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a2a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2a4:	d007      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a2a6:	e01c      	b.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2a8:	4b7e      	ldr	r3, [pc, #504]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ac:	4a7d      	ldr	r2, [pc, #500]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2b4:	e01c      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	2100      	movs	r1, #0
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f002 f876 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2ca:	e011      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2d0:	3328      	adds	r3, #40	@ 0x28
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f002 f91d 	bl	800c514 <RCCEx_PLL3_Config>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2e0:	e006      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a2e8:	e002      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a2ea:	bf00      	nop
 800a2ec:	e000      	b.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a2ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10a      	bne.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a2f8:	4b6a      	ldr	r3, [pc, #424]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a306:	4a67      	ldr	r2, [pc, #412]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a308:	430b      	orrs	r3, r1
 800a30a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a30c:	e003      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a30e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a312:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a322:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a326:	2300      	movs	r3, #0
 800a328:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a32c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a330:	460b      	mov	r3, r1
 800a332:	4313      	orrs	r3, r2
 800a334:	d053      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a33a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a33c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a340:	d033      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a342:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a346:	d82c      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a348:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a34c:	d02f      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a34e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a352:	d826      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a358:	d02b      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a35a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a35e:	d820      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a364:	d012      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a36a:	d81a      	bhi.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d022      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a374:	d115      	bne.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37a:	3308      	adds	r3, #8
 800a37c:	2101      	movs	r1, #1
 800a37e:	4618      	mov	r0, r3
 800a380:	f002 f816 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a38a:	e015      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a390:	3328      	adds	r3, #40	@ 0x28
 800a392:	2101      	movs	r1, #1
 800a394:	4618      	mov	r0, r3
 800a396:	f002 f8bd 	bl	800c514 <RCCEx_PLL3_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3a0:	e00a      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a3a8:	e006      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3aa:	bf00      	nop
 800a3ac:	e004      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3ae:	bf00      	nop
 800a3b0:	e002      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3b2:	bf00      	nop
 800a3b4:	e000      	b.n	800a3b8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10a      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3c0:	4b38      	ldr	r3, [pc, #224]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ce:	4a35      	ldr	r2, [pc, #212]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3d0:	430b      	orrs	r3, r1
 800a3d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a3d4:	e003      	b.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a3da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a3ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a3f4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	d058      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a402:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a40a:	d033      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a40c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a410:	d82c      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a416:	d02f      	beq.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a41c:	d826      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a41e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a422:	d02b      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a424:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a428:	d820      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a42a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a42e:	d012      	beq.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a434:	d81a      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d022      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a43a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a43e:	d115      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a444:	3308      	adds	r3, #8
 800a446:	2101      	movs	r1, #1
 800a448:	4618      	mov	r0, r3
 800a44a:	f001 ffb1 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a44e:	4603      	mov	r3, r0
 800a450:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a454:	e015      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a45a:	3328      	adds	r3, #40	@ 0x28
 800a45c:	2101      	movs	r1, #1
 800a45e:	4618      	mov	r0, r3
 800a460:	f002 f858 	bl	800c514 <RCCEx_PLL3_Config>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a46a:	e00a      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a472:	e006      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a474:	bf00      	nop
 800a476:	e004      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a478:	bf00      	nop
 800a47a:	e002      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a47c:	bf00      	nop
 800a47e:	e000      	b.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a480:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10e      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a48a:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a48c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a48e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a49a:	4a02      	ldr	r2, [pc, #8]	@ (800a4a4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a49c:	430b      	orrs	r3, r1
 800a49e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4a0:	e006      	b.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a4a2:	bf00      	nop
 800a4a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a4ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a4bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a4c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	d037      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a4d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4da:	d00e      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a4dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4e0:	d816      	bhi.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d018      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a4e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ea:	d111      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4ec:	4bc4      	ldr	r3, [pc, #784]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f0:	4ac3      	ldr	r2, [pc, #780]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a4f8:	e00f      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4fe:	3308      	adds	r3, #8
 800a500:	2101      	movs	r1, #1
 800a502:	4618      	mov	r0, r3
 800a504:	f001 ff54 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a508:	4603      	mov	r3, r0
 800a50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a50e:	e004      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a516:	e000      	b.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a51a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10a      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a522:	4bb7      	ldr	r3, [pc, #732]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a524:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a526:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a530:	4ab3      	ldr	r2, [pc, #716]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a532:	430b      	orrs	r3, r1
 800a534:	6513      	str	r3, [r2, #80]	@ 0x50
 800a536:	e003      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a53c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a548:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a54c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a550:	2300      	movs	r3, #0
 800a552:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a556:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a55a:	460b      	mov	r3, r1
 800a55c:	4313      	orrs	r3, r2
 800a55e:	d039      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a566:	2b03      	cmp	r3, #3
 800a568:	d81c      	bhi.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a56a:	a201      	add	r2, pc, #4	@ (adr r2, 800a570 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a570:	0800a5ad 	.word	0x0800a5ad
 800a574:	0800a581 	.word	0x0800a581
 800a578:	0800a58f 	.word	0x0800a58f
 800a57c:	0800a5ad 	.word	0x0800a5ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a580:	4b9f      	ldr	r3, [pc, #636]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a584:	4a9e      	ldr	r2, [pc, #632]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a58a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a58c:	e00f      	b.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a592:	3308      	adds	r3, #8
 800a594:	2102      	movs	r1, #2
 800a596:	4618      	mov	r0, r3
 800a598:	f001 ff0a 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5a2:	e004      	b.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a5aa:	e000      	b.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a5ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d10a      	bne.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5b6:	4b92      	ldr	r3, [pc, #584]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5ba:	f023 0103 	bic.w	r1, r3, #3
 800a5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a5c4:	4a8e      	ldr	r2, [pc, #568]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5c6:	430b      	orrs	r3, r1
 800a5c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5ca:	e003      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a5d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a5e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a5ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	f000 8099 	beq.w	800a728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5f6:	4b83      	ldr	r3, [pc, #524]	@ (800a804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a82      	ldr	r2, [pc, #520]	@ (800a804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a5fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a600:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a602:	f7f8 faf9 	bl	8002bf8 <HAL_GetTick>
 800a606:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a60a:	e00b      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a60c:	f7f8 faf4 	bl	8002bf8 <HAL_GetTick>
 800a610:	4602      	mov	r2, r0
 800a612:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b64      	cmp	r3, #100	@ 0x64
 800a61a:	d903      	bls.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a622:	e005      	b.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a624:	4b77      	ldr	r3, [pc, #476]	@ (800a804 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0ed      	beq.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a634:	2b00      	cmp	r3, #0
 800a636:	d173      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a638:	4b71      	ldr	r3, [pc, #452]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a63a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a640:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a644:	4053      	eors	r3, r2
 800a646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d015      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a64e:	4b6c      	ldr	r3, [pc, #432]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a656:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a65a:	4b69      	ldr	r3, [pc, #420]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a65c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a65e:	4a68      	ldr	r2, [pc, #416]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a664:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a666:	4b66      	ldr	r3, [pc, #408]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66a:	4a65      	ldr	r2, [pc, #404]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a66c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a670:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a672:	4a63      	ldr	r2, [pc, #396]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a674:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a678:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a67e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a686:	d118      	bne.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a688:	f7f8 fab6 	bl	8002bf8 <HAL_GetTick>
 800a68c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a690:	e00d      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a692:	f7f8 fab1 	bl	8002bf8 <HAL_GetTick>
 800a696:	4602      	mov	r2, r0
 800a698:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a69c:	1ad2      	subs	r2, r2, r3
 800a69e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d903      	bls.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800a6ac:	e005      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ae:	4b54      	ldr	r3, [pc, #336]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0eb      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d129      	bne.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a6d2:	d10e      	bne.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a6d4:	4b4a      	ldr	r3, [pc, #296]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a6e4:	091a      	lsrs	r2, r3, #4
 800a6e6:	4b48      	ldr	r3, [pc, #288]	@ (800a808 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	4a45      	ldr	r2, [pc, #276]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	6113      	str	r3, [r2, #16]
 800a6f0:	e005      	b.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a6f2:	4b43      	ldr	r3, [pc, #268]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	4a42      	ldr	r2, [pc, #264]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a6fc:	6113      	str	r3, [r2, #16]
 800a6fe:	4b40      	ldr	r3, [pc, #256]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a700:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a706:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a70a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a70e:	4a3c      	ldr	r2, [pc, #240]	@ (800a800 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a710:	430b      	orrs	r3, r1
 800a712:	6713      	str	r3, [r2, #112]	@ 0x70
 800a714:	e008      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a716:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a71a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800a71e:	e003      	b.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f002 0301 	and.w	r3, r2, #1
 800a734:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a738:	2300      	movs	r3, #0
 800a73a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a73e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a742:	460b      	mov	r3, r1
 800a744:	4313      	orrs	r3, r2
 800a746:	f000 808f 	beq.w	800a868 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a74e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a750:	2b28      	cmp	r3, #40	@ 0x28
 800a752:	d871      	bhi.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a754:	a201      	add	r2, pc, #4	@ (adr r2, 800a75c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75a:	bf00      	nop
 800a75c:	0800a841 	.word	0x0800a841
 800a760:	0800a839 	.word	0x0800a839
 800a764:	0800a839 	.word	0x0800a839
 800a768:	0800a839 	.word	0x0800a839
 800a76c:	0800a839 	.word	0x0800a839
 800a770:	0800a839 	.word	0x0800a839
 800a774:	0800a839 	.word	0x0800a839
 800a778:	0800a839 	.word	0x0800a839
 800a77c:	0800a80d 	.word	0x0800a80d
 800a780:	0800a839 	.word	0x0800a839
 800a784:	0800a839 	.word	0x0800a839
 800a788:	0800a839 	.word	0x0800a839
 800a78c:	0800a839 	.word	0x0800a839
 800a790:	0800a839 	.word	0x0800a839
 800a794:	0800a839 	.word	0x0800a839
 800a798:	0800a839 	.word	0x0800a839
 800a79c:	0800a823 	.word	0x0800a823
 800a7a0:	0800a839 	.word	0x0800a839
 800a7a4:	0800a839 	.word	0x0800a839
 800a7a8:	0800a839 	.word	0x0800a839
 800a7ac:	0800a839 	.word	0x0800a839
 800a7b0:	0800a839 	.word	0x0800a839
 800a7b4:	0800a839 	.word	0x0800a839
 800a7b8:	0800a839 	.word	0x0800a839
 800a7bc:	0800a841 	.word	0x0800a841
 800a7c0:	0800a839 	.word	0x0800a839
 800a7c4:	0800a839 	.word	0x0800a839
 800a7c8:	0800a839 	.word	0x0800a839
 800a7cc:	0800a839 	.word	0x0800a839
 800a7d0:	0800a839 	.word	0x0800a839
 800a7d4:	0800a839 	.word	0x0800a839
 800a7d8:	0800a839 	.word	0x0800a839
 800a7dc:	0800a841 	.word	0x0800a841
 800a7e0:	0800a839 	.word	0x0800a839
 800a7e4:	0800a839 	.word	0x0800a839
 800a7e8:	0800a839 	.word	0x0800a839
 800a7ec:	0800a839 	.word	0x0800a839
 800a7f0:	0800a839 	.word	0x0800a839
 800a7f4:	0800a839 	.word	0x0800a839
 800a7f8:	0800a839 	.word	0x0800a839
 800a7fc:	0800a841 	.word	0x0800a841
 800a800:	58024400 	.word	0x58024400
 800a804:	58024800 	.word	0x58024800
 800a808:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a810:	3308      	adds	r3, #8
 800a812:	2101      	movs	r1, #1
 800a814:	4618      	mov	r0, r3
 800a816:	f001 fdcb 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a81a:	4603      	mov	r3, r0
 800a81c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a820:	e00f      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a826:	3328      	adds	r3, #40	@ 0x28
 800a828:	2101      	movs	r1, #1
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 fe72 	bl	800c514 <RCCEx_PLL3_Config>
 800a830:	4603      	mov	r3, r0
 800a832:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a836:	e004      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a83e:	e000      	b.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a840:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a846:	2b00      	cmp	r3, #0
 800a848:	d10a      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a84a:	4bbf      	ldr	r3, [pc, #764]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a84c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a84e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a856:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a858:	4abb      	ldr	r2, [pc, #748]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a85a:	430b      	orrs	r3, r1
 800a85c:	6553      	str	r3, [r2, #84]	@ 0x54
 800a85e:	e003      	b.n	800a868 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a864:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 0302 	and.w	r3, r2, #2
 800a874:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a878:	2300      	movs	r3, #0
 800a87a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a87e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a882:	460b      	mov	r3, r1
 800a884:	4313      	orrs	r3, r2
 800a886:	d041      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a88e:	2b05      	cmp	r3, #5
 800a890:	d824      	bhi.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a892:	a201      	add	r2, pc, #4	@ (adr r2, 800a898 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a898:	0800a8e5 	.word	0x0800a8e5
 800a89c:	0800a8b1 	.word	0x0800a8b1
 800a8a0:	0800a8c7 	.word	0x0800a8c7
 800a8a4:	0800a8e5 	.word	0x0800a8e5
 800a8a8:	0800a8e5 	.word	0x0800a8e5
 800a8ac:	0800a8e5 	.word	0x0800a8e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	2101      	movs	r1, #1
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f001 fd79 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8c4:	e00f      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ca:	3328      	adds	r3, #40	@ 0x28
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f001 fe20 	bl	800c514 <RCCEx_PLL3_Config>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8da:	e004      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a8e2:	e000      	b.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a8e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a8ee:	4b96      	ldr	r3, [pc, #600]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8f2:	f023 0107 	bic.w	r1, r3, #7
 800a8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8fc:	4a92      	ldr	r2, [pc, #584]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a8fe:	430b      	orrs	r3, r1
 800a900:	6553      	str	r3, [r2, #84]	@ 0x54
 800a902:	e003      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a904:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a908:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	f002 0304 	and.w	r3, r2, #4
 800a918:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a91c:	2300      	movs	r3, #0
 800a91e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a922:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a926:	460b      	mov	r3, r1
 800a928:	4313      	orrs	r3, r2
 800a92a:	d044      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a934:	2b05      	cmp	r3, #5
 800a936:	d825      	bhi.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a938:	a201      	add	r2, pc, #4	@ (adr r2, 800a940 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a98d 	.word	0x0800a98d
 800a944:	0800a959 	.word	0x0800a959
 800a948:	0800a96f 	.word	0x0800a96f
 800a94c:	0800a98d 	.word	0x0800a98d
 800a950:	0800a98d 	.word	0x0800a98d
 800a954:	0800a98d 	.word	0x0800a98d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95c:	3308      	adds	r3, #8
 800a95e:	2101      	movs	r1, #1
 800a960:	4618      	mov	r0, r3
 800a962:	f001 fd25 	bl	800c3b0 <RCCEx_PLL2_Config>
 800a966:	4603      	mov	r3, r0
 800a968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a96c:	e00f      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a972:	3328      	adds	r3, #40	@ 0x28
 800a974:	2101      	movs	r1, #1
 800a976:	4618      	mov	r0, r3
 800a978:	f001 fdcc 	bl	800c514 <RCCEx_PLL3_Config>
 800a97c:	4603      	mov	r3, r0
 800a97e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a982:	e004      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800a98a:	e000      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a98c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a98e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10b      	bne.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a996:	4b6c      	ldr	r3, [pc, #432]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a99a:	f023 0107 	bic.w	r1, r3, #7
 800a99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9a6:	4a68      	ldr	r2, [pc, #416]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9a8:	430b      	orrs	r3, r1
 800a9aa:	6593      	str	r3, [r2, #88]	@ 0x58
 800a9ac:	e003      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800a9b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f002 0320 	and.w	r3, r2, #32
 800a9c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a9cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	d055      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9e2:	d033      	beq.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a9e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9e8:	d82c      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ee:	d02f      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f4:	d826      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a9f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a9fa:	d02b      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a9fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa00:	d820      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa06:	d012      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800aa08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa0c:	d81a      	bhi.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d022      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800aa12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa16:	d115      	bne.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa1c:	3308      	adds	r3, #8
 800aa1e:	2100      	movs	r1, #0
 800aa20:	4618      	mov	r0, r3
 800aa22:	f001 fcc5 	bl	800c3b0 <RCCEx_PLL2_Config>
 800aa26:	4603      	mov	r3, r0
 800aa28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa2c:	e015      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa32:	3328      	adds	r3, #40	@ 0x28
 800aa34:	2102      	movs	r1, #2
 800aa36:	4618      	mov	r0, r3
 800aa38:	f001 fd6c 	bl	800c514 <RCCEx_PLL3_Config>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa42:	e00a      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800aa4a:	e006      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa4c:	bf00      	nop
 800aa4e:	e004      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa50:	bf00      	nop
 800aa52:	e002      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa54:	bf00      	nop
 800aa56:	e000      	b.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d10b      	bne.n	800aa7a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa62:	4b39      	ldr	r3, [pc, #228]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aa72:	4a35      	ldr	r2, [pc, #212]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6553      	str	r3, [r2, #84]	@ 0x54
 800aa78:	e003      	b.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800aa7e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800aa8e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800aa92:	2300      	movs	r3, #0
 800aa94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800aa98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	d058      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800aaaa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aaae:	d033      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800aab0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800aab4:	d82c      	bhi.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaba:	d02f      	beq.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aabc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aac0:	d826      	bhi.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aac6:	d02b      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aacc:	d820      	bhi.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aad2:	d012      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800aad4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aad8:	d81a      	bhi.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d022      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800aade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aae2:	d115      	bne.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aae8:	3308      	adds	r3, #8
 800aaea:	2100      	movs	r1, #0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f001 fc5f 	bl	800c3b0 <RCCEx_PLL2_Config>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800aaf8:	e015      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aafe:	3328      	adds	r3, #40	@ 0x28
 800ab00:	2102      	movs	r1, #2
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 fd06 	bl	800c514 <RCCEx_PLL3_Config>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab0e:	e00a      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ab16:	e006      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab18:	bf00      	nop
 800ab1a:	e004      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab1c:	bf00      	nop
 800ab1e:	e002      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab20:	bf00      	nop
 800ab22:	e000      	b.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10e      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab2e:	4b06      	ldr	r3, [pc, #24]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ab36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ab3e:	4a02      	ldr	r2, [pc, #8]	@ (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab40:	430b      	orrs	r3, r1
 800ab42:	6593      	str	r3, [r2, #88]	@ 0x58
 800ab44:	e006      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ab46:	bf00      	nop
 800ab48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ab50:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ab60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab64:	2300      	movs	r3, #0
 800ab66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ab6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d055      	beq.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab80:	d033      	beq.n	800abea <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800ab82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800ab86:	d82c      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab8c:	d02f      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800ab8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab92:	d826      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800ab94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab98:	d02b      	beq.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800ab9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800ab9e:	d820      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800aba0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aba4:	d012      	beq.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800aba6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abaa:	d81a      	bhi.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d022      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800abb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abb4:	d115      	bne.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abba:	3308      	adds	r3, #8
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fbf6 	bl	800c3b0 <RCCEx_PLL2_Config>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abca:	e015      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd0:	3328      	adds	r3, #40	@ 0x28
 800abd2:	2102      	movs	r1, #2
 800abd4:	4618      	mov	r0, r3
 800abd6:	f001 fc9d 	bl	800c514 <RCCEx_PLL3_Config>
 800abda:	4603      	mov	r3, r0
 800abdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abe0:	e00a      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800abe8:	e006      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abea:	bf00      	nop
 800abec:	e004      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abee:	bf00      	nop
 800abf0:	e002      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abf2:	bf00      	nop
 800abf4:	e000      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800abf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abf8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10b      	bne.n	800ac18 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac00:	4ba0      	ldr	r3, [pc, #640]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac10:	4a9c      	ldr	r2, [pc, #624]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac12:	430b      	orrs	r3, r1
 800ac14:	6593      	str	r3, [r2, #88]	@ 0x58
 800ac16:	e003      	b.n	800ac20 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ac1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ac20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac28:	f002 0308 	and.w	r3, r2, #8
 800ac2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ac30:	2300      	movs	r3, #0
 800ac32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ac36:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	d01e      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ac40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac4c:	d10c      	bne.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac52:	3328      	adds	r3, #40	@ 0x28
 800ac54:	2102      	movs	r1, #2
 800ac56:	4618      	mov	r0, r3
 800ac58:	f001 fc5c 	bl	800c514 <RCCEx_PLL3_Config>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d002      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ac68:	4b86      	ldr	r3, [pc, #536]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac78:	4a82      	ldr	r2, [pc, #520]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f002 0310 	and.w	r3, r2, #16
 800ac8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ac94:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ac98:	460b      	mov	r3, r1
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	d01e      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ac9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acaa:	d10c      	bne.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb0:	3328      	adds	r3, #40	@ 0x28
 800acb2:	2102      	movs	r1, #2
 800acb4:	4618      	mov	r0, r3
 800acb6:	f001 fc2d 	bl	800c514 <RCCEx_PLL3_Config>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d002      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800acc6:	4b6f      	ldr	r3, [pc, #444]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800acd6:	4a6b      	ldr	r2, [pc, #428]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acd8:	430b      	orrs	r3, r1
 800acda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ace4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ace8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800acea:	2300      	movs	r3, #0
 800acec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800acee:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800acf2:	460b      	mov	r3, r1
 800acf4:	4313      	orrs	r3, r2
 800acf6:	d03e      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800acf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad04:	d022      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ad06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad0a:	d81b      	bhi.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ad10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad14:	d00b      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ad16:	e015      	b.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1c:	3308      	adds	r3, #8
 800ad1e:	2100      	movs	r1, #0
 800ad20:	4618      	mov	r0, r3
 800ad22:	f001 fb45 	bl	800c3b0 <RCCEx_PLL2_Config>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad2c:	e00f      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad32:	3328      	adds	r3, #40	@ 0x28
 800ad34:	2102      	movs	r1, #2
 800ad36:	4618      	mov	r0, r3
 800ad38:	f001 fbec 	bl	800c514 <RCCEx_PLL3_Config>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad42:	e004      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ad4a:	e000      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ad4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10b      	bne.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad56:	4b4b      	ldr	r3, [pc, #300]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800ad5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ad66:	4a47      	ldr	r2, [pc, #284]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad68:	430b      	orrs	r3, r1
 800ad6a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad6c:	e003      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ad72:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800ad82:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad84:	2300      	movs	r3, #0
 800ad86:	677b      	str	r3, [r7, #116]	@ 0x74
 800ad88:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ad8c:	460b      	mov	r3, r1
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	d03b      	beq.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad9e:	d01f      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ada0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ada4:	d818      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800ada6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adaa:	d003      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800adac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800adb0:	d007      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800adb2:	e011      	b.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adb4:	4b33      	ldr	r3, [pc, #204]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	4a32      	ldr	r2, [pc, #200]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800adbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800adc0:	e00f      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adc6:	3328      	adds	r3, #40	@ 0x28
 800adc8:	2101      	movs	r1, #1
 800adca:	4618      	mov	r0, r3
 800adcc:	f001 fba2 	bl	800c514 <RCCEx_PLL3_Config>
 800add0:	4603      	mov	r3, r0
 800add2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800add6:	e004      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800adde:	e000      	b.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ade0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ade2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d10b      	bne.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800adea:	4b26      	ldr	r3, [pc, #152]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800adfa:	4a22      	ldr	r2, [pc, #136]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adfc:	430b      	orrs	r3, r1
 800adfe:	6553      	str	r3, [r2, #84]	@ 0x54
 800ae00:	e003      	b.n	800ae0a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae06:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ae16:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ae18:	2300      	movs	r3, #0
 800ae1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae1c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ae20:	460b      	mov	r3, r1
 800ae22:	4313      	orrs	r3, r2
 800ae24:	d034      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ae30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae34:	d007      	beq.n	800ae46 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ae36:	e011      	b.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae38:	4b12      	ldr	r3, [pc, #72]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3c:	4a11      	ldr	r2, [pc, #68]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae44:	e00e      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	2102      	movs	r1, #2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f001 faae 	bl	800c3b0 <RCCEx_PLL2_Config>
 800ae54:	4603      	mov	r3, r0
 800ae56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae5a:	e003      	b.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ae62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10d      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ae6c:	4b05      	ldr	r3, [pc, #20]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae70:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae7a:	4a02      	ldr	r2, [pc, #8]	@ (800ae84 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae7c:	430b      	orrs	r3, r1
 800ae7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ae80:	e006      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ae82:	bf00      	nop
 800ae84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ae8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ae90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800ae9c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae9e:	2300      	movs	r3, #0
 800aea0:	667b      	str	r3, [r7, #100]	@ 0x64
 800aea2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800aea6:	460b      	mov	r3, r1
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	d00c      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeb0:	3328      	adds	r3, #40	@ 0x28
 800aeb2:	2102      	movs	r1, #2
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f001 fb2d 	bl	800c514 <RCCEx_PLL3_Config>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aece:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800aed2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aed4:	2300      	movs	r3, #0
 800aed6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aed8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800aedc:	460b      	mov	r3, r1
 800aede:	4313      	orrs	r3, r2
 800aee0:	d036      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800aee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aee6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeec:	d018      	beq.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800aeee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aef2:	d811      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800aef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aef8:	d014      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800aefa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aefe:	d80b      	bhi.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d011      	beq.n	800af28 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800af04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af08:	d106      	bne.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af0a:	4bb7      	ldr	r3, [pc, #732]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af0e:	4ab6      	ldr	r2, [pc, #728]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800af14:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af16:	e008      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800af1e:	e004      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af20:	bf00      	nop
 800af22:	e002      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af24:	bf00      	nop
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af32:	4bad      	ldr	r3, [pc, #692]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af36:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af40:	4aa9      	ldr	r2, [pc, #676]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af42:	430b      	orrs	r3, r1
 800af44:	6553      	str	r3, [r2, #84]	@ 0x54
 800af46:	e003      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800af4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800af5c:	653b      	str	r3, [r7, #80]	@ 0x50
 800af5e:	2300      	movs	r3, #0
 800af60:	657b      	str	r3, [r7, #84]	@ 0x54
 800af62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800af66:	460b      	mov	r3, r1
 800af68:	4313      	orrs	r3, r2
 800af6a:	d009      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800af6c:	4b9e      	ldr	r3, [pc, #632]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af7a:	4a9b      	ldr	r2, [pc, #620]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af7c:	430b      	orrs	r3, r1
 800af7e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800af8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af8e:	2300      	movs	r3, #0
 800af90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af92:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800af96:	460b      	mov	r3, r1
 800af98:	4313      	orrs	r3, r2
 800af9a:	d009      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800af9c:	4b92      	ldr	r3, [pc, #584]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800afa0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800afa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afa8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800afaa:	4a8f      	ldr	r2, [pc, #572]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afac:	430b      	orrs	r3, r1
 800afae:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800afb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800afbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800afbe:	2300      	movs	r3, #0
 800afc0:	647b      	str	r3, [r7, #68]	@ 0x44
 800afc2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d00e      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800afcc:	4b86      	ldr	r3, [pc, #536]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	4a85      	ldr	r2, [pc, #532]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800afd6:	6113      	str	r3, [r2, #16]
 800afd8:	4b83      	ldr	r3, [pc, #524]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afda:	6919      	ldr	r1, [r3, #16]
 800afdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afe0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800afe4:	4a80      	ldr	r2, [pc, #512]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afe6:	430b      	orrs	r3, r1
 800afe8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800afea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800aff6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aff8:	2300      	movs	r3, #0
 800affa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800affc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800b000:	460b      	mov	r3, r1
 800b002:	4313      	orrs	r3, r2
 800b004:	d009      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b006:	4b78      	ldr	r3, [pc, #480]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b00a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800b00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b014:	4a74      	ldr	r2, [pc, #464]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b016:	430b      	orrs	r3, r1
 800b018:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800b026:	633b      	str	r3, [r7, #48]	@ 0x30
 800b028:	2300      	movs	r3, #0
 800b02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800b030:	460b      	mov	r3, r1
 800b032:	4313      	orrs	r3, r2
 800b034:	d00a      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b036:	4b6c      	ldr	r3, [pc, #432]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b03a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800b03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b046:	4a68      	ldr	r2, [pc, #416]	@ (800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b048:	430b      	orrs	r3, r1
 800b04a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b054:	2100      	movs	r1, #0
 800b056:	62b9      	str	r1, [r7, #40]	@ 0x28
 800b058:	f003 0301 	and.w	r3, r3, #1
 800b05c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b05e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800b062:	460b      	mov	r3, r1
 800b064:	4313      	orrs	r3, r2
 800b066:	d011      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b06c:	3308      	adds	r3, #8
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f001 f99d 	bl	800c3b0 <RCCEx_PLL2_Config>
 800b076:	4603      	mov	r3, r0
 800b078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b07c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b084:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b088:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b094:	2100      	movs	r1, #0
 800b096:	6239      	str	r1, [r7, #32]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b09e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	d011      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f001 f97d 	bl	800c3b0 <RCCEx_PLL2_Config>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b0c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	61b9      	str	r1, [r7, #24]
 800b0d8:	f003 0304 	and.w	r3, r3, #4
 800b0dc:	61fb      	str	r3, [r7, #28]
 800b0de:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	d011      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	2102      	movs	r1, #2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f001 f95d 	bl	800c3b0 <RCCEx_PLL2_Config>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b100:	2b00      	cmp	r3, #0
 800b102:	d003      	beq.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b104:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b108:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b114:	2100      	movs	r1, #0
 800b116:	6139      	str	r1, [r7, #16]
 800b118:	f003 0308 	and.w	r3, r3, #8
 800b11c:	617b      	str	r3, [r7, #20]
 800b11e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b122:	460b      	mov	r3, r1
 800b124:	4313      	orrs	r3, r2
 800b126:	d011      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b12c:	3328      	adds	r3, #40	@ 0x28
 800b12e:	2100      	movs	r1, #0
 800b130:	4618      	mov	r0, r3
 800b132:	f001 f9ef 	bl	800c514 <RCCEx_PLL3_Config>
 800b136:	4603      	mov	r3, r0
 800b138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800b13c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b140:	2b00      	cmp	r3, #0
 800b142:	d003      	beq.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b144:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b148:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	2100      	movs	r1, #0
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	f003 0310 	and.w	r3, r3, #16
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b162:	460b      	mov	r3, r1
 800b164:	4313      	orrs	r3, r2
 800b166:	d011      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b16c:	3328      	adds	r3, #40	@ 0x28
 800b16e:	2101      	movs	r1, #1
 800b170:	4618      	mov	r0, r3
 800b172:	f001 f9cf 	bl	800c514 <RCCEx_PLL3_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b17c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b184:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b188:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	2100      	movs	r1, #0
 800b196:	6039      	str	r1, [r7, #0]
 800b198:	f003 0320 	and.w	r3, r3, #32
 800b19c:	607b      	str	r3, [r7, #4]
 800b19e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	d011      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1ac:	3328      	adds	r3, #40	@ 0x28
 800b1ae:	2102      	movs	r1, #2
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f001 f9af 	bl	800c514 <RCCEx_PLL3_Config>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800b1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d003      	beq.n	800b1cc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b1c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800b1cc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	e000      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b1e6:	bf00      	nop
 800b1e8:	58024400 	.word	0x58024400

0800b1ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b090      	sub	sp, #64	@ 0x40
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b1fe:	430b      	orrs	r3, r1
 800b200:	f040 8094 	bne.w	800b32c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b204:	4b9b      	ldr	r3, [pc, #620]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b208:	f003 0307 	and.w	r3, r3, #7
 800b20c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	2b04      	cmp	r3, #4
 800b212:	f200 8087 	bhi.w	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b216:	a201      	add	r2, pc, #4	@ (adr r2, 800b21c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21c:	0800b231 	.word	0x0800b231
 800b220:	0800b259 	.word	0x0800b259
 800b224:	0800b281 	.word	0x0800b281
 800b228:	0800b31d 	.word	0x0800b31d
 800b22c:	0800b2a9 	.word	0x0800b2a9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b230:	4b90      	ldr	r3, [pc, #576]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b238:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b23c:	d108      	bne.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b23e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b242:	4618      	mov	r0, r3
 800b244:	f000 ff62 	bl	800c10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24c:	f000 bc93 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b254:	f000 bc8f 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b258:	4b86      	ldr	r3, [pc, #536]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b260:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b264:	d108      	bne.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b266:	f107 0318 	add.w	r3, r7, #24
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 fca6 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b274:	f000 bc7f 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b278:	2300      	movs	r3, #0
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b27c:	f000 bc7b 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b280:	4b7c      	ldr	r3, [pc, #496]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b28c:	d108      	bne.n	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b28e:	f107 030c 	add.w	r3, r7, #12
 800b292:	4618      	mov	r0, r3
 800b294:	f000 fde6 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b29c:	f000 bc6b 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2a4:	f000 bc67 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2a8:	4b72      	ldr	r3, [pc, #456]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b2ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b2b0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2b2:	4b70      	ldr	r3, [pc, #448]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b04      	cmp	r3, #4
 800b2bc:	d10c      	bne.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b2be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d109      	bne.n	800b2d8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c4:	4b6b      	ldr	r3, [pc, #428]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	08db      	lsrs	r3, r3, #3
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	4a6a      	ldr	r2, [pc, #424]	@ (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2d6:	e01f      	b.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2d8:	4b66      	ldr	r3, [pc, #408]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2e4:	d106      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2ec:	d102      	bne.n	800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2ee:	4b63      	ldr	r3, [pc, #396]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2f2:	e011      	b.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2f4:	4b5f      	ldr	r3, [pc, #380]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b300:	d106      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b308:	d102      	bne.n	800b310 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b30a:	4b5d      	ldr	r3, [pc, #372]	@ (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b30c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b30e:	e003      	b.n	800b318 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b314:	f000 bc2f 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b318:	f000 bc2d 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b31c:	4b59      	ldr	r3, [pc, #356]	@ (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b320:	f000 bc29 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b328:	f000 bc25 	b.w	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b330:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b334:	430b      	orrs	r3, r1
 800b336:	f040 80a7 	bne.w	800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b33a:	4b4e      	ldr	r3, [pc, #312]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b33c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b33e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800b342:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b346:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b34a:	d054      	beq.n	800b3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b352:	f200 808b 	bhi.w	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b358:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b35c:	f000 8083 	beq.w	800b466 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b366:	f200 8081 	bhi.w	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b36a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b370:	d02f      	beq.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b378:	d878      	bhi.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d004      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b386:	d012      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b388:	e070      	b.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b38a:	4b3a      	ldr	r3, [pc, #232]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b396:	d107      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 feb5 	bl	800c10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3a6:	e3e6      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ac:	e3e3      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3ae:	4b31      	ldr	r3, [pc, #196]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3ba:	d107      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3bc:	f107 0318 	add.w	r3, r7, #24
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fbfb 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ca:	e3d4      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3d0:	e3d1      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3d2:	4b28      	ldr	r3, [pc, #160]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3de:	d107      	bne.n	800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3e0:	f107 030c 	add.w	r3, r7, #12
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f000 fd3d 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ee:	e3c2      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3f4:	e3bf      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3fe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b400:	4b1c      	ldr	r3, [pc, #112]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b04      	cmp	r3, #4
 800b40a:	d10c      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b412:	4b18      	ldr	r3, [pc, #96]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	08db      	lsrs	r3, r3, #3
 800b418:	f003 0303 	and.w	r3, r3, #3
 800b41c:	4a16      	ldr	r2, [pc, #88]	@ (800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b41e:	fa22 f303 	lsr.w	r3, r2, r3
 800b422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b424:	e01e      	b.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b426:	4b13      	ldr	r3, [pc, #76]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b42e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b432:	d106      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b43a:	d102      	bne.n	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b43c:	4b0f      	ldr	r3, [pc, #60]	@ (800b47c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b440:	e010      	b.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b442:	4b0c      	ldr	r3, [pc, #48]	@ (800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b44a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b44e:	d106      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b456:	d102      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b458:	4b09      	ldr	r3, [pc, #36]	@ (800b480 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45c:	e002      	b.n	800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b462:	e388      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b464:	e387      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b466:	4b07      	ldr	r3, [pc, #28]	@ (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b46a:	e384      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b470:	e381      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b472:	bf00      	nop
 800b474:	58024400 	.word	0x58024400
 800b478:	03d09000 	.word	0x03d09000
 800b47c:	003d0900 	.word	0x003d0900
 800b480:	016e3600 	.word	0x016e3600
 800b484:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800b490:	430b      	orrs	r3, r1
 800b492:	f040 809c 	bne.w	800b5ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b496:	4b9e      	ldr	r3, [pc, #632]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b49a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800b49e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4a6:	d054      	beq.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b4ae:	f200 808b 	bhi.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b4b8:	f000 8083 	beq.w	800b5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b4c2:	f200 8081 	bhi.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4cc:	d02f      	beq.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4d4:	d878      	bhi.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d004      	beq.n	800b4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4e2:	d012      	beq.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b4e4:	e070      	b.n	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4e6:	4b8a      	ldr	r3, [pc, #552]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4f2:	d107      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f000 fe07 	bl	800c10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b502:	e338      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b504:	2300      	movs	r3, #0
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b508:	e335      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b50a:	4b81      	ldr	r3, [pc, #516]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b512:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b516:	d107      	bne.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b518:	f107 0318 	add.w	r3, r7, #24
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fb4d 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b526:	e326      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b52c:	e323      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b52e:	4b78      	ldr	r3, [pc, #480]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b53a:	d107      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b53c:	f107 030c 	add.w	r3, r7, #12
 800b540:	4618      	mov	r0, r3
 800b542:	f000 fc8f 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b54a:	e314      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b54c:	2300      	movs	r3, #0
 800b54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b550:	e311      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b552:	4b6f      	ldr	r3, [pc, #444]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b556:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b55a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b55c:	4b6c      	ldr	r3, [pc, #432]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b04      	cmp	r3, #4
 800b566:	d10c      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b56e:	4b68      	ldr	r3, [pc, #416]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	08db      	lsrs	r3, r3, #3
 800b574:	f003 0303 	and.w	r3, r3, #3
 800b578:	4a66      	ldr	r2, [pc, #408]	@ (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b57a:	fa22 f303 	lsr.w	r3, r2, r3
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b580:	e01e      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b582:	4b63      	ldr	r3, [pc, #396]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b58a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58e:	d106      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b592:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b596:	d102      	bne.n	800b59e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b598:	4b5f      	ldr	r3, [pc, #380]	@ (800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b59c:	e010      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b59e:	4b5c      	ldr	r3, [pc, #368]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5aa:	d106      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b5ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5b2:	d102      	bne.n	800b5ba <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5b4:	4b59      	ldr	r3, [pc, #356]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5b8:	e002      	b.n	800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b5be:	e2da      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5c0:	e2d9      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5c2:	4b57      	ldr	r3, [pc, #348]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5c6:	e2d6      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5cc:	e2d3      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b5ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b5d6:	430b      	orrs	r3, r1
 800b5d8:	f040 80a7 	bne.w	800b72a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b5dc:	4b4c      	ldr	r3, [pc, #304]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5e0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b5e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5ec:	d055      	beq.n	800b69a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5f4:	f200 8096 	bhi.w	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b5fe:	f000 8084 	beq.w	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b604:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b608:	f200 808c 	bhi.w	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b612:	d030      	beq.n	800b676 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b61a:	f200 8083 	bhi.w	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b620:	2b00      	cmp	r3, #0
 800b622:	d004      	beq.n	800b62e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b626:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b62a:	d012      	beq.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b62c:	e07a      	b.n	800b724 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b62e:	4b38      	ldr	r3, [pc, #224]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b636:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b63a:	d107      	bne.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b63c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b640:	4618      	mov	r0, r3
 800b642:	f000 fd63 	bl	800c10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64a:	e294      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b650:	e291      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b652:	4b2f      	ldr	r3, [pc, #188]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b65a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b65e:	d107      	bne.n	800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b660:	f107 0318 	add.w	r3, r7, #24
 800b664:	4618      	mov	r0, r3
 800b666:	f000 faa9 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b66e:	e282      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b674:	e27f      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b676:	4b26      	ldr	r3, [pc, #152]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b67e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b682:	d107      	bne.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b684:	f107 030c 	add.w	r3, r7, #12
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 fbeb 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b692:	e270      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b698:	e26d      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b69a:	4b1d      	ldr	r3, [pc, #116]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b69c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b69e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b6a2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	d10c      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b6b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d109      	bne.n	800b6ca <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6b6:	4b16      	ldr	r3, [pc, #88]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	08db      	lsrs	r3, r3, #3
 800b6bc:	f003 0303 	and.w	r3, r3, #3
 800b6c0:	4a14      	ldr	r2, [pc, #80]	@ (800b714 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b6c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6c8:	e01e      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6ca:	4b11      	ldr	r3, [pc, #68]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b6d6:	d106      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6de:	d102      	bne.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b6e0:	4b0d      	ldr	r3, [pc, #52]	@ (800b718 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b6e4:	e010      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6f2:	d106      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b6f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b6fa:	d102      	bne.n	800b702 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b6fc:	4b07      	ldr	r3, [pc, #28]	@ (800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b700:	e002      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b706:	e236      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b708:	e235      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b70a:	4b05      	ldr	r3, [pc, #20]	@ (800b720 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b70e:	e232      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b710:	58024400 	.word	0x58024400
 800b714:	03d09000 	.word	0x03d09000
 800b718:	003d0900 	.word	0x003d0900
 800b71c:	016e3600 	.word	0x016e3600
 800b720:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b728:	e225      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b72e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b732:	430b      	orrs	r3, r1
 800b734:	f040 8085 	bne.w	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b738:	4b9c      	ldr	r3, [pc, #624]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b73a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b73c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b740:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b748:	d06b      	beq.n	800b822 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b750:	d874      	bhi.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b754:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b758:	d056      	beq.n	800b808 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b75c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b760:	d86c      	bhi.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b764:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b768:	d03b      	beq.n	800b7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b76c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b770:	d864      	bhi.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b774:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b778:	d021      	beq.n	800b7be <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b77a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b77c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b780:	d85c      	bhi.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b784:	2b00      	cmp	r3, #0
 800b786:	d004      	beq.n	800b792 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b78a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b78e:	d004      	beq.n	800b79a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b790:	e054      	b.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b792:	f7fe fb5f 	bl	8009e54 <HAL_RCC_GetPCLK1Freq>
 800b796:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b798:	e1ed      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b79a:	4b84      	ldr	r3, [pc, #528]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7a6:	d107      	bne.n	800b7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7a8:	f107 0318 	add.w	r3, r7, #24
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fa05 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7b6:	e1de      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7bc:	e1db      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7be:	4b7b      	ldr	r3, [pc, #492]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7ca:	d107      	bne.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b7cc:	f107 030c 	add.w	r3, r7, #12
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 fb47 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7da:	e1cc      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7e0:	e1c9      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b7e2:	4b72      	ldr	r3, [pc, #456]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f003 0304 	and.w	r3, r3, #4
 800b7ea:	2b04      	cmp	r3, #4
 800b7ec:	d109      	bne.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7ee:	4b6f      	ldr	r3, [pc, #444]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	08db      	lsrs	r3, r3, #3
 800b7f4:	f003 0303 	and.w	r3, r3, #3
 800b7f8:	4a6d      	ldr	r2, [pc, #436]	@ (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b800:	e1b9      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b806:	e1b6      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b808:	4b68      	ldr	r3, [pc, #416]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b814:	d102      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b816:	4b67      	ldr	r3, [pc, #412]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b81a:	e1ac      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b820:	e1a9      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b822:	4b62      	ldr	r3, [pc, #392]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b82a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b82e:	d102      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b830:	4b61      	ldr	r3, [pc, #388]	@ (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b834:	e19f      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b83a:	e19c      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b840:	e199      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b842:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b846:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b84a:	430b      	orrs	r3, r1
 800b84c:	d173      	bne.n	800b936 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b84e:	4b57      	ldr	r3, [pc, #348]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b852:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b856:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b85a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b85e:	d02f      	beq.n	800b8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b866:	d863      	bhi.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b874:	d012      	beq.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b876:	e05b      	b.n	800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b878:	4b4c      	ldr	r3, [pc, #304]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b884:	d107      	bne.n	800b896 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b886:	f107 0318 	add.w	r3, r7, #24
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 f996 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b894:	e16f      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b89a:	e16c      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b89c:	4b43      	ldr	r3, [pc, #268]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a8:	d107      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8aa:	f107 030c 	add.w	r3, r7, #12
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 fad8 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8b8:	e15d      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8be:	e15a      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8c0:	4b3a      	ldr	r3, [pc, #232]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b8c8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8ca:	4b38      	ldr	r3, [pc, #224]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 0304 	and.w	r3, r3, #4
 800b8d2:	2b04      	cmp	r3, #4
 800b8d4:	d10c      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d109      	bne.n	800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b8dc:	4b33      	ldr	r3, [pc, #204]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	08db      	lsrs	r3, r3, #3
 800b8e2:	f003 0303 	and.w	r3, r3, #3
 800b8e6:	4a32      	ldr	r2, [pc, #200]	@ (800b9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b8e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8ee:	e01e      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b8f0:	4b2e      	ldr	r3, [pc, #184]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8fc:	d106      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b8fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b900:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b904:	d102      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b906:	4b2b      	ldr	r3, [pc, #172]	@ (800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b908:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b90a:	e010      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b90c:	4b27      	ldr	r3, [pc, #156]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b918:	d106      	bne.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b91c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b920:	d102      	bne.n	800b928 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b922:	4b25      	ldr	r3, [pc, #148]	@ (800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b926:	e002      	b.n	800b92e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b92c:	e123      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b92e:	e122      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b934:	e11f      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b93a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b93e:	430b      	orrs	r3, r1
 800b940:	d13c      	bne.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b942:	4b1a      	ldr	r3, [pc, #104]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b94a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d004      	beq.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b958:	d012      	beq.n	800b980 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b95a:	e023      	b.n	800b9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b95c:	4b13      	ldr	r3, [pc, #76]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b968:	d107      	bne.n	800b97a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b96a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b96e:	4618      	mov	r0, r3
 800b970:	f000 fbcc 	bl	800c10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b978:	e0fd      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b97e:	e0fa      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b980:	4b0a      	ldr	r3, [pc, #40]	@ (800b9ac <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b988:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b98c:	d107      	bne.n	800b99e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b98e:	f107 0318 	add.w	r3, r7, #24
 800b992:	4618      	mov	r0, r3
 800b994:	f000 f912 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b998:	6a3b      	ldr	r3, [r7, #32]
 800b99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b99c:	e0eb      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a2:	e0e8      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9a8:	e0e5      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9aa:	bf00      	nop
 800b9ac:	58024400 	.word	0x58024400
 800b9b0:	03d09000 	.word	0x03d09000
 800b9b4:	003d0900 	.word	0x003d0900
 800b9b8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b9bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9c0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b9c4:	430b      	orrs	r3, r1
 800b9c6:	f040 8085 	bne.w	800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b9ca:	4b6d      	ldr	r3, [pc, #436]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b9cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9ce:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b9d2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9da:	d06b      	beq.n	800bab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9e2:	d874      	bhi.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ea:	d056      	beq.n	800ba9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b9ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9f2:	d86c      	bhi.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b9fa:	d03b      	beq.n	800ba74 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ba02:	d864      	bhi.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba0a:	d021      	beq.n	800ba50 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ba0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba12:	d85c      	bhi.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ba1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba20:	d004      	beq.n	800ba2c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ba22:	e054      	b.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba24:	f000 f8b4 	bl	800bb90 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba28:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ba2a:	e0a4      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba2c:	4b54      	ldr	r3, [pc, #336]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ba38:	d107      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba3a:	f107 0318 	add.w	r3, r7, #24
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 f8bc 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba48:	e095      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba4e:	e092      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba50:	4b4b      	ldr	r3, [pc, #300]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba5c:	d107      	bne.n	800ba6e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba5e:	f107 030c 	add.w	r3, r7, #12
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 f9fe 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba6c:	e083      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba72:	e080      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ba74:	4b42      	ldr	r3, [pc, #264]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 0304 	and.w	r3, r3, #4
 800ba7c:	2b04      	cmp	r3, #4
 800ba7e:	d109      	bne.n	800ba94 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba80:	4b3f      	ldr	r3, [pc, #252]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	08db      	lsrs	r3, r3, #3
 800ba86:	f003 0303 	and.w	r3, r3, #3
 800ba8a:	4a3e      	ldr	r2, [pc, #248]	@ (800bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ba8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba92:	e070      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba94:	2300      	movs	r3, #0
 800ba96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba98:	e06d      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ba9a:	4b39      	ldr	r3, [pc, #228]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baa2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baa6:	d102      	bne.n	800baae <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800baa8:	4b37      	ldr	r3, [pc, #220]	@ (800bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800baaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baac:	e063      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baae:	2300      	movs	r3, #0
 800bab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bab2:	e060      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bab4:	4b32      	ldr	r3, [pc, #200]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800babc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bac0:	d102      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800bac2:	4b32      	ldr	r3, [pc, #200]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac6:	e056      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bacc:	e053      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bad2:	e050      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800badc:	430b      	orrs	r3, r1
 800bade:	d148      	bne.n	800bb72 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bae0:	4b27      	ldr	r3, [pc, #156]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bae2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bae4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800bae8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800baea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baf0:	d02a      	beq.n	800bb48 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800baf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baf8:	d838      	bhi.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d004      	beq.n	800bb0a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bb00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb06:	d00d      	beq.n	800bb24 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bb08:	e030      	b.n	800bb6c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb0a:	4b1d      	ldr	r3, [pc, #116]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb16:	d102      	bne.n	800bb1e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bb18:	4b1c      	ldr	r3, [pc, #112]	@ (800bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb1c:	e02b      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb22:	e028      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb24:	4b16      	ldr	r3, [pc, #88]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bb30:	d107      	bne.n	800bb42 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 fae8 	bl	800c10c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb40:	e019      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb46:	e016      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb48:	4b0d      	ldr	r3, [pc, #52]	@ (800bb80 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bb50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bb54:	d107      	bne.n	800bb66 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb56:	f107 0318 	add.w	r3, r7, #24
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 f82e 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb64:	e007      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb6a:	e004      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bb70:	e001      	b.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bb72:	2300      	movs	r3, #0
 800bb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800bb76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3740      	adds	r7, #64	@ 0x40
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	58024400 	.word	0x58024400
 800bb84:	03d09000 	.word	0x03d09000
 800bb88:	003d0900 	.word	0x003d0900
 800bb8c:	016e3600 	.word	0x016e3600

0800bb90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bb94:	f7fe f92e 	bl	8009df4 <HAL_RCC_GetHCLKFreq>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	4b06      	ldr	r3, [pc, #24]	@ (800bbb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bb9c:	6a1b      	ldr	r3, [r3, #32]
 800bb9e:	091b      	lsrs	r3, r3, #4
 800bba0:	f003 0307 	and.w	r3, r3, #7
 800bba4:	4904      	ldr	r1, [pc, #16]	@ (800bbb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bba6:	5ccb      	ldrb	r3, [r1, r3]
 800bba8:	f003 031f 	and.w	r3, r3, #31
 800bbac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	58024400 	.word	0x58024400
 800bbb8:	08012500 	.word	0x08012500

0800bbbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b089      	sub	sp, #36	@ 0x24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbc4:	4ba1      	ldr	r3, [pc, #644]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbc8:	f003 0303 	and.w	r3, r3, #3
 800bbcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bbce:	4b9f      	ldr	r3, [pc, #636]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbd2:	0b1b      	lsrs	r3, r3, #12
 800bbd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bbd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bbda:	4b9c      	ldr	r3, [pc, #624]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbde:	091b      	lsrs	r3, r3, #4
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bbe6:	4b99      	ldr	r3, [pc, #612]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbea:	08db      	lsrs	r3, r3, #3
 800bbec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	fb02 f303 	mul.w	r3, r2, r3
 800bbf6:	ee07 3a90 	vmov	s15, r3
 800bbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	f000 8111 	beq.w	800be2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	f000 8083 	beq.w	800bd18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	f200 80a1 	bhi.w	800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d056      	beq.n	800bcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc26:	e099      	b.n	800bd5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc28:	4b88      	ldr	r3, [pc, #544]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0320 	and.w	r3, r3, #32
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d02d      	beq.n	800bc90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc34:	4b85      	ldr	r3, [pc, #532]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	08db      	lsrs	r3, r3, #3
 800bc3a:	f003 0303 	and.w	r3, r3, #3
 800bc3e:	4a84      	ldr	r2, [pc, #528]	@ (800be50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc40:	fa22 f303 	lsr.w	r3, r2, r3
 800bc44:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	ee07 3a90 	vmov	s15, r3
 800bc4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	ee07 3a90 	vmov	s15, r3
 800bc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5e:	4b7b      	ldr	r3, [pc, #492]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc66:	ee07 3a90 	vmov	s15, r3
 800bc6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bc8e:	e087      	b.n	800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	ee07 3a90 	vmov	s15, r3
 800bc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800be58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bc9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bca2:	4b6a      	ldr	r3, [pc, #424]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcaa:	ee07 3a90 	vmov	s15, r3
 800bcae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bcc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcd2:	e065      	b.n	800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bce6:	4b59      	ldr	r3, [pc, #356]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcfa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd16:	e043      	b.n	800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	ee07 3a90 	vmov	s15, r3
 800bd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd2a:	4b48      	ldr	r3, [pc, #288]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd32:	ee07 3a90 	vmov	s15, r3
 800bd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd5a:	e021      	b.n	800bda0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	ee07 3a90 	vmov	s15, r3
 800bd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800be5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd6e:	4b37      	ldr	r3, [pc, #220]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd76:	ee07 3a90 	vmov	s15, r3
 800bd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800be54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bda0:	4b2a      	ldr	r3, [pc, #168]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda4:	0a5b      	lsrs	r3, r3, #9
 800bda6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdba:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdc6:	ee17 2a90 	vmov	r2, s15
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bdce:	4b1f      	ldr	r3, [pc, #124]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdd2:	0c1b      	lsrs	r3, r3, #16
 800bdd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdd8:	ee07 3a90 	vmov	s15, r3
 800bddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bde4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bde8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdf4:	ee17 2a90 	vmov	r2, s15
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bdfc:	4b13      	ldr	r3, [pc, #76]	@ (800be4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be00:	0e1b      	lsrs	r3, r3, #24
 800be02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be06:	ee07 3a90 	vmov	s15, r3
 800be0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800be12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be16:	edd7 6a07 	vldr	s13, [r7, #28]
 800be1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be22:	ee17 2a90 	vmov	r2, s15
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be2a:	e008      	b.n	800be3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2200      	movs	r2, #0
 800be3c:	609a      	str	r2, [r3, #8]
}
 800be3e:	bf00      	nop
 800be40:	3724      	adds	r7, #36	@ 0x24
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	58024400 	.word	0x58024400
 800be50:	03d09000 	.word	0x03d09000
 800be54:	46000000 	.word	0x46000000
 800be58:	4c742400 	.word	0x4c742400
 800be5c:	4a742400 	.word	0x4a742400
 800be60:	4bb71b00 	.word	0x4bb71b00

0800be64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be64:	b480      	push	{r7}
 800be66:	b089      	sub	sp, #36	@ 0x24
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800be6c:	4ba1      	ldr	r3, [pc, #644]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be70:	f003 0303 	and.w	r3, r3, #3
 800be74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800be76:	4b9f      	ldr	r3, [pc, #636]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be7a:	0d1b      	lsrs	r3, r3, #20
 800be7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800be82:	4b9c      	ldr	r3, [pc, #624]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be86:	0a1b      	lsrs	r3, r3, #8
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800be8e:	4b99      	ldr	r3, [pc, #612]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be92:	08db      	lsrs	r3, r3, #3
 800be94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800be98:	693a      	ldr	r2, [r7, #16]
 800be9a:	fb02 f303 	mul.w	r3, r2, r3
 800be9e:	ee07 3a90 	vmov	s15, r3
 800bea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	f000 8111 	beq.w	800c0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	f000 8083 	beq.w	800bfc0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	f200 80a1 	bhi.w	800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d003      	beq.n	800bed0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	2b01      	cmp	r3, #1
 800becc:	d056      	beq.n	800bf7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bece:	e099      	b.n	800c004 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bed0:	4b88      	ldr	r3, [pc, #544]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 0320 	and.w	r3, r3, #32
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d02d      	beq.n	800bf38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bedc:	4b85      	ldr	r3, [pc, #532]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	08db      	lsrs	r3, r3, #3
 800bee2:	f003 0303 	and.w	r3, r3, #3
 800bee6:	4a84      	ldr	r2, [pc, #528]	@ (800c0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bee8:	fa22 f303 	lsr.w	r3, r2, r3
 800beec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	ee07 3a90 	vmov	s15, r3
 800bef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	ee07 3a90 	vmov	s15, r3
 800befe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf06:	4b7b      	ldr	r3, [pc, #492]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf0e:	ee07 3a90 	vmov	s15, r3
 800bf12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf16:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf1a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf36:	e087      	b.n	800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	ee07 3a90 	vmov	s15, r3
 800bf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf42:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800c100 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf4a:	4b6a      	ldr	r3, [pc, #424]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf52:	ee07 3a90 	vmov	s15, r3
 800bf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf5e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bf7a:	e065      	b.n	800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	ee07 3a90 	vmov	s15, r3
 800bf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf86:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bf8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf8e:	4b59      	ldr	r3, [pc, #356]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf96:	ee07 3a90 	vmov	s15, r3
 800bf9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfa2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfbe:	e043      	b.n	800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	ee07 3a90 	vmov	s15, r3
 800bfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800c108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bfce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfd2:	4b48      	ldr	r3, [pc, #288]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfe6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c002:	e021      	b.n	800c048 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	ee07 3a90 	vmov	s15, r3
 800c00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c00e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800c104 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c016:	4b37      	ldr	r3, [pc, #220]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c01a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c026:	ed97 6a03 	vldr	s12, [r7, #12]
 800c02a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c0fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c02e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c03a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c03e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c046:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c048:	4b2a      	ldr	r3, [pc, #168]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04c:	0a5b      	lsrs	r3, r3, #9
 800c04e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c05a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c05e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c062:	edd7 6a07 	vldr	s13, [r7, #28]
 800c066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c06a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c06e:	ee17 2a90 	vmov	r2, s15
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c076:	4b1f      	ldr	r3, [pc, #124]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c07a:	0c1b      	lsrs	r3, r3, #16
 800c07c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c080:	ee07 3a90 	vmov	s15, r3
 800c084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c088:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c08c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c090:	edd7 6a07 	vldr	s13, [r7, #28]
 800c094:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c09c:	ee17 2a90 	vmov	r2, s15
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0a4:	4b13      	ldr	r3, [pc, #76]	@ (800c0f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a8:	0e1b      	lsrs	r3, r3, #24
 800c0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0ae:	ee07 3a90 	vmov	s15, r3
 800c0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0ca:	ee17 2a90 	vmov	r2, s15
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c0d2:	e008      	b.n	800c0e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	609a      	str	r2, [r3, #8]
}
 800c0e6:	bf00      	nop
 800c0e8:	3724      	adds	r7, #36	@ 0x24
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr
 800c0f2:	bf00      	nop
 800c0f4:	58024400 	.word	0x58024400
 800c0f8:	03d09000 	.word	0x03d09000
 800c0fc:	46000000 	.word	0x46000000
 800c100:	4c742400 	.word	0x4c742400
 800c104:	4a742400 	.word	0x4a742400
 800c108:	4bb71b00 	.word	0x4bb71b00

0800c10c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b089      	sub	sp, #36	@ 0x24
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c114:	4ba0      	ldr	r3, [pc, #640]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c118:	f003 0303 	and.w	r3, r3, #3
 800c11c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c11e:	4b9e      	ldr	r3, [pc, #632]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c122:	091b      	lsrs	r3, r3, #4
 800c124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c128:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c12a:	4b9b      	ldr	r3, [pc, #620]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c12e:	f003 0301 	and.w	r3, r3, #1
 800c132:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c134:	4b98      	ldr	r3, [pc, #608]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c138:	08db      	lsrs	r3, r3, #3
 800c13a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	fb02 f303 	mul.w	r3, r2, r3
 800c144:	ee07 3a90 	vmov	s15, r3
 800c148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c14c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 8111 	beq.w	800c37a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	f000 8083 	beq.w	800c266 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c160:	69bb      	ldr	r3, [r7, #24]
 800c162:	2b02      	cmp	r3, #2
 800c164:	f200 80a1 	bhi.w	800c2aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c168:	69bb      	ldr	r3, [r7, #24]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	2b01      	cmp	r3, #1
 800c172:	d056      	beq.n	800c222 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c174:	e099      	b.n	800c2aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c176:	4b88      	ldr	r3, [pc, #544]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 0320 	and.w	r3, r3, #32
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d02d      	beq.n	800c1de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c182:	4b85      	ldr	r3, [pc, #532]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	08db      	lsrs	r3, r3, #3
 800c188:	f003 0303 	and.w	r3, r3, #3
 800c18c:	4a83      	ldr	r2, [pc, #524]	@ (800c39c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c18e:	fa22 f303 	lsr.w	r3, r2, r3
 800c192:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	ee07 3a90 	vmov	s15, r3
 800c19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	ee07 3a90 	vmov	s15, r3
 800c1a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ac:	4b7a      	ldr	r3, [pc, #488]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1b4:	ee07 3a90 	vmov	s15, r3
 800c1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c1dc:	e087      	b.n	800c2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	ee07 3a90 	vmov	s15, r3
 800c1e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c1ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1f0:	4b69      	ldr	r3, [pc, #420]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1f8:	ee07 3a90 	vmov	s15, r3
 800c1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c200:	ed97 6a03 	vldr	s12, [r7, #12]
 800c204:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c208:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c20c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c210:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c214:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c21c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c220:	e065      	b.n	800c2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	ee07 3a90 	vmov	s15, r3
 800c228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c22c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c3a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c234:	4b58      	ldr	r3, [pc, #352]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c23c:	ee07 3a90 	vmov	s15, r3
 800c240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c244:	ed97 6a03 	vldr	s12, [r7, #12]
 800c248:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c24c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c254:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c260:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c264:	e043      	b.n	800c2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	ee07 3a90 	vmov	s15, r3
 800c26c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c270:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c3ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c278:	4b47      	ldr	r3, [pc, #284]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c27a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c280:	ee07 3a90 	vmov	s15, r3
 800c284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c288:	ed97 6a03 	vldr	s12, [r7, #12]
 800c28c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c29c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2a8:	e021      	b.n	800c2ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	ee07 3a90 	vmov	s15, r3
 800c2b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c3a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2bc:	4b36      	ldr	r3, [pc, #216]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2c4:	ee07 3a90 	vmov	s15, r3
 800c2c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c3a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c2e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f2:	0a5b      	lsrs	r3, r3, #9
 800c2f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c300:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c304:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c308:	edd7 6a07 	vldr	s13, [r7, #28]
 800c30c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c314:	ee17 2a90 	vmov	r2, s15
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c31c:	4b1e      	ldr	r3, [pc, #120]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c320:	0c1b      	lsrs	r3, r3, #16
 800c322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c326:	ee07 3a90 	vmov	s15, r3
 800c32a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c32e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c332:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c336:	edd7 6a07 	vldr	s13, [r7, #28]
 800c33a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c33e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c342:	ee17 2a90 	vmov	r2, s15
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c34a:	4b13      	ldr	r3, [pc, #76]	@ (800c398 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c34e:	0e1b      	lsrs	r3, r3, #24
 800c350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c354:	ee07 3a90 	vmov	s15, r3
 800c358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c35c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c360:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c364:	edd7 6a07 	vldr	s13, [r7, #28]
 800c368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c36c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c370:	ee17 2a90 	vmov	r2, s15
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c378:	e008      	b.n	800c38c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2200      	movs	r2, #0
 800c37e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	2200      	movs	r2, #0
 800c38a:	609a      	str	r2, [r3, #8]
}
 800c38c:	bf00      	nop
 800c38e:	3724      	adds	r7, #36	@ 0x24
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	58024400 	.word	0x58024400
 800c39c:	03d09000 	.word	0x03d09000
 800c3a0:	46000000 	.word	0x46000000
 800c3a4:	4c742400 	.word	0x4c742400
 800c3a8:	4a742400 	.word	0x4a742400
 800c3ac:	4bb71b00 	.word	0x4bb71b00

0800c3b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3be:	4b53      	ldr	r3, [pc, #332]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d101      	bne.n	800c3ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e099      	b.n	800c502 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c3ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a4e      	ldr	r2, [pc, #312]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c3d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3da:	f7f6 fc0d 	bl	8002bf8 <HAL_GetTick>
 800c3de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3e0:	e008      	b.n	800c3f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c3e2:	f7f6 fc09 	bl	8002bf8 <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d901      	bls.n	800c3f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e086      	b.n	800c502 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c3f4:	4b45      	ldr	r3, [pc, #276]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1f0      	bne.n	800c3e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c400:	4b42      	ldr	r3, [pc, #264]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	031b      	lsls	r3, r3, #12
 800c40e:	493f      	ldr	r1, [pc, #252]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c410:	4313      	orrs	r3, r2
 800c412:	628b      	str	r3, [r1, #40]	@ 0x28
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	3b01      	subs	r3, #1
 800c41a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	025b      	lsls	r3, r3, #9
 800c426:	b29b      	uxth	r3, r3
 800c428:	431a      	orrs	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	3b01      	subs	r3, #1
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c436:	431a      	orrs	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	061b      	lsls	r3, r3, #24
 800c440:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c444:	4931      	ldr	r1, [pc, #196]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c446:	4313      	orrs	r3, r2
 800c448:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c44a:	4b30      	ldr	r3, [pc, #192]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	492d      	ldr	r1, [pc, #180]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c45c:	4b2b      	ldr	r3, [pc, #172]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c460:	f023 0220 	bic.w	r2, r3, #32
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	4928      	ldr	r1, [pc, #160]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c46e:	4b27      	ldr	r3, [pc, #156]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c472:	4a26      	ldr	r2, [pc, #152]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c474:	f023 0310 	bic.w	r3, r3, #16
 800c478:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c47a:	4b24      	ldr	r3, [pc, #144]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c47c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c47e:	4b24      	ldr	r3, [pc, #144]	@ (800c510 <RCCEx_PLL2_Config+0x160>)
 800c480:	4013      	ands	r3, r2
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	69d2      	ldr	r2, [r2, #28]
 800c486:	00d2      	lsls	r2, r2, #3
 800c488:	4920      	ldr	r1, [pc, #128]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c48a:	4313      	orrs	r3, r2
 800c48c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c48e:	4b1f      	ldr	r3, [pc, #124]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c492:	4a1e      	ldr	r2, [pc, #120]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c494:	f043 0310 	orr.w	r3, r3, #16
 800c498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a4:	4a19      	ldr	r2, [pc, #100]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4ac:	e00f      	b.n	800c4ce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d106      	bne.n	800c4c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c4b4:	4b15      	ldr	r3, [pc, #84]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b8:	4a14      	ldr	r2, [pc, #80]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4c0:	e005      	b.n	800c4ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c4c2:	4b12      	ldr	r3, [pc, #72]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c6:	4a11      	ldr	r2, [pc, #68]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c4cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4da:	f7f6 fb8d 	bl	8002bf8 <HAL_GetTick>
 800c4de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4e0:	e008      	b.n	800c4f4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c4e2:	f7f6 fb89 	bl	8002bf8 <HAL_GetTick>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d901      	bls.n	800c4f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e006      	b.n	800c502 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c4f4:	4b05      	ldr	r3, [pc, #20]	@ (800c50c <RCCEx_PLL2_Config+0x15c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0f0      	beq.n	800c4e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	58024400 	.word	0x58024400
 800c510:	ffff0007 	.word	0xffff0007

0800c514 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c51e:	2300      	movs	r3, #0
 800c520:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c522:	4b53      	ldr	r3, [pc, #332]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c526:	f003 0303 	and.w	r3, r3, #3
 800c52a:	2b03      	cmp	r3, #3
 800c52c:	d101      	bne.n	800c532 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e099      	b.n	800c666 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c532:	4b4f      	ldr	r3, [pc, #316]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a4e      	ldr	r2, [pc, #312]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c53c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c53e:	f7f6 fb5b 	bl	8002bf8 <HAL_GetTick>
 800c542:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c544:	e008      	b.n	800c558 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c546:	f7f6 fb57 	bl	8002bf8 <HAL_GetTick>
 800c54a:	4602      	mov	r2, r0
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	2b02      	cmp	r3, #2
 800c552:	d901      	bls.n	800c558 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c554:	2303      	movs	r3, #3
 800c556:	e086      	b.n	800c666 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c558:	4b45      	ldr	r3, [pc, #276]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1f0      	bne.n	800c546 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c564:	4b42      	ldr	r3, [pc, #264]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c568:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	051b      	lsls	r3, r3, #20
 800c572:	493f      	ldr	r1, [pc, #252]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c574:	4313      	orrs	r3, r2
 800c576:	628b      	str	r3, [r1, #40]	@ 0x28
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	3b01      	subs	r3, #1
 800c57e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	3b01      	subs	r3, #1
 800c588:	025b      	lsls	r3, r3, #9
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	431a      	orrs	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	3b01      	subs	r3, #1
 800c594:	041b      	lsls	r3, r3, #16
 800c596:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c59a:	431a      	orrs	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	061b      	lsls	r3, r3, #24
 800c5a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c5a8:	4931      	ldr	r1, [pc, #196]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c5ae:	4b30      	ldr	r3, [pc, #192]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	695b      	ldr	r3, [r3, #20]
 800c5ba:	492d      	ldr	r1, [pc, #180]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c5c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	699b      	ldr	r3, [r3, #24]
 800c5cc:	4928      	ldr	r1, [pc, #160]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c5d2:	4b27      	ldr	r3, [pc, #156]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5d6:	4a26      	ldr	r2, [pc, #152]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c5de:	4b24      	ldr	r3, [pc, #144]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5e2:	4b24      	ldr	r3, [pc, #144]	@ (800c674 <RCCEx_PLL3_Config+0x160>)
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	69d2      	ldr	r2, [r2, #28]
 800c5ea:	00d2      	lsls	r2, r2, #3
 800c5ec:	4920      	ldr	r1, [pc, #128]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c5f2:	4b1f      	ldr	r3, [pc, #124]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f6:	4a1e      	ldr	r2, [pc, #120]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c5f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c5fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d106      	bne.n	800c612 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c604:	4b1a      	ldr	r3, [pc, #104]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c608:	4a19      	ldr	r2, [pc, #100]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c60a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c60e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c610:	e00f      	b.n	800c632 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d106      	bne.n	800c626 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c618:	4b15      	ldr	r3, [pc, #84]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c61a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c61c:	4a14      	ldr	r2, [pc, #80]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c61e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c622:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c624:	e005      	b.n	800c632 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c626:	4b12      	ldr	r3, [pc, #72]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62a:	4a11      	ldr	r2, [pc, #68]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c62c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c630:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c632:	4b0f      	ldr	r3, [pc, #60]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a0e      	ldr	r2, [pc, #56]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c63c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c63e:	f7f6 fadb 	bl	8002bf8 <HAL_GetTick>
 800c642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c644:	e008      	b.n	800c658 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c646:	f7f6 fad7 	bl	8002bf8 <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	2b02      	cmp	r3, #2
 800c652:	d901      	bls.n	800c658 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e006      	b.n	800c666 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c658:	4b05      	ldr	r3, [pc, #20]	@ (800c670 <RCCEx_PLL3_Config+0x15c>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d0f0      	beq.n	800c646 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c664:	7bfb      	ldrb	r3, [r7, #15]
}
 800c666:	4618      	mov	r0, r3
 800c668:	3710      	adds	r7, #16
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	58024400 	.word	0x58024400
 800c674:	ffff0007 	.word	0xffff0007

0800c678 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b08a      	sub	sp, #40	@ 0x28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d101      	bne.n	800c68a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e075      	b.n	800c776 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	d105      	bne.n	800c6a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7f5 ff09 	bl	80024b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2204      	movs	r2, #4
 800c6a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f868 	bl	800c780 <HAL_SD_InitCard>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d001      	beq.n	800c6ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e05d      	b.n	800c776 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c6ba:	f107 0308 	add.w	r3, r7, #8
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fdaf 	bl	800d224 <HAL_SD_GetCardStatus>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e052      	b.n	800c776 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c6d0:	7e3b      	ldrb	r3, [r7, #24]
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c6d6:	7e7b      	ldrb	r3, [r7, #25]
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d10a      	bne.n	800c6fa <HAL_SD_Init+0x82>
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <HAL_SD_Init+0x78>
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d004      	beq.n	800c6fa <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c6f6:	659a      	str	r2, [r3, #88]	@ 0x58
 800c6f8:	e00b      	b.n	800c712 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d104      	bne.n	800c70c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c708:	659a      	str	r2, [r3, #88]	@ 0x58
 800c70a:	e002      	b.n	800c712 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2200      	movs	r2, #0
 800c710:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 fe6d 	bl	800d3f8 <HAL_SD_ConfigWideBusOperation>
 800c71e:	4603      	mov	r3, r0
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	e026      	b.n	800c776 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c728:	f7f6 fa66 	bl	8002bf8 <HAL_GetTick>
 800c72c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c72e:	e011      	b.n	800c754 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c730:	f7f6 fa62 	bl	8002bf8 <HAL_GetTick>
 800c734:	4602      	mov	r2, r0
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c73e:	d109      	bne.n	800c754 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c746:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 800c750:	2303      	movs	r3, #3
 800c752:	e010      	b.n	800c776 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 ff61 	bl	800d61c <HAL_SD_GetCardState>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d1e7      	bne.n	800c730 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2200      	movs	r2, #0
 800c764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2201      	movs	r2, #1
 800c770:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3728      	adds	r7, #40	@ 0x28
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
	...

0800c780 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c780:	b590      	push	{r4, r7, lr}
 800c782:	b08d      	sub	sp, #52	@ 0x34
 800c784:	af02      	add	r7, sp, #8
 800c786:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c788:	2300      	movs	r3, #0
 800c78a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c78c:	2300      	movs	r3, #0
 800c78e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c790:	2300      	movs	r3, #0
 800c792:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c794:	2300      	movs	r3, #0
 800c796:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c798:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800c79c:	f04f 0100 	mov.w	r1, #0
 800c7a0:	f7fe fd24 	bl	800b1ec <HAL_RCCEx_GetPeriphCLKFreq>
 800c7a4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 800c7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d109      	bne.n	800c7c0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800c7ba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e070      	b.n	800c8a2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c2:	0a1b      	lsrs	r3, r3, #8
 800c7c4:	4a39      	ldr	r2, [pc, #228]	@ (800c8ac <HAL_SD_InitCard+0x12c>)
 800c7c6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ca:	091b      	lsrs	r3, r3, #4
 800c7cc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681c      	ldr	r4, [r3, #0]
 800c7d2:	466a      	mov	r2, sp
 800c7d4:	f107 0318 	add.w	r3, r7, #24
 800c7d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c7dc:	e882 0003 	stmia.w	r2, {r0, r1}
 800c7e0:	f107 030c 	add.w	r3, r7, #12
 800c7e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f003 fffe 	bl	80107e8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f004 f841 	bl	8010878 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d005      	beq.n	800c808 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c802:	fbb2 f3f3 	udiv	r3, r2, r3
 800c806:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 800c808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d007      	beq.n	800c81e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c80e:	4a28      	ldr	r2, [pc, #160]	@ (800c8b0 <HAL_SD_InitCard+0x130>)
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	fbb2 f3f3 	udiv	r3, r2, r3
 800c816:	3301      	adds	r3, #1
 800c818:	4618      	mov	r0, r3
 800c81a:	f7f6 f9f9 	bl	8002c10 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 ffea 	bl	800d7f8 <SD_PowerON>
 800c824:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c826:	6a3b      	ldr	r3, [r7, #32]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2201      	movs	r2, #1
 800c830:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c838:	6a3b      	ldr	r3, [r7, #32]
 800c83a:	431a      	orrs	r2, r3
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e02e      	b.n	800c8a2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 ff09 	bl	800d65c <SD_InitCard>
 800c84a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00b      	beq.n	800c86a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	e01b      	b.n	800c8a2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c872:	4618      	mov	r0, r3
 800c874:	f004 f896 	bl	80109a4 <SDMMC_CmdBlockLength>
 800c878:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c87a:	6a3b      	ldr	r3, [r7, #32]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00f      	beq.n	800c8a0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a0b      	ldr	r2, [pc, #44]	@ (800c8b4 <HAL_SD_InitCard+0x134>)
 800c886:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c88c:	6a3b      	ldr	r3, [r7, #32]
 800c88e:	431a      	orrs	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2201      	movs	r2, #1
 800c898:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e000      	b.n	800c8a2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	372c      	adds	r7, #44	@ 0x2c
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd90      	pop	{r4, r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	014f8b59 	.word	0x014f8b59
 800c8b0:	00012110 	.word	0x00012110
 800c8b4:	1fe00fff 	.word	0x1fe00fff

0800c8b8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08c      	sub	sp, #48	@ 0x30
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	607a      	str	r2, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d107      	bne.n	800c8e0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8d4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	e08d      	b.n	800c9fc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	f040 8086 	bne.w	800c9fa <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c8f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	441a      	add	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d907      	bls.n	800c912 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c906:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e074      	b.n	800c9fc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2203      	movs	r2, #3
 800c916:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	2200      	movs	r2, #0
 800c920:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	025a      	lsls	r2, r3, #9
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c934:	2b01      	cmp	r3, #1
 800c936:	d002      	beq.n	800c93e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c93a:	025b      	lsls	r3, r3, #9
 800c93c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c93e:	f04f 33ff 	mov.w	r3, #4294967295
 800c942:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	025b      	lsls	r3, r3, #9
 800c948:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c94a:	2390      	movs	r3, #144	@ 0x90
 800c94c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c94e:	2302      	movs	r3, #2
 800c950:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c952:	2300      	movs	r3, #0
 800c954:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c956:	2300      	movs	r3, #0
 800c958:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f107 0210 	add.w	r2, r7, #16
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f003 fff1 	bl	801094c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68da      	ldr	r2, [r3, #12]
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c978:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2201      	movs	r2, #1
 800c988:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d90a      	bls.n	800c9a6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2282      	movs	r2, #130	@ 0x82
 800c994:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c99c:	4618      	mov	r0, r3
 800c99e:	f004 f847 	bl	8010a30 <SDMMC_CmdReadMultiBlock>
 800c9a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c9a4:	e009      	b.n	800c9ba <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	2281      	movs	r2, #129	@ 0x81
 800c9aa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f004 f819 	bl	80109ea <SDMMC_CmdReadSingleBlock>
 800c9b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d012      	beq.n	800c9e6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a0f      	ldr	r2, [pc, #60]	@ (800ca04 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c9c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e00a      	b.n	800c9fc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c9f4:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	e000      	b.n	800c9fc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c9fa:	2302      	movs	r3, #2
  }
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3730      	adds	r7, #48	@ 0x30
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	1fe00fff 	.word	0x1fe00fff

0800ca08 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b08c      	sub	sp, #48	@ 0x30
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d107      	bne.n	800ca30 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca24:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e08d      	b.n	800cb4c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	2b01      	cmp	r3, #1
 800ca3a:	f040 8086 	bne.w	800cb4a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	2200      	movs	r2, #0
 800ca42:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	441a      	add	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d907      	bls.n	800ca62 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca56:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e074      	b.n	800cb4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2203      	movs	r2, #3
 800ca66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	025a      	lsls	r2, r3, #9
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d002      	beq.n	800ca8e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800ca88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca8a:	025b      	lsls	r3, r3, #9
 800ca8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca92:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	025b      	lsls	r3, r3, #9
 800ca98:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ca9a:	2390      	movs	r3, #144	@ 0x90
 800ca9c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800caa6:	2300      	movs	r3, #0
 800caa8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f107 0210 	add.w	r2, r7, #16
 800cab2:	4611      	mov	r1, r2
 800cab4:	4618      	mov	r0, r3
 800cab6:	f003 ff49 	bl	801094c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cac8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	68ba      	ldr	r2, [r7, #8]
 800cad0:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2201      	movs	r2, #1
 800cad8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d90a      	bls.n	800caf6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	22a0      	movs	r2, #160	@ 0xa0
 800cae4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800caec:	4618      	mov	r0, r3
 800caee:	f003 ffe5 	bl	8010abc <SDMMC_CmdWriteMultiBlock>
 800caf2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800caf4:	e009      	b.n	800cb0a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2290      	movs	r2, #144	@ 0x90
 800cafa:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb02:	4618      	mov	r0, r3
 800cb04:	f003 ffb7 	bl	8010a76 <SDMMC_CmdWriteSingleBlock>
 800cb08:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d012      	beq.n	800cb36 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a0f      	ldr	r2, [pc, #60]	@ (800cb54 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cb16:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb1e:	431a      	orrs	r2, r3
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2201      	movs	r2, #1
 800cb28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800cb32:	2301      	movs	r3, #1
 800cb34:	e00a      	b.n	800cb4c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800cb44:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800cb46:	2300      	movs	r3, #0
 800cb48:	e000      	b.n	800cb4c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cb4a:	2302      	movs	r3, #2
  }
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3730      	adds	r7, #48	@ 0x30
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}
 800cb54:	1fe00fff 	.word	0x1fe00fff

0800cb58 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb64:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d008      	beq.n	800cb86 <HAL_SD_IRQHandler+0x2e>
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f003 0308 	and.w	r3, r3, #8
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f001 f926 	bl	800ddd0 <SD_Read_IT>
 800cb84:	e19a      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 80ac 	beq.w	800ccee <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb9e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	4b59      	ldr	r3, [pc, #356]	@ (800cd10 <HAL_SD_IRQHandler+0x1b8>)
 800cbac:	400b      	ands	r3, r1
 800cbae:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800cbbe:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	68da      	ldr	r2, [r3, #12]
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cbce:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f003 0308 	and.w	r3, r3, #8
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d038      	beq.n	800cc4c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d104      	bne.n	800cbee <HAL_SD_IRQHandler+0x96>
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f003 0320 	and.w	r3, r3, #32
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d011      	beq.n	800cc12 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f003 ff86 	bl	8010b04 <SDMMC_CmdStopTransfer>
 800cbf8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d008      	beq.n	800cc12 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	431a      	orrs	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 f95b 	bl	800cec8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a3f      	ldr	r2, [pc, #252]	@ (800cd14 <HAL_SD_IRQHandler+0x1bc>)
 800cc18:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f003 0301 	and.w	r3, r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d104      	bne.n	800cc3c <HAL_SD_IRQHandler+0xe4>
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f003 0302 	and.w	r3, r3, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d003      	beq.n	800cc44 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f004 fc31 	bl	80114a4 <HAL_SD_RxCpltCallback>
 800cc42:	e13b      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f004 fc23 	bl	8011490 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc4a:	e137      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f000 8132 	beq.w	800cebc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	2200      	movs	r2, #0
 800cc66:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f003 0302 	and.w	r3, r3, #2
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d104      	bne.n	800cc84 <HAL_SD_IRQHandler+0x12c>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f003 0320 	and.w	r3, r3, #32
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d011      	beq.n	800cca8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f003 ff3b 	bl	8010b04 <SDMMC_CmdStopTransfer>
 800cc8e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d008      	beq.n	800cca8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	431a      	orrs	r2, r3
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 f910 	bl	800cec8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f003 0310 	and.w	r3, r3, #16
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d104      	bne.n	800ccca <HAL_SD_IRQHandler+0x172>
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f004 fbe0 	bl	8011490 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d105      	bne.n	800cce6 <HAL_SD_IRQHandler+0x18e>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f003 0302 	and.w	r3, r3, #2
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	f000 80eb 	beq.w	800cebc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f004 fbdc 	bl	80114a4 <HAL_SD_RxCpltCallback>
}
 800ccec:	e0e6      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00d      	beq.n	800cd18 <HAL_SD_IRQHandler+0x1c0>
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	f003 0308 	and.w	r3, r3, #8
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d008      	beq.n	800cd18 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f001 f8a8 	bl	800de5c <SD_Write_IT>
 800cd0c:	e0d6      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
 800cd0e:	bf00      	nop
 800cd10:	ffff3ec5 	.word	0xffff3ec5
 800cd14:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd1e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	f000 809d 	beq.w	800ce62 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd2e:	f003 0302 	and.w	r3, r3, #2
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d005      	beq.n	800cd42 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd3a:	f043 0202 	orr.w	r2, r3, #2
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd48:	f003 0308 	and.w	r3, r3, #8
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d005      	beq.n	800cd5c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd54:	f043 0208 	orr.w	r2, r3, #8
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd62:	f003 0320 	and.w	r3, r3, #32
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd6e:	f043 0220 	orr.w	r2, r3, #32
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd7c:	f003 0310 	and.w	r3, r3, #16
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d005      	beq.n	800cd90 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd88:	f043 0210 	orr.w	r2, r3, #16
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a4b      	ldr	r2, [pc, #300]	@ (800cec4 <HAL_SD_IRQHandler+0x36c>)
 800cd96:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800cda6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68da      	ldr	r2, [r3, #12]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cdb6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cdc6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	68da      	ldr	r2, [r3, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cdd6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f003 fe91 	bl	8010b04 <SDMMC_CmdStopTransfer>
 800cde2:	4602      	mov	r2, r0
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cde8:	431a      	orrs	r2, r3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cdfc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce06:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f003 0308 	and.w	r3, r3, #8
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00a      	beq.n	800ce28 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2201      	movs	r2, #1
 800ce16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 f851 	bl	800cec8 <HAL_SD_ErrorCallback>
}
 800ce26:	e049      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d044      	beq.n	800cebc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d040      	beq.n	800cebc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800ce48:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f834 	bl	800cec8 <HAL_SD_ErrorCallback>
}
 800ce60:	e02c      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d025      	beq.n	800cebc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce78:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce80:	f003 0304 	and.w	r3, r3, #4
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10c      	bne.n	800cea2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	f003 0320 	and.w	r3, r3, #32
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d003      	beq.n	800ce9a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f001 f84a 	bl	800df2c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800ce98:	e010      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 f832 	bl	800df04 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800cea0:	e00c      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f003 0320 	and.w	r3, r3, #32
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 f833 	bl	800df18 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800ceb2:	e003      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f001 f81b 	bl	800def0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ceba:	e7ff      	b.n	800cebc <HAL_SD_IRQHandler+0x364>
 800cebc:	bf00      	nop
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	18000f3a 	.word	0x18000f3a

0800cec8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ced0:	bf00      	nop
 800ced2:	370c      	adds	r7, #12
 800ced4:	46bd      	mov	sp, r7
 800ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceda:	4770      	bx	lr

0800cedc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ceea:	0f9b      	lsrs	r3, r3, #30
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cef6:	0e9b      	lsrs	r3, r3, #26
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	f003 030f 	and.w	r3, r3, #15
 800cefe:	b2da      	uxtb	r2, r3
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf08:	0e1b      	lsrs	r3, r3, #24
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	f003 0303 	and.w	r3, r3, #3
 800cf10:	b2da      	uxtb	r2, r3
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf1a:	0c1b      	lsrs	r3, r3, #16
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf26:	0a1b      	lsrs	r3, r3, #8
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf3c:	0d1b      	lsrs	r3, r3, #20
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf48:	0c1b      	lsrs	r3, r3, #16
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	f003 030f 	and.w	r3, r3, #15
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf5a:	0bdb      	lsrs	r3, r3, #15
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f003 0301 	and.w	r3, r3, #1
 800cf62:	b2da      	uxtb	r2, r3
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf6c:	0b9b      	lsrs	r3, r3, #14
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf7e:	0b5b      	lsrs	r3, r3, #13
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	f003 0301 	and.w	r3, r3, #1
 800cf86:	b2da      	uxtb	r2, r3
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf90:	0b1b      	lsrs	r3, r3, #12
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	f003 0301 	and.w	r3, r3, #1
 800cf98:	b2da      	uxtb	r2, r3
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d163      	bne.n	800d074 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cfb0:	009a      	lsls	r2, r3, #2
 800cfb2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 800cfbc:	0f92      	lsrs	r2, r2, #30
 800cfbe:	431a      	orrs	r2, r3
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfc8:	0edb      	lsrs	r3, r3, #27
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	f003 0307 	and.w	r3, r3, #7
 800cfd0:	b2da      	uxtb	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfda:	0e1b      	lsrs	r3, r3, #24
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	f003 0307 	and.w	r3, r3, #7
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cfec:	0d5b      	lsrs	r3, r3, #21
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	f003 0307 	and.w	r3, r3, #7
 800cff4:	b2da      	uxtb	r2, r3
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cffe:	0c9b      	lsrs	r3, r3, #18
 800d000:	b2db      	uxtb	r3, r3
 800d002:	f003 0307 	and.w	r3, r3, #7
 800d006:	b2da      	uxtb	r2, r3
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d010:	0bdb      	lsrs	r3, r3, #15
 800d012:	b2db      	uxtb	r3, r3
 800d014:	f003 0307 	and.w	r3, r3, #7
 800d018:	b2da      	uxtb	r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	691b      	ldr	r3, [r3, #16]
 800d022:	1c5a      	adds	r2, r3, #1
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	7e1b      	ldrb	r3, [r3, #24]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	3302      	adds	r3, #2
 800d034:	2201      	movs	r2, #1
 800d036:	fa02 f303 	lsl.w	r3, r2, r3
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800d03e:	fb03 f202 	mul.w	r2, r3, r2
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	7a1b      	ldrb	r3, [r3, #8]
 800d04a:	b2db      	uxtb	r3, r3
 800d04c:	f003 030f 	and.w	r3, r3, #15
 800d050:	2201      	movs	r2, #1
 800d052:	409a      	lsls	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800d060:	0a52      	lsrs	r2, r2, #9
 800d062:	fb03 f202 	mul.w	r2, r3, r2
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d070:	655a      	str	r2, [r3, #84]	@ 0x54
 800d072:	e031      	b.n	800d0d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d11d      	bne.n	800d0b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d080:	041b      	lsls	r3, r3, #16
 800d082:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d08a:	0c1b      	lsrs	r3, r3, #16
 800d08c:	431a      	orrs	r2, r3
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	3301      	adds	r3, #1
 800d098:	029a      	lsls	r2, r3, #10
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0ac:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	655a      	str	r2, [r3, #84]	@ 0x54
 800d0b6:	e00f      	b.n	800d0d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a58      	ldr	r2, [pc, #352]	@ (800d220 <HAL_SD_GetCardCSD+0x344>)
 800d0be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e09d      	b.n	800d214 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0dc:	0b9b      	lsrs	r3, r3, #14
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	f003 0301 	and.w	r3, r3, #1
 800d0e4:	b2da      	uxtb	r2, r3
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0ee:	09db      	lsrs	r3, r3, #7
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0f6:	b2da      	uxtb	r2, r3
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d100:	b2db      	uxtb	r3, r3
 800d102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d106:	b2da      	uxtb	r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d110:	0fdb      	lsrs	r3, r3, #31
 800d112:	b2da      	uxtb	r2, r3
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d11c:	0f5b      	lsrs	r3, r3, #29
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	f003 0303 	and.w	r3, r3, #3
 800d124:	b2da      	uxtb	r2, r3
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d12e:	0e9b      	lsrs	r3, r3, #26
 800d130:	b2db      	uxtb	r3, r3
 800d132:	f003 0307 	and.w	r3, r3, #7
 800d136:	b2da      	uxtb	r2, r3
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d140:	0d9b      	lsrs	r3, r3, #22
 800d142:	b2db      	uxtb	r3, r3
 800d144:	f003 030f 	and.w	r3, r3, #15
 800d148:	b2da      	uxtb	r2, r3
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d152:	0d5b      	lsrs	r3, r3, #21
 800d154:	b2db      	uxtb	r3, r3
 800d156:	f003 0301 	and.w	r3, r3, #1
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d16e:	0c1b      	lsrs	r3, r3, #16
 800d170:	b2db      	uxtb	r3, r3
 800d172:	f003 0301 	and.w	r3, r3, #1
 800d176:	b2da      	uxtb	r2, r3
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d182:	0bdb      	lsrs	r3, r3, #15
 800d184:	b2db      	uxtb	r3, r3
 800d186:	f003 0301 	and.w	r3, r3, #1
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d196:	0b9b      	lsrs	r3, r3, #14
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	f003 0301 	and.w	r3, r3, #1
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1aa:	0b5b      	lsrs	r3, r3, #13
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	f003 0301 	and.w	r3, r3, #1
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1be:	0b1b      	lsrs	r3, r3, #12
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1d2:	0a9b      	lsrs	r3, r3, #10
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1e6:	0a1b      	lsrs	r3, r3, #8
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	f003 0303 	and.w	r3, r3, #3
 800d1ee:	b2da      	uxtb	r2, r3
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1fa:	085b      	lsrs	r3, r3, #1
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d202:	b2da      	uxtb	r2, r3
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	1fe00fff 	.word	0x1fe00fff

0800d224 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b094      	sub	sp, #80	@ 0x50
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	2b03      	cmp	r3, #3
 800d23e:	d101      	bne.n	800d244 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e0a7      	b.n	800d394 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d244:	f107 0308 	add.w	r3, r7, #8
 800d248:	4619      	mov	r1, r3
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fb62 	bl	800d914 <SD_SendSDStatus>
 800d250:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d254:	2b00      	cmp	r3, #0
 800d256:	d011      	beq.n	800d27c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a4f      	ldr	r2, [pc, #316]	@ (800d39c <HAL_SD_GetCardStatus+0x178>)
 800d25e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d264:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d266:	431a      	orrs	r2, r3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2201      	movs	r2, #1
 800d270:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800d27a:	e070      	b.n	800d35e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	099b      	lsrs	r3, r3, #6
 800d280:	b2db      	uxtb	r3, r3
 800d282:	f003 0303 	and.w	r3, r3, #3
 800d286:	b2da      	uxtb	r2, r3
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	095b      	lsrs	r3, r3, #5
 800d290:	b2db      	uxtb	r3, r3
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	b2da      	uxtb	r2, r3
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	0a1b      	lsrs	r3, r3, #8
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d2a6:	b29a      	uxth	r2, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	0e1b      	lsrs	r3, r3, #24
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	061a      	lsls	r2, r3, #24
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d2c2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	0a1b      	lsrs	r3, r3, #8
 800d2c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2cc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	0e1b      	lsrs	r3, r3, #24
 800d2d2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	b2da      	uxtb	r2, r3
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	0a1b      	lsrs	r3, r3, #8
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	0d1b      	lsrs	r3, r3, #20
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	f003 030f 	and.w	r3, r3, #15
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	0c1b      	lsrs	r3, r3, #16
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d304:	b29a      	uxth	r2, r3
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	b29b      	uxth	r3, r3
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	4313      	orrs	r3, r2
 800d310:	b29a      	uxth	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	0a9b      	lsrs	r3, r3, #10
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d320:	b2da      	uxtb	r2, r3
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	0a1b      	lsrs	r3, r3, #8
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	f003 0303 	and.w	r3, r3, #3
 800d330:	b2da      	uxtb	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	091b      	lsrs	r3, r3, #4
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 030f 	and.w	r3, r3, #15
 800d340:	b2da      	uxtb	r2, r3
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	f003 030f 	and.w	r3, r3, #15
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	0e1b      	lsrs	r3, r3, #24
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d366:	4618      	mov	r0, r3
 800d368:	f003 fb1c 	bl	80109a4 <SDMMC_CmdBlockLength>
 800d36c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d36e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d370:	2b00      	cmp	r3, #0
 800d372:	d00d      	beq.n	800d390 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	4a08      	ldr	r2, [pc, #32]	@ (800d39c <HAL_SD_GetCardStatus+0x178>)
 800d37a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d380:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2201      	movs	r2, #1
 800d386:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 800d390:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800d394:	4618      	mov	r0, r3
 800d396:	3750      	adds	r7, #80	@ 0x50
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	1fe00fff 	.word	0x1fe00fff

0800d3a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d3f8:	b590      	push	{r4, r7, lr}
 800d3fa:	b08d      	sub	sp, #52	@ 0x34
 800d3fc:	af02      	add	r7, sp, #8
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2203      	movs	r2, #3
 800d40c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d414:	2b03      	cmp	r3, #3
 800d416:	d02e      	beq.n	800d476 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d41e:	d106      	bne.n	800d42e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d424:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	635a      	str	r2, [r3, #52]	@ 0x34
 800d42c:	e029      	b.n	800d482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d434:	d10a      	bne.n	800d44c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 fb64 	bl	800db04 <SD_WideBus_Enable>
 800d43c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d442:	6a3b      	ldr	r3, [r7, #32]
 800d444:	431a      	orrs	r2, r3
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	635a      	str	r2, [r3, #52]	@ 0x34
 800d44a:	e01a      	b.n	800d482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10a      	bne.n	800d468 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fba1 	bl	800db9a <SD_WideBus_Disable>
 800d458:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d45e:	6a3b      	ldr	r3, [r7, #32]
 800d460:	431a      	orrs	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	635a      	str	r2, [r3, #52]	@ 0x34
 800d466:	e00c      	b.n	800d482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d46c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	635a      	str	r2, [r3, #52]	@ 0x34
 800d474:	e005      	b.n	800d482 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d47a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d486:	2b00      	cmp	r3, #0
 800d488:	d007      	beq.n	800d49a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a5f      	ldr	r2, [pc, #380]	@ (800d60c <HAL_SD_ConfigWideBusOperation+0x214>)
 800d490:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d492:	2301      	movs	r3, #1
 800d494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d498:	e096      	b.n	800d5c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d49a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d49e:	f04f 0100 	mov.w	r1, #0
 800d4a2:	f7fd fea3 	bl	800b1ec <HAL_RCCEx_GetPeriphCLKFreq>
 800d4a6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 8083 	beq.w	800d5b6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	695a      	ldr	r2, [r3, #20]
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	4950      	ldr	r1, [pc, #320]	@ (800d610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d4ce:	fba1 1303 	umull	r1, r3, r1, r3
 800d4d2:	0e1b      	lsrs	r3, r3, #24
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d303      	bcc.n	800d4e0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	e05a      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4e8:	d103      	bne.n	800d4f2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	695b      	ldr	r3, [r3, #20]
 800d4ee:	61bb      	str	r3, [r7, #24]
 800d4f0:	e051      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d4fa:	d126      	bne.n	800d54a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	695b      	ldr	r3, [r3, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10e      	bne.n	800d522 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d504:	69fb      	ldr	r3, [r7, #28]
 800d506:	4a43      	ldr	r2, [pc, #268]	@ (800d614 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d906      	bls.n	800d51a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	4a40      	ldr	r2, [pc, #256]	@ (800d610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d510:	fba2 2303 	umull	r2, r3, r2, r3
 800d514:	0e5b      	lsrs	r3, r3, #25
 800d516:	61bb      	str	r3, [r7, #24]
 800d518:	e03d      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	695b      	ldr	r3, [r3, #20]
 800d51e:	61bb      	str	r3, [r7, #24]
 800d520:	e039      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	005b      	lsls	r3, r3, #1
 800d528:	69fa      	ldr	r2, [r7, #28]
 800d52a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d52e:	4a39      	ldr	r2, [pc, #228]	@ (800d614 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d530:	4293      	cmp	r3, r2
 800d532:	d906      	bls.n	800d542 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	4a36      	ldr	r2, [pc, #216]	@ (800d610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d538:	fba2 2303 	umull	r2, r3, r2, r3
 800d53c:	0e5b      	lsrs	r3, r3, #25
 800d53e:	61bb      	str	r3, [r7, #24]
 800d540:	e029      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	61bb      	str	r3, [r7, #24]
 800d548:	e025      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	695b      	ldr	r3, [r3, #20]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10e      	bne.n	800d570 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	4a30      	ldr	r2, [pc, #192]	@ (800d618 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d906      	bls.n	800d568 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	4a2c      	ldr	r2, [pc, #176]	@ (800d610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d55e:	fba2 2303 	umull	r2, r3, r2, r3
 800d562:	0e1b      	lsrs	r3, r3, #24
 800d564:	61bb      	str	r3, [r7, #24]
 800d566:	e016      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	61bb      	str	r3, [r7, #24]
 800d56e:	e012      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	695b      	ldr	r3, [r3, #20]
 800d574:	005b      	lsls	r3, r3, #1
 800d576:	69fa      	ldr	r2, [r7, #28]
 800d578:	fbb2 f3f3 	udiv	r3, r2, r3
 800d57c:	4a26      	ldr	r2, [pc, #152]	@ (800d618 <HAL_SD_ConfigWideBusOperation+0x220>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d906      	bls.n	800d590 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	4a22      	ldr	r2, [pc, #136]	@ (800d610 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	0e1b      	lsrs	r3, r3, #24
 800d58c:	61bb      	str	r3, [r7, #24]
 800d58e:	e002      	b.n	800d596 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	695b      	ldr	r3, [r3, #20]
 800d594:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681c      	ldr	r4, [r3, #0]
 800d59a:	466a      	mov	r2, sp
 800d59c:	f107 0314 	add.w	r3, r7, #20
 800d5a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5a4:	e882 0003 	stmia.w	r2, {r0, r1}
 800d5a8:	f107 0308 	add.w	r3, r7, #8
 800d5ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f003 f91a 	bl	80107e8 <SDMMC_Init>
 800d5b4:	e008      	b.n	800d5c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f003 f9e7 	bl	80109a4 <SDMMC_CmdBlockLength>
 800d5d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00c      	beq.n	800d5f8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a0a      	ldr	r2, [pc, #40]	@ (800d60c <HAL_SD_ConfigWideBusOperation+0x214>)
 800d5e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	431a      	orrs	r2, r3
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800d600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d604:	4618      	mov	r0, r3
 800d606:	372c      	adds	r7, #44	@ 0x2c
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd90      	pop	{r4, r7, pc}
 800d60c:	1fe00fff 	.word	0x1fe00fff
 800d610:	55e63b89 	.word	0x55e63b89
 800d614:	02faf080 	.word	0x02faf080
 800d618:	017d7840 	.word	0x017d7840

0800d61c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d628:	f107 030c 	add.w	r3, r7, #12
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fa40 	bl	800dab4 <SD_SendStatus>
 800d634:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	431a      	orrs	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	0a5b      	lsrs	r3, r3, #9
 800d64c:	f003 030f 	and.w	r3, r3, #15
 800d650:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d652:	693b      	ldr	r3, [r7, #16]
}
 800d654:	4618      	mov	r0, r3
 800d656:	3718      	adds	r7, #24
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b090      	sub	sp, #64	@ 0x40
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d664:	2300      	movs	r3, #0
 800d666:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d668:	f7f5 fac6 	bl	8002bf8 <HAL_GetTick>
 800d66c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	f003 f911 	bl	801089a <SDMMC_GetPowerState>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d102      	bne.n	800d684 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d67e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d682:	e0b5      	b.n	800d7f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d02e      	beq.n	800d6ea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4618      	mov	r0, r3
 800d692:	f003 fb5c 	bl	8010d4e <SDMMC_CmdSendCID>
 800d696:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <SD_InitCard+0x46>
    {
      return errorstate;
 800d69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a0:	e0a6      	b.n	800d7f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f003 f93c 	bl	8010926 <SDMMC_GetResponse>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	2104      	movs	r1, #4
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f003 f933 	bl	8010926 <SDMMC_GetResponse>
 800d6c0:	4602      	mov	r2, r0
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	2108      	movs	r1, #8
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f003 f92a 	bl	8010926 <SDMMC_GetResponse>
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	210c      	movs	r1, #12
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f003 f921 	bl	8010926 <SDMMC_GetResponse>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d01d      	beq.n	800d72e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d6f2:	e019      	b.n	800d728 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f107 020a 	add.w	r2, r7, #10
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	4618      	mov	r0, r3
 800d700:	f003 fb64 	bl	8010dcc <SDMMC_CmdSetRelAdd>
 800d704:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70e:	e06f      	b.n	800d7f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d710:	f7f5 fa72 	bl	8002bf8 <HAL_GetTick>
 800d714:	4602      	mov	r2, r0
 800d716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d718:	1ad3      	subs	r3, r2, r3
 800d71a:	f241 3287 	movw	r2, #4999	@ 0x1387
 800d71e:	4293      	cmp	r3, r2
 800d720:	d902      	bls.n	800d728 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d722:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d726:	e063      	b.n	800d7f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d728:	897b      	ldrh	r3, [r7, #10]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d0e2      	beq.n	800d6f4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d732:	2b03      	cmp	r3, #3
 800d734:	d036      	beq.n	800d7a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d736:	897b      	ldrh	r3, [r7, #10]
 800d738:	461a      	mov	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d746:	041b      	lsls	r3, r3, #16
 800d748:	4619      	mov	r1, r3
 800d74a:	4610      	mov	r0, r2
 800d74c:	f003 fb1e 	bl	8010d8c <SDMMC_CmdSendCSD>
 800d750:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <SD_InitCard+0x100>
    {
      return errorstate;
 800d758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d75a:	e049      	b.n	800d7f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2100      	movs	r1, #0
 800d762:	4618      	mov	r0, r3
 800d764:	f003 f8df 	bl	8010926 <SDMMC_GetResponse>
 800d768:	4602      	mov	r2, r0
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2104      	movs	r1, #4
 800d774:	4618      	mov	r0, r3
 800d776:	f003 f8d6 	bl	8010926 <SDMMC_GetResponse>
 800d77a:	4602      	mov	r2, r0
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2108      	movs	r1, #8
 800d786:	4618      	mov	r0, r3
 800d788:	f003 f8cd 	bl	8010926 <SDMMC_GetResponse>
 800d78c:	4602      	mov	r2, r0
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	210c      	movs	r1, #12
 800d798:	4618      	mov	r0, r3
 800d79a:	f003 f8c4 	bl	8010926 <SDMMC_GetResponse>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	2104      	movs	r1, #4
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f003 f8bb 	bl	8010926 <SDMMC_GetResponse>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	0d1a      	lsrs	r2, r3, #20
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d7b8:	f107 030c 	add.w	r3, r7, #12
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff fb8c 	bl	800cedc <HAL_SD_GetCardCSD>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d7ce:	e00f      	b.n	800d7f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681a      	ldr	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7d8:	041b      	lsls	r3, r3, #16
 800d7da:	4619      	mov	r1, r3
 800d7dc:	4610      	mov	r0, r2
 800d7de:	f003 f9cd 	bl	8010b7c <SDMMC_CmdSelDesel>
 800d7e2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d001      	beq.n	800d7ee <SD_InitCard+0x192>
  {
    return errorstate;
 800d7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ec:	e000      	b.n	800d7f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3740      	adds	r7, #64	@ 0x40
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	bd80      	pop	{r7, pc}

0800d7f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b086      	sub	sp, #24
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d800:	2300      	movs	r3, #0
 800d802:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d808:	2300      	movs	r3, #0
 800d80a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4618      	mov	r0, r3
 800d812:	f003 f9d6 	bl	8010bc2 <SDMMC_CmdGoIdleState>
 800d816:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	e072      	b.n	800d908 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	4618      	mov	r0, r3
 800d828:	f003 f9e9 	bl	8010bfe <SDMMC_CmdOperCond>
 800d82c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d834:	d10d      	bne.n	800d852 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4618      	mov	r0, r3
 800d842:	f003 f9be 	bl	8010bc2 <SDMMC_CmdGoIdleState>
 800d846:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <SD_PowerON+0x60>
    {
      return errorstate;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	e05a      	b.n	800d908 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2201      	movs	r2, #1
 800d856:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d85c:	2b01      	cmp	r3, #1
 800d85e:	d137      	bne.n	800d8d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2100      	movs	r1, #0
 800d866:	4618      	mov	r0, r3
 800d868:	f003 f9e9 	bl	8010c3e <SDMMC_CmdAppCommand>
 800d86c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d02d      	beq.n	800d8d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d874:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d878:	e046      	b.n	800d908 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2100      	movs	r1, #0
 800d880:	4618      	mov	r0, r3
 800d882:	f003 f9dc 	bl	8010c3e <SDMMC_CmdAppCommand>
 800d886:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d001      	beq.n	800d892 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	e03a      	b.n	800d908 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	491e      	ldr	r1, [pc, #120]	@ (800d910 <SD_PowerON+0x118>)
 800d898:	4618      	mov	r0, r3
 800d89a:	f003 f9f3 	bl	8010c84 <SDMMC_CmdAppOperCommand>
 800d89e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d002      	beq.n	800d8ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d8aa:	e02d      	b.n	800d908 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f003 f837 	bl	8010926 <SDMMC_GetResponse>
 800d8b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	0fdb      	lsrs	r3, r3, #31
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d101      	bne.n	800d8c6 <SD_PowerON+0xce>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	e000      	b.n	800d8c8 <SD_PowerON+0xd0>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	613b      	str	r3, [r7, #16]

    count++;
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	d802      	bhi.n	800d8e0 <SD_PowerON+0xe8>
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0cc      	beq.n	800d87a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d902      	bls.n	800d8f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d8ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d8ee:	e00b      	b.n	800d908 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d002      	beq.n	800d906 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3718      	adds	r7, #24
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	c1100000 	.word	0xc1100000

0800d914 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b08c      	sub	sp, #48	@ 0x30
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d91e:	f7f5 f96b 	bl	8002bf8 <HAL_GetTick>
 800d922:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2100      	movs	r1, #0
 800d92e:	4618      	mov	r0, r3
 800d930:	f002 fff9 	bl	8010926 <SDMMC_GetResponse>
 800d934:	4603      	mov	r3, r0
 800d936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d93a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d93e:	d102      	bne.n	800d946 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d940:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d944:	e0b0      	b.n	800daa8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2140      	movs	r1, #64	@ 0x40
 800d94c:	4618      	mov	r0, r3
 800d94e:	f003 f829 	bl	80109a4 <SDMMC_CmdBlockLength>
 800d952:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d954:	6a3b      	ldr	r3, [r7, #32]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d005      	beq.n	800d966 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d962:	6a3b      	ldr	r3, [r7, #32]
 800d964:	e0a0      	b.n	800daa8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	4619      	mov	r1, r3
 800d972:	4610      	mov	r0, r2
 800d974:	f003 f963 	bl	8010c3e <SDMMC_CmdAppCommand>
 800d978:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d97a:	6a3b      	ldr	r3, [r7, #32]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d005      	beq.n	800d98c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	e08d      	b.n	800daa8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d98c:	f04f 33ff 	mov.w	r3, #4294967295
 800d990:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d992:	2340      	movs	r3, #64	@ 0x40
 800d994:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d996:	2360      	movs	r3, #96	@ 0x60
 800d998:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d99a:	2302      	movs	r3, #2
 800d99c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f107 0208 	add.w	r2, r7, #8
 800d9ae:	4611      	mov	r1, r2
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f002 ffcb 	bl	801094c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f003 fa4b 	bl	8010e56 <SDMMC_CmdStatusRegister>
 800d9c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9c2:	6a3b      	ldr	r3, [r7, #32]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d02b      	beq.n	800da20 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800d9d0:	6a3b      	ldr	r3, [r7, #32]
 800d9d2:	e069      	b.n	800daa8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d013      	beq.n	800da0a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9e6:	e00d      	b.n	800da04 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f002 ff25 	bl	801083c <SDMMC_ReadFIFO>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f6:	601a      	str	r2, [r3, #0]
        pData++;
 800d9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9fa:	3304      	adds	r3, #4
 800d9fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800d9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da00:	3301      	adds	r3, #1
 800da02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da06:	2b07      	cmp	r3, #7
 800da08:	d9ee      	bls.n	800d9e8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da0a:	f7f5 f8f5 	bl	8002bf8 <HAL_GetTick>
 800da0e:	4602      	mov	r2, r0
 800da10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d102      	bne.n	800da20 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da1e:	e043      	b.n	800daa8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da26:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d0d2      	beq.n	800d9d4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da34:	f003 0308 	and.w	r3, r3, #8
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d001      	beq.n	800da40 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800da3c:	2308      	movs	r3, #8
 800da3e:	e033      	b.n	800daa8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da46:	f003 0302 	and.w	r3, r3, #2
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d001      	beq.n	800da52 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da4e:	2302      	movs	r3, #2
 800da50:	e02a      	b.n	800daa8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da58:	f003 0320 	and.w	r3, r3, #32
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d017      	beq.n	800da90 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800da60:	2320      	movs	r3, #32
 800da62:	e021      	b.n	800daa8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f002 fee7 	bl	801083c <SDMMC_ReadFIFO>
 800da6e:	4602      	mov	r2, r0
 800da70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da72:	601a      	str	r2, [r3, #0]
    pData++;
 800da74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da76:	3304      	adds	r3, #4
 800da78:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da7a:	f7f5 f8bd 	bl	8002bf8 <HAL_GetTick>
 800da7e:	4602      	mov	r2, r0
 800da80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da88:	d102      	bne.n	800da90 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da8e:	e00b      	b.n	800daa8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d1e2      	bne.n	800da64 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4a03      	ldr	r2, [pc, #12]	@ (800dab0 <SD_SendSDStatus+0x19c>)
 800daa4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3730      	adds	r7, #48	@ 0x30
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	18000f3a 	.word	0x18000f3a

0800dab4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b084      	sub	sp, #16
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d102      	bne.n	800daca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dac4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dac8:	e018      	b.n	800dafc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dad2:	041b      	lsls	r3, r3, #16
 800dad4:	4619      	mov	r1, r3
 800dad6:	4610      	mov	r0, r2
 800dad8:	f003 f99a 	bl	8010e10 <SDMMC_CmdSendStatus>
 800dadc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	e009      	b.n	800dafc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	2100      	movs	r1, #0
 800daee:	4618      	mov	r0, r3
 800daf0:	f002 ff19 	bl	8010926 <SDMMC_GetResponse>
 800daf4:	4602      	mov	r2, r0
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	2300      	movs	r3, #0
 800db12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f002 ff03 	bl	8010926 <SDMMC_GetResponse>
 800db20:	4603      	mov	r3, r0
 800db22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db2a:	d102      	bne.n	800db32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db30:	e02f      	b.n	800db92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db32:	f107 030c 	add.w	r3, r7, #12
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f879 	bl	800dc30 <SD_FindSCR>
 800db3e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	e023      	b.n	800db92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d01c      	beq.n	800db8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681a      	ldr	r2, [r3, #0]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db5c:	041b      	lsls	r3, r3, #16
 800db5e:	4619      	mov	r1, r3
 800db60:	4610      	mov	r0, r2
 800db62:	f003 f86c 	bl	8010c3e <SDMMC_CmdAppCommand>
 800db66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d001      	beq.n	800db72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	e00f      	b.n	800db92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2102      	movs	r1, #2
 800db78:	4618      	mov	r0, r3
 800db7a:	f003 f8a3 	bl	8010cc4 <SDMMC_CmdBusWidth>
 800db7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d001      	beq.n	800db8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	e003      	b.n	800db92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800db8a:	2300      	movs	r3, #0
 800db8c:	e001      	b.n	800db92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800db8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800db92:	4618      	mov	r0, r3
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b086      	sub	sp, #24
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dba2:	2300      	movs	r3, #0
 800dba4:	60fb      	str	r3, [r7, #12]
 800dba6:	2300      	movs	r3, #0
 800dba8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	2100      	movs	r1, #0
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f002 feb8 	bl	8010926 <SDMMC_GetResponse>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dbc0:	d102      	bne.n	800dbc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dbc6:	e02f      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbc8:	f107 030c 	add.w	r3, r7, #12
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f82e 	bl	800dc30 <SD_FindSCR>
 800dbd4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	e023      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d01c      	beq.n	800dc24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbf2:	041b      	lsls	r3, r3, #16
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4610      	mov	r0, r2
 800dbf8:	f003 f821 	bl	8010c3e <SDMMC_CmdAppCommand>
 800dbfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	e00f      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f003 f858 	bl	8010cc4 <SDMMC_CmdBusWidth>
 800dc14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d001      	beq.n	800dc20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	e003      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc20:	2300      	movs	r3, #0
 800dc22:	e001      	b.n	800dc28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b08e      	sub	sp, #56	@ 0x38
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc3a:	f7f4 ffdd 	bl	8002bf8 <HAL_GetTick>
 800dc3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dc44:	2300      	movs	r3, #0
 800dc46:	60bb      	str	r3, [r7, #8]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2108      	movs	r1, #8
 800dc56:	4618      	mov	r0, r3
 800dc58:	f002 fea4 	bl	80109a4 <SDMMC_CmdBlockLength>
 800dc5c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d001      	beq.n	800dc68 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc66:	e0ad      	b.n	800ddc4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc70:	041b      	lsls	r3, r3, #16
 800dc72:	4619      	mov	r1, r3
 800dc74:	4610      	mov	r0, r2
 800dc76:	f002 ffe2 	bl	8010c3e <SDMMC_CmdAppCommand>
 800dc7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d001      	beq.n	800dc86 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc84:	e09e      	b.n	800ddc4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dc8c:	2308      	movs	r3, #8
 800dc8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dc90:	2330      	movs	r3, #48	@ 0x30
 800dc92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dc94:	2302      	movs	r3, #2
 800dc96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f107 0210 	add.w	r2, r7, #16
 800dca8:	4611      	mov	r1, r2
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f002 fe4e 	bl	801094c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f003 f828 	bl	8010d0a <SDMMC_CmdSendSCR>
 800dcba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d027      	beq.n	800dd12 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dcc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcc4:	e07e      	b.n	800ddc4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d113      	bne.n	800dcfc <SD_FindSCR+0xcc>
 800dcd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d110      	bne.n	800dcfc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	4618      	mov	r0, r3
 800dce0:	f002 fdac 	bl	801083c <SDMMC_ReadFIFO>
 800dce4:	4603      	mov	r3, r0
 800dce6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f002 fda5 	bl	801083c <SDMMC_ReadFIFO>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	60fb      	str	r3, [r7, #12]
      index++;
 800dcf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dcfc:	f7f4 ff7c 	bl	8002bf8 <HAL_GetTick>
 800dd00:	4602      	mov	r2, r0
 800dd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0a:	d102      	bne.n	800dd12 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd10:	e058      	b.n	800ddc4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd18:	f240 532a 	movw	r3, #1322	@ 0x52a
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0d1      	beq.n	800dcc6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd28:	f003 0308 	and.w	r3, r3, #8
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d005      	beq.n	800dd3c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2208      	movs	r2, #8
 800dd36:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd38:	2308      	movs	r3, #8
 800dd3a:	e043      	b.n	800ddc4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd42:	f003 0302 	and.w	r3, r3, #2
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d005      	beq.n	800dd56 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd52:	2302      	movs	r3, #2
 800dd54:	e036      	b.n	800ddc4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd5c:	f003 0320 	and.w	r3, r3, #32
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d005      	beq.n	800dd70 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2220      	movs	r2, #32
 800dd6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd6c:	2320      	movs	r3, #32
 800dd6e:	e029      	b.n	800ddc4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a15      	ldr	r2, [pc, #84]	@ (800ddcc <SD_FindSCR+0x19c>)
 800dd76:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	061a      	lsls	r2, r3, #24
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	021b      	lsls	r3, r3, #8
 800dd80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dd84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	0a1b      	lsrs	r3, r3, #8
 800dd8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	0e1b      	lsrs	r3, r3, #24
 800dd94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800dd96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd98:	601a      	str	r2, [r3, #0]
    scr++;
 800dd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9c:	3304      	adds	r3, #4
 800dd9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	061a      	lsls	r2, r3, #24
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	021b      	lsls	r3, r3, #8
 800dda8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ddac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	0a1b      	lsrs	r3, r3, #8
 800ddb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	0e1b      	lsrs	r3, r3, #24
 800ddbc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3738      	adds	r7, #56	@ 0x38
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	18000f3a 	.word	0x18000f3a

0800ddd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dddc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde2:	2b1f      	cmp	r3, #31
 800dde4:	d936      	bls.n	800de54 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800dde6:	2300      	movs	r3, #0
 800dde8:	617b      	str	r3, [r7, #20]
 800ddea:	e027      	b.n	800de3c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f002 fd23 	bl	801083c <SDMMC_ReadFIFO>
 800ddf6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	b2da      	uxtb	r2, r3
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	3301      	adds	r3, #1
 800de04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	0a1b      	lsrs	r3, r3, #8
 800de0a:	b2da      	uxtb	r2, r3
 800de0c:	693b      	ldr	r3, [r7, #16]
 800de0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	3301      	adds	r3, #1
 800de14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	0c1b      	lsrs	r3, r3, #16
 800de1a:	b2da      	uxtb	r2, r3
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	3301      	adds	r3, #1
 800de24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	0e1b      	lsrs	r3, r3, #24
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	693b      	ldr	r3, [r7, #16]
 800de2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	3301      	adds	r3, #1
 800de34:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	3301      	adds	r3, #1
 800de3a:	617b      	str	r3, [r7, #20]
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2b07      	cmp	r3, #7
 800de40:	d9d4      	bls.n	800ddec <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	693a      	ldr	r2, [r7, #16]
 800de46:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de4c:	f1a3 0220 	sub.w	r2, r3, #32
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800de54:	bf00      	nop
 800de56:	3718      	adds	r7, #24
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	69db      	ldr	r3, [r3, #28]
 800de68:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	2b1f      	cmp	r3, #31
 800de70:	d93a      	bls.n	800dee8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800de72:	2300      	movs	r3, #0
 800de74:	617b      	str	r3, [r7, #20]
 800de76:	e02b      	b.n	800ded0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	781b      	ldrb	r3, [r3, #0]
 800de7c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	3301      	adds	r3, #1
 800de82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	021a      	lsls	r2, r3, #8
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	3301      	adds	r3, #1
 800de94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	041a      	lsls	r2, r3, #16
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	4313      	orrs	r3, r2
 800dea0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	3301      	adds	r3, #1
 800dea6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	061a      	lsls	r2, r3, #24
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	4313      	orrs	r3, r2
 800deb2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	3301      	adds	r3, #1
 800deb8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f107 020c 	add.w	r2, r7, #12
 800dec2:	4611      	mov	r1, r2
 800dec4:	4618      	mov	r0, r3
 800dec6:	f002 fcc6 	bl	8010856 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	3301      	adds	r3, #1
 800dece:	617b      	str	r3, [r7, #20]
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2b07      	cmp	r3, #7
 800ded4:	d9d0      	bls.n	800de78 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	f1a3 0220 	sub.w	r2, r3, #32
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	621a      	str	r2, [r3, #32]
  }
}
 800dee8:	bf00      	nop
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800def8:	bf00      	nop
 800defa:	370c      	adds	r7, #12
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800df0c:	bf00      	nop
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800df20:	bf00      	nop
 800df22:	370c      	adds	r7, #12
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b083      	sub	sp, #12
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800df34:	bf00      	nop
 800df36:	370c      	adds	r7, #12
 800df38:	46bd      	mov	sp, r7
 800df3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3e:	4770      	bx	lr

0800df40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	e049      	b.n	800dfe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d106      	bne.n	800df6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7f4 fb3a 	bl	80025e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3304      	adds	r3, #4
 800df7c:	4619      	mov	r1, r3
 800df7e:	4610      	mov	r0, r2
 800df80:	f000 fc58 	bl	800e834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2201      	movs	r2, #1
 800df90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2201      	movs	r2, #1
 800dfe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
	...

0800dff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	2b01      	cmp	r3, #1
 800e002:	d001      	beq.n	800e008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e05e      	b.n	800e0c6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2202      	movs	r2, #2
 800e00c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0201 	orr.w	r2, r2, #1
 800e01e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	4a2b      	ldr	r2, [pc, #172]	@ (800e0d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e026:	4293      	cmp	r3, r2
 800e028:	d02c      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e032:	d027      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4a27      	ldr	r2, [pc, #156]	@ (800e0d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d022      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	4a26      	ldr	r2, [pc, #152]	@ (800e0dc <HAL_TIM_Base_Start_IT+0xec>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d01d      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a24      	ldr	r2, [pc, #144]	@ (800e0e0 <HAL_TIM_Base_Start_IT+0xf0>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d018      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a23      	ldr	r2, [pc, #140]	@ (800e0e4 <HAL_TIM_Base_Start_IT+0xf4>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d013      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a21      	ldr	r2, [pc, #132]	@ (800e0e8 <HAL_TIM_Base_Start_IT+0xf8>)
 800e062:	4293      	cmp	r3, r2
 800e064:	d00e      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a20      	ldr	r2, [pc, #128]	@ (800e0ec <HAL_TIM_Base_Start_IT+0xfc>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d009      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4a1e      	ldr	r2, [pc, #120]	@ (800e0f0 <HAL_TIM_Base_Start_IT+0x100>)
 800e076:	4293      	cmp	r3, r2
 800e078:	d004      	beq.n	800e084 <HAL_TIM_Base_Start_IT+0x94>
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	4a1d      	ldr	r2, [pc, #116]	@ (800e0f4 <HAL_TIM_Base_Start_IT+0x104>)
 800e080:	4293      	cmp	r3, r2
 800e082:	d115      	bne.n	800e0b0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	689a      	ldr	r2, [r3, #8]
 800e08a:	4b1b      	ldr	r3, [pc, #108]	@ (800e0f8 <HAL_TIM_Base_Start_IT+0x108>)
 800e08c:	4013      	ands	r3, r2
 800e08e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2b06      	cmp	r3, #6
 800e094:	d015      	beq.n	800e0c2 <HAL_TIM_Base_Start_IT+0xd2>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e09c:	d011      	beq.n	800e0c2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	681a      	ldr	r2, [r3, #0]
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f042 0201 	orr.w	r2, r2, #1
 800e0ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0ae:	e008      	b.n	800e0c2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f042 0201 	orr.w	r2, r2, #1
 800e0be:	601a      	str	r2, [r3, #0]
 800e0c0:	e000      	b.n	800e0c4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr
 800e0d2:	bf00      	nop
 800e0d4:	40010000 	.word	0x40010000
 800e0d8:	40000400 	.word	0x40000400
 800e0dc:	40000800 	.word	0x40000800
 800e0e0:	40000c00 	.word	0x40000c00
 800e0e4:	40010400 	.word	0x40010400
 800e0e8:	40001800 	.word	0x40001800
 800e0ec:	40014000 	.word	0x40014000
 800e0f0:	4000e000 	.word	0x4000e000
 800e0f4:	4000e400 	.word	0x4000e400
 800e0f8:	00010007 	.word	0x00010007

0800e0fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e10a:	2301      	movs	r3, #1
 800e10c:	e049      	b.n	800e1a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e114:	b2db      	uxtb	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f841 	bl	800e1aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2202      	movs	r2, #2
 800e12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	3304      	adds	r3, #4
 800e138:	4619      	mov	r1, r3
 800e13a:	4610      	mov	r0, r2
 800e13c:	f000 fb7a 	bl	800e834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2201      	movs	r2, #1
 800e144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2201      	movs	r2, #1
 800e14c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2201      	movs	r2, #1
 800e154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2201      	movs	r2, #1
 800e164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2201      	movs	r2, #1
 800e16c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2201      	movs	r2, #1
 800e17c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2201      	movs	r2, #1
 800e184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3708      	adds	r7, #8
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1aa:	b480      	push	{r7}
 800e1ac:	b083      	sub	sp, #12
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1b2:	bf00      	nop
 800e1b4:	370c      	adds	r7, #12
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1bc:	4770      	bx	lr

0800e1be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b084      	sub	sp, #16
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	68db      	ldr	r3, [r3, #12]
 800e1cc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	691b      	ldr	r3, [r3, #16]
 800e1d4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d020      	beq.n	800e222 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f003 0302 	and.w	r3, r3, #2
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d01b      	beq.n	800e222 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f06f 0202 	mvn.w	r2, #2
 800e1f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	699b      	ldr	r3, [r3, #24]
 800e200:	f003 0303 	and.w	r3, r3, #3
 800e204:	2b00      	cmp	r3, #0
 800e206:	d003      	beq.n	800e210 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e208:	6878      	ldr	r0, [r7, #4]
 800e20a:	f000 faf5 	bl	800e7f8 <HAL_TIM_IC_CaptureCallback>
 800e20e:	e005      	b.n	800e21c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fae7 	bl	800e7e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 faf8 	bl	800e80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2200      	movs	r2, #0
 800e220:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d020      	beq.n	800e26e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	f003 0304 	and.w	r3, r3, #4
 800e232:	2b00      	cmp	r3, #0
 800e234:	d01b      	beq.n	800e26e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f06f 0204 	mvn.w	r2, #4
 800e23e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2202      	movs	r2, #2
 800e244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e250:	2b00      	cmp	r3, #0
 800e252:	d003      	beq.n	800e25c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 facf 	bl	800e7f8 <HAL_TIM_IC_CaptureCallback>
 800e25a:	e005      	b.n	800e268 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f000 fac1 	bl	800e7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fad2 	bl	800e80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	f003 0308 	and.w	r3, r3, #8
 800e274:	2b00      	cmp	r3, #0
 800e276:	d020      	beq.n	800e2ba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f003 0308 	and.w	r3, r3, #8
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d01b      	beq.n	800e2ba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f06f 0208 	mvn.w	r2, #8
 800e28a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2204      	movs	r2, #4
 800e290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	f003 0303 	and.w	r3, r3, #3
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d003      	beq.n	800e2a8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 faa9 	bl	800e7f8 <HAL_TIM_IC_CaptureCallback>
 800e2a6:	e005      	b.n	800e2b4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f000 fa9b 	bl	800e7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 faac 	bl	800e80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	f003 0310 	and.w	r3, r3, #16
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d020      	beq.n	800e306 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f003 0310 	and.w	r3, r3, #16
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d01b      	beq.n	800e306 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f06f 0210 	mvn.w	r2, #16
 800e2d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2208      	movs	r2, #8
 800e2dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	69db      	ldr	r3, [r3, #28]
 800e2e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d003      	beq.n	800e2f4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 fa83 	bl	800e7f8 <HAL_TIM_IC_CaptureCallback>
 800e2f2:	e005      	b.n	800e300 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 fa75 	bl	800e7e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 fa86 	bl	800e80c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	f003 0301 	and.w	r3, r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00c      	beq.n	800e32a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f003 0301 	and.w	r3, r3, #1
 800e316:	2b00      	cmp	r3, #0
 800e318:	d007      	beq.n	800e32a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f06f 0201 	mvn.w	r2, #1
 800e322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7f3 fc43 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e330:	2b00      	cmp	r3, #0
 800e332:	d104      	bne.n	800e33e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00c      	beq.n	800e358 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e344:	2b00      	cmp	r3, #0
 800e346:	d007      	beq.n	800e358 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 ffc6 	bl	800f2e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00c      	beq.n	800e37c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d007      	beq.n	800e37c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 ffbe 	bl	800f2f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00c      	beq.n	800e3a0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d007      	beq.n	800e3a0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 fa40 	bl	800e820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f003 0320 	and.w	r3, r3, #32
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00c      	beq.n	800e3c4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f003 0320 	and.w	r3, r3, #32
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d007      	beq.n	800e3c4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f06f 0220 	mvn.w	r2, #32
 800e3bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 ff86 	bl	800f2d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e3c4:	bf00      	nop
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b086      	sub	sp, #24
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	60f8      	str	r0, [r7, #12]
 800e3d4:	60b9      	str	r1, [r7, #8]
 800e3d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d101      	bne.n	800e3ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e3e6:	2302      	movs	r3, #2
 800e3e8:	e0ff      	b.n	800e5ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b14      	cmp	r3, #20
 800e3f6:	f200 80f0 	bhi.w	800e5da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e3fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e400 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e400:	0800e455 	.word	0x0800e455
 800e404:	0800e5db 	.word	0x0800e5db
 800e408:	0800e5db 	.word	0x0800e5db
 800e40c:	0800e5db 	.word	0x0800e5db
 800e410:	0800e495 	.word	0x0800e495
 800e414:	0800e5db 	.word	0x0800e5db
 800e418:	0800e5db 	.word	0x0800e5db
 800e41c:	0800e5db 	.word	0x0800e5db
 800e420:	0800e4d7 	.word	0x0800e4d7
 800e424:	0800e5db 	.word	0x0800e5db
 800e428:	0800e5db 	.word	0x0800e5db
 800e42c:	0800e5db 	.word	0x0800e5db
 800e430:	0800e517 	.word	0x0800e517
 800e434:	0800e5db 	.word	0x0800e5db
 800e438:	0800e5db 	.word	0x0800e5db
 800e43c:	0800e5db 	.word	0x0800e5db
 800e440:	0800e559 	.word	0x0800e559
 800e444:	0800e5db 	.word	0x0800e5db
 800e448:	0800e5db 	.word	0x0800e5db
 800e44c:	0800e5db 	.word	0x0800e5db
 800e450:	0800e599 	.word	0x0800e599
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68b9      	ldr	r1, [r7, #8]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f000 fa9c 	bl	800e998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	699a      	ldr	r2, [r3, #24]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f042 0208 	orr.w	r2, r2, #8
 800e46e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	699a      	ldr	r2, [r3, #24]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f022 0204 	bic.w	r2, r2, #4
 800e47e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6999      	ldr	r1, [r3, #24]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	691a      	ldr	r2, [r3, #16]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	430a      	orrs	r2, r1
 800e490:	619a      	str	r2, [r3, #24]
      break;
 800e492:	e0a5      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68b9      	ldr	r1, [r7, #8]
 800e49a:	4618      	mov	r0, r3
 800e49c:	f000 fb0c 	bl	800eab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	699a      	ldr	r2, [r3, #24]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	699a      	ldr	r2, [r3, #24]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	6999      	ldr	r1, [r3, #24]
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	691b      	ldr	r3, [r3, #16]
 800e4ca:	021a      	lsls	r2, r3, #8
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	619a      	str	r2, [r3, #24]
      break;
 800e4d4:	e084      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fb75 	bl	800ebcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	69da      	ldr	r2, [r3, #28]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f042 0208 	orr.w	r2, r2, #8
 800e4f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	69da      	ldr	r2, [r3, #28]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f022 0204 	bic.w	r2, r2, #4
 800e500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	69d9      	ldr	r1, [r3, #28]
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	691a      	ldr	r2, [r3, #16]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	430a      	orrs	r2, r1
 800e512:	61da      	str	r2, [r3, #28]
      break;
 800e514:	e064      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68b9      	ldr	r1, [r7, #8]
 800e51c:	4618      	mov	r0, r3
 800e51e:	f000 fbdd 	bl	800ecdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69da      	ldr	r2, [r3, #28]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	69da      	ldr	r2, [r3, #28]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	69d9      	ldr	r1, [r3, #28]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	691b      	ldr	r3, [r3, #16]
 800e54c:	021a      	lsls	r2, r3, #8
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	430a      	orrs	r2, r1
 800e554:	61da      	str	r2, [r3, #28]
      break;
 800e556:	e043      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68b9      	ldr	r1, [r7, #8]
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 fc26 	bl	800edb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f042 0208 	orr.w	r2, r2, #8
 800e572:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 0204 	bic.w	r2, r2, #4
 800e582:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	691a      	ldr	r2, [r3, #16]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	430a      	orrs	r2, r1
 800e594:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e596:	e023      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68b9      	ldr	r1, [r7, #8]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 fc6a 	bl	800ee78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	021a      	lsls	r2, r3, #8
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	430a      	orrs	r2, r1
 800e5d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e5d8:	e002      	b.n	800e5e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e5da:	2301      	movs	r3, #1
 800e5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800e5de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3718      	adds	r7, #24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop

0800e5f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b084      	sub	sp, #16
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5fe:	2300      	movs	r3, #0
 800e600:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d101      	bne.n	800e610 <HAL_TIM_ConfigClockSource+0x1c>
 800e60c:	2302      	movs	r3, #2
 800e60e:	e0dc      	b.n	800e7ca <HAL_TIM_ConfigClockSource+0x1d6>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2201      	movs	r2, #1
 800e614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2202      	movs	r2, #2
 800e61c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e628:	68ba      	ldr	r2, [r7, #8]
 800e62a:	4b6a      	ldr	r3, [pc, #424]	@ (800e7d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e62c:	4013      	ands	r3, r2
 800e62e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a64      	ldr	r2, [pc, #400]	@ (800e7d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e646:	4293      	cmp	r3, r2
 800e648:	f000 80a9 	beq.w	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e64c:	4a62      	ldr	r2, [pc, #392]	@ (800e7d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	f200 80ae 	bhi.w	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e654:	4a61      	ldr	r2, [pc, #388]	@ (800e7dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e656:	4293      	cmp	r3, r2
 800e658:	f000 80a1 	beq.w	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e65c:	4a5f      	ldr	r2, [pc, #380]	@ (800e7dc <HAL_TIM_ConfigClockSource+0x1e8>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	f200 80a6 	bhi.w	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e664:	4a5e      	ldr	r2, [pc, #376]	@ (800e7e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e666:	4293      	cmp	r3, r2
 800e668:	f000 8099 	beq.w	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e66c:	4a5c      	ldr	r2, [pc, #368]	@ (800e7e0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	f200 809e 	bhi.w	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e674:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e678:	f000 8091 	beq.w	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e67c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e680:	f200 8096 	bhi.w	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e684:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e688:	f000 8089 	beq.w	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e68c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e690:	f200 808e 	bhi.w	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e694:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e698:	d03e      	beq.n	800e718 <HAL_TIM_ConfigClockSource+0x124>
 800e69a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e69e:	f200 8087 	bhi.w	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6a6:	f000 8086 	beq.w	800e7b6 <HAL_TIM_ConfigClockSource+0x1c2>
 800e6aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e6ae:	d87f      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6b0:	2b70      	cmp	r3, #112	@ 0x70
 800e6b2:	d01a      	beq.n	800e6ea <HAL_TIM_ConfigClockSource+0xf6>
 800e6b4:	2b70      	cmp	r3, #112	@ 0x70
 800e6b6:	d87b      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6b8:	2b60      	cmp	r3, #96	@ 0x60
 800e6ba:	d050      	beq.n	800e75e <HAL_TIM_ConfigClockSource+0x16a>
 800e6bc:	2b60      	cmp	r3, #96	@ 0x60
 800e6be:	d877      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6c0:	2b50      	cmp	r3, #80	@ 0x50
 800e6c2:	d03c      	beq.n	800e73e <HAL_TIM_ConfigClockSource+0x14a>
 800e6c4:	2b50      	cmp	r3, #80	@ 0x50
 800e6c6:	d873      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6c8:	2b40      	cmp	r3, #64	@ 0x40
 800e6ca:	d058      	beq.n	800e77e <HAL_TIM_ConfigClockSource+0x18a>
 800e6cc:	2b40      	cmp	r3, #64	@ 0x40
 800e6ce:	d86f      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6d0:	2b30      	cmp	r3, #48	@ 0x30
 800e6d2:	d064      	beq.n	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e6d4:	2b30      	cmp	r3, #48	@ 0x30
 800e6d6:	d86b      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6d8:	2b20      	cmp	r3, #32
 800e6da:	d060      	beq.n	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e6dc:	2b20      	cmp	r3, #32
 800e6de:	d867      	bhi.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d05c      	beq.n	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e6e4:	2b10      	cmp	r3, #16
 800e6e6:	d05a      	beq.n	800e79e <HAL_TIM_ConfigClockSource+0x1aa>
 800e6e8:	e062      	b.n	800e7b0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e6fa:	f000 fca1 	bl	800f040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	689b      	ldr	r3, [r3, #8]
 800e704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e70c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	68ba      	ldr	r2, [r7, #8]
 800e714:	609a      	str	r2, [r3, #8]
      break;
 800e716:	e04f      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e728:	f000 fc8a 	bl	800f040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	689a      	ldr	r2, [r3, #8]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e73a:	609a      	str	r2, [r3, #8]
      break;
 800e73c:	e03c      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e74a:	461a      	mov	r2, r3
 800e74c:	f000 fbfa 	bl	800ef44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	2150      	movs	r1, #80	@ 0x50
 800e756:	4618      	mov	r0, r3
 800e758:	f000 fc54 	bl	800f004 <TIM_ITRx_SetConfig>
      break;
 800e75c:	e02c      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e76a:	461a      	mov	r2, r3
 800e76c:	f000 fc19 	bl	800efa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2160      	movs	r1, #96	@ 0x60
 800e776:	4618      	mov	r0, r3
 800e778:	f000 fc44 	bl	800f004 <TIM_ITRx_SetConfig>
      break;
 800e77c:	e01c      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e78a:	461a      	mov	r2, r3
 800e78c:	f000 fbda 	bl	800ef44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2140      	movs	r1, #64	@ 0x40
 800e796:	4618      	mov	r0, r3
 800e798:	f000 fc34 	bl	800f004 <TIM_ITRx_SetConfig>
      break;
 800e79c:	e00c      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	f000 fc2b 	bl	800f004 <TIM_ITRx_SetConfig>
      break;
 800e7ae:	e003      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7b4:	e000      	b.n	800e7b8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e7b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	ffceff88 	.word	0xffceff88
 800e7d8:	00100040 	.word	0x00100040
 800e7dc:	00100030 	.word	0x00100030
 800e7e0:	00100020 	.word	0x00100020

0800e7e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e800:	bf00      	nop
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e814:	bf00      	nop
 800e816:	370c      	adds	r7, #12
 800e818:	46bd      	mov	sp, r7
 800e81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e81e:	4770      	bx	lr

0800e820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e820:	b480      	push	{r7}
 800e822:	b083      	sub	sp, #12
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e828:	bf00      	nop
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a4a      	ldr	r2, [pc, #296]	@ (800e970 <TIM_Base_SetConfig+0x13c>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d013      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e852:	d00f      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a47      	ldr	r2, [pc, #284]	@ (800e974 <TIM_Base_SetConfig+0x140>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d00b      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a46      	ldr	r2, [pc, #280]	@ (800e978 <TIM_Base_SetConfig+0x144>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d007      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a45      	ldr	r2, [pc, #276]	@ (800e97c <TIM_Base_SetConfig+0x148>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d003      	beq.n	800e874 <TIM_Base_SetConfig+0x40>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a44      	ldr	r2, [pc, #272]	@ (800e980 <TIM_Base_SetConfig+0x14c>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d108      	bne.n	800e886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e87a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	4313      	orrs	r3, r2
 800e884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a39      	ldr	r2, [pc, #228]	@ (800e970 <TIM_Base_SetConfig+0x13c>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d027      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e894:	d023      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	4a36      	ldr	r2, [pc, #216]	@ (800e974 <TIM_Base_SetConfig+0x140>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d01f      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	4a35      	ldr	r2, [pc, #212]	@ (800e978 <TIM_Base_SetConfig+0x144>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d01b      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	4a34      	ldr	r2, [pc, #208]	@ (800e97c <TIM_Base_SetConfig+0x148>)
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	d017      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	4a33      	ldr	r2, [pc, #204]	@ (800e980 <TIM_Base_SetConfig+0x14c>)
 800e8b2:	4293      	cmp	r3, r2
 800e8b4:	d013      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4a32      	ldr	r2, [pc, #200]	@ (800e984 <TIM_Base_SetConfig+0x150>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d00f      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4a31      	ldr	r2, [pc, #196]	@ (800e988 <TIM_Base_SetConfig+0x154>)
 800e8c2:	4293      	cmp	r3, r2
 800e8c4:	d00b      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	4a30      	ldr	r2, [pc, #192]	@ (800e98c <TIM_Base_SetConfig+0x158>)
 800e8ca:	4293      	cmp	r3, r2
 800e8cc:	d007      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4a2f      	ldr	r2, [pc, #188]	@ (800e990 <TIM_Base_SetConfig+0x15c>)
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d003      	beq.n	800e8de <TIM_Base_SetConfig+0xaa>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	4a2e      	ldr	r2, [pc, #184]	@ (800e994 <TIM_Base_SetConfig+0x160>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d108      	bne.n	800e8f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	4313      	orrs	r3, r2
 800e8fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68fa      	ldr	r2, [r7, #12]
 800e902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	689a      	ldr	r2, [r3, #8]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	4a16      	ldr	r2, [pc, #88]	@ (800e970 <TIM_Base_SetConfig+0x13c>)
 800e918:	4293      	cmp	r3, r2
 800e91a:	d00f      	beq.n	800e93c <TIM_Base_SetConfig+0x108>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a18      	ldr	r2, [pc, #96]	@ (800e980 <TIM_Base_SetConfig+0x14c>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d00b      	beq.n	800e93c <TIM_Base_SetConfig+0x108>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a17      	ldr	r2, [pc, #92]	@ (800e984 <TIM_Base_SetConfig+0x150>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d007      	beq.n	800e93c <TIM_Base_SetConfig+0x108>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a16      	ldr	r2, [pc, #88]	@ (800e988 <TIM_Base_SetConfig+0x154>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d003      	beq.n	800e93c <TIM_Base_SetConfig+0x108>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a15      	ldr	r2, [pc, #84]	@ (800e98c <TIM_Base_SetConfig+0x158>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d103      	bne.n	800e944 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	691a      	ldr	r2, [r3, #16]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	2b01      	cmp	r3, #1
 800e954:	d105      	bne.n	800e962 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	691b      	ldr	r3, [r3, #16]
 800e95a:	f023 0201 	bic.w	r2, r3, #1
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	611a      	str	r2, [r3, #16]
  }
}
 800e962:	bf00      	nop
 800e964:	3714      	adds	r7, #20
 800e966:	46bd      	mov	sp, r7
 800e968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop
 800e970:	40010000 	.word	0x40010000
 800e974:	40000400 	.word	0x40000400
 800e978:	40000800 	.word	0x40000800
 800e97c:	40000c00 	.word	0x40000c00
 800e980:	40010400 	.word	0x40010400
 800e984:	40014000 	.word	0x40014000
 800e988:	40014400 	.word	0x40014400
 800e98c:	40014800 	.word	0x40014800
 800e990:	4000e000 	.word	0x4000e000
 800e994:	4000e400 	.word	0x4000e400

0800e998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e998:	b480      	push	{r7}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6a1b      	ldr	r3, [r3, #32]
 800e9a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6a1b      	ldr	r3, [r3, #32]
 800e9ac:	f023 0201 	bic.w	r2, r3, #1
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	685b      	ldr	r3, [r3, #4]
 800e9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	699b      	ldr	r3, [r3, #24]
 800e9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	4b37      	ldr	r3, [pc, #220]	@ (800eaa0 <TIM_OC1_SetConfig+0x108>)
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f023 0303 	bic.w	r3, r3, #3
 800e9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	f023 0302 	bic.w	r3, r3, #2
 800e9e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
 800e9e6:	697a      	ldr	r2, [r7, #20]
 800e9e8:	4313      	orrs	r3, r2
 800e9ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a2d      	ldr	r2, [pc, #180]	@ (800eaa4 <TIM_OC1_SetConfig+0x10c>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d00f      	beq.n	800ea14 <TIM_OC1_SetConfig+0x7c>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	4a2c      	ldr	r2, [pc, #176]	@ (800eaa8 <TIM_OC1_SetConfig+0x110>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d00b      	beq.n	800ea14 <TIM_OC1_SetConfig+0x7c>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	4a2b      	ldr	r2, [pc, #172]	@ (800eaac <TIM_OC1_SetConfig+0x114>)
 800ea00:	4293      	cmp	r3, r2
 800ea02:	d007      	beq.n	800ea14 <TIM_OC1_SetConfig+0x7c>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a2a      	ldr	r2, [pc, #168]	@ (800eab0 <TIM_OC1_SetConfig+0x118>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d003      	beq.n	800ea14 <TIM_OC1_SetConfig+0x7c>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	4a29      	ldr	r2, [pc, #164]	@ (800eab4 <TIM_OC1_SetConfig+0x11c>)
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d10c      	bne.n	800ea2e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	f023 0308 	bic.w	r3, r3, #8
 800ea1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	697a      	ldr	r2, [r7, #20]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f023 0304 	bic.w	r3, r3, #4
 800ea2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	4a1c      	ldr	r2, [pc, #112]	@ (800eaa4 <TIM_OC1_SetConfig+0x10c>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d00f      	beq.n	800ea56 <TIM_OC1_SetConfig+0xbe>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4a1b      	ldr	r2, [pc, #108]	@ (800eaa8 <TIM_OC1_SetConfig+0x110>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d00b      	beq.n	800ea56 <TIM_OC1_SetConfig+0xbe>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a1a      	ldr	r2, [pc, #104]	@ (800eaac <TIM_OC1_SetConfig+0x114>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d007      	beq.n	800ea56 <TIM_OC1_SetConfig+0xbe>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a19      	ldr	r2, [pc, #100]	@ (800eab0 <TIM_OC1_SetConfig+0x118>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d003      	beq.n	800ea56 <TIM_OC1_SetConfig+0xbe>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a18      	ldr	r2, [pc, #96]	@ (800eab4 <TIM_OC1_SetConfig+0x11c>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d111      	bne.n	800ea7a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	693a      	ldr	r2, [r7, #16]
 800ea6c:	4313      	orrs	r3, r2
 800ea6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	693a      	ldr	r2, [r7, #16]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	693a      	ldr	r2, [r7, #16]
 800ea7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	685a      	ldr	r2, [r3, #4]
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	697a      	ldr	r2, [r7, #20]
 800ea92:	621a      	str	r2, [r3, #32]
}
 800ea94:	bf00      	nop
 800ea96:	371c      	adds	r7, #28
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr
 800eaa0:	fffeff8f 	.word	0xfffeff8f
 800eaa4:	40010000 	.word	0x40010000
 800eaa8:	40010400 	.word	0x40010400
 800eaac:	40014000 	.word	0x40014000
 800eab0:	40014400 	.word	0x40014400
 800eab4:	40014800 	.word	0x40014800

0800eab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a1b      	ldr	r3, [r3, #32]
 800eacc:	f023 0210 	bic.w	r2, r3, #16
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	699b      	ldr	r3, [r3, #24]
 800eade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4b34      	ldr	r3, [pc, #208]	@ (800ebb4 <TIM_OC2_SetConfig+0xfc>)
 800eae4:	4013      	ands	r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eaee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	021b      	lsls	r3, r3, #8
 800eaf6:	68fa      	ldr	r2, [r7, #12]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	f023 0320 	bic.w	r3, r3, #32
 800eb02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	011b      	lsls	r3, r3, #4
 800eb0a:	697a      	ldr	r2, [r7, #20]
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	4a29      	ldr	r2, [pc, #164]	@ (800ebb8 <TIM_OC2_SetConfig+0x100>)
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d003      	beq.n	800eb20 <TIM_OC2_SetConfig+0x68>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4a28      	ldr	r2, [pc, #160]	@ (800ebbc <TIM_OC2_SetConfig+0x104>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d10d      	bne.n	800eb3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	68db      	ldr	r3, [r3, #12]
 800eb2c:	011b      	lsls	r3, r3, #4
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	4313      	orrs	r3, r2
 800eb32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a1e      	ldr	r2, [pc, #120]	@ (800ebb8 <TIM_OC2_SetConfig+0x100>)
 800eb40:	4293      	cmp	r3, r2
 800eb42:	d00f      	beq.n	800eb64 <TIM_OC2_SetConfig+0xac>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	4a1d      	ldr	r2, [pc, #116]	@ (800ebbc <TIM_OC2_SetConfig+0x104>)
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	d00b      	beq.n	800eb64 <TIM_OC2_SetConfig+0xac>
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	4a1c      	ldr	r2, [pc, #112]	@ (800ebc0 <TIM_OC2_SetConfig+0x108>)
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d007      	beq.n	800eb64 <TIM_OC2_SetConfig+0xac>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc4 <TIM_OC2_SetConfig+0x10c>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d003      	beq.n	800eb64 <TIM_OC2_SetConfig+0xac>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	4a1a      	ldr	r2, [pc, #104]	@ (800ebc8 <TIM_OC2_SetConfig+0x110>)
 800eb60:	4293      	cmp	r3, r2
 800eb62:	d113      	bne.n	800eb8c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eb6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	695b      	ldr	r3, [r3, #20]
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	693a      	ldr	r2, [r7, #16]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	693a      	ldr	r2, [r7, #16]
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68fa      	ldr	r2, [r7, #12]
 800eb96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	697a      	ldr	r2, [r7, #20]
 800eba4:	621a      	str	r2, [r3, #32]
}
 800eba6:	bf00      	nop
 800eba8:	371c      	adds	r7, #28
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	feff8fff 	.word	0xfeff8fff
 800ebb8:	40010000 	.word	0x40010000
 800ebbc:	40010400 	.word	0x40010400
 800ebc0:	40014000 	.word	0x40014000
 800ebc4:	40014400 	.word	0x40014400
 800ebc8:	40014800 	.word	0x40014800

0800ebcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b087      	sub	sp, #28
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	6a1b      	ldr	r3, [r3, #32]
 800ebda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a1b      	ldr	r3, [r3, #32]
 800ebe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	685b      	ldr	r3, [r3, #4]
 800ebec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	4b33      	ldr	r3, [pc, #204]	@ (800ecc4 <TIM_OC3_SetConfig+0xf8>)
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f023 0303 	bic.w	r3, r3, #3
 800ec02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	021b      	lsls	r3, r3, #8
 800ec1c:	697a      	ldr	r2, [r7, #20]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	4a28      	ldr	r2, [pc, #160]	@ (800ecc8 <TIM_OC3_SetConfig+0xfc>)
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d003      	beq.n	800ec32 <TIM_OC3_SetConfig+0x66>
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4a27      	ldr	r2, [pc, #156]	@ (800eccc <TIM_OC3_SetConfig+0x100>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d10d      	bne.n	800ec4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	021b      	lsls	r3, r3, #8
 800ec40:	697a      	ldr	r2, [r7, #20]
 800ec42:	4313      	orrs	r3, r2
 800ec44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	4a1d      	ldr	r2, [pc, #116]	@ (800ecc8 <TIM_OC3_SetConfig+0xfc>)
 800ec52:	4293      	cmp	r3, r2
 800ec54:	d00f      	beq.n	800ec76 <TIM_OC3_SetConfig+0xaa>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4a1c      	ldr	r2, [pc, #112]	@ (800eccc <TIM_OC3_SetConfig+0x100>)
 800ec5a:	4293      	cmp	r3, r2
 800ec5c:	d00b      	beq.n	800ec76 <TIM_OC3_SetConfig+0xaa>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	4a1b      	ldr	r2, [pc, #108]	@ (800ecd0 <TIM_OC3_SetConfig+0x104>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d007      	beq.n	800ec76 <TIM_OC3_SetConfig+0xaa>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4a1a      	ldr	r2, [pc, #104]	@ (800ecd4 <TIM_OC3_SetConfig+0x108>)
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	d003      	beq.n	800ec76 <TIM_OC3_SetConfig+0xaa>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4a19      	ldr	r2, [pc, #100]	@ (800ecd8 <TIM_OC3_SetConfig+0x10c>)
 800ec72:	4293      	cmp	r3, r2
 800ec74:	d113      	bne.n	800ec9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	695b      	ldr	r3, [r3, #20]
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec92:	683b      	ldr	r3, [r7, #0]
 800ec94:	699b      	ldr	r3, [r3, #24]
 800ec96:	011b      	lsls	r3, r3, #4
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	4313      	orrs	r3, r2
 800ec9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	685a      	ldr	r2, [r3, #4]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	697a      	ldr	r2, [r7, #20]
 800ecb6:	621a      	str	r2, [r3, #32]
}
 800ecb8:	bf00      	nop
 800ecba:	371c      	adds	r7, #28
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	fffeff8f 	.word	0xfffeff8f
 800ecc8:	40010000 	.word	0x40010000
 800eccc:	40010400 	.word	0x40010400
 800ecd0:	40014000 	.word	0x40014000
 800ecd4:	40014400 	.word	0x40014400
 800ecd8:	40014800 	.word	0x40014800

0800ecdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	4b24      	ldr	r3, [pc, #144]	@ (800ed98 <TIM_OC4_SetConfig+0xbc>)
 800ed08:	4013      	ands	r3, r2
 800ed0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	021b      	lsls	r3, r3, #8
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	031b      	lsls	r3, r3, #12
 800ed2e:	693a      	ldr	r2, [r7, #16]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4a19      	ldr	r2, [pc, #100]	@ (800ed9c <TIM_OC4_SetConfig+0xc0>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d00f      	beq.n	800ed5c <TIM_OC4_SetConfig+0x80>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a18      	ldr	r2, [pc, #96]	@ (800eda0 <TIM_OC4_SetConfig+0xc4>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d00b      	beq.n	800ed5c <TIM_OC4_SetConfig+0x80>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	4a17      	ldr	r2, [pc, #92]	@ (800eda4 <TIM_OC4_SetConfig+0xc8>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d007      	beq.n	800ed5c <TIM_OC4_SetConfig+0x80>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	4a16      	ldr	r2, [pc, #88]	@ (800eda8 <TIM_OC4_SetConfig+0xcc>)
 800ed50:	4293      	cmp	r3, r2
 800ed52:	d003      	beq.n	800ed5c <TIM_OC4_SetConfig+0x80>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a15      	ldr	r2, [pc, #84]	@ (800edac <TIM_OC4_SetConfig+0xd0>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d109      	bne.n	800ed70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed5c:	697b      	ldr	r3, [r7, #20]
 800ed5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	695b      	ldr	r3, [r3, #20]
 800ed68:	019b      	lsls	r3, r3, #6
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685a      	ldr	r2, [r3, #4]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	693a      	ldr	r2, [r7, #16]
 800ed88:	621a      	str	r2, [r3, #32]
}
 800ed8a:	bf00      	nop
 800ed8c:	371c      	adds	r7, #28
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop
 800ed98:	feff8fff 	.word	0xfeff8fff
 800ed9c:	40010000 	.word	0x40010000
 800eda0:	40010400 	.word	0x40010400
 800eda4:	40014000 	.word	0x40014000
 800eda8:	40014400 	.word	0x40014400
 800edac:	40014800 	.word	0x40014800

0800edb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b087      	sub	sp, #28
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6a1b      	ldr	r3, [r3, #32]
 800edbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	6a1b      	ldr	r3, [r3, #32]
 800edc4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	4b21      	ldr	r3, [pc, #132]	@ (800ee60 <TIM_OC5_SetConfig+0xb0>)
 800eddc:	4013      	ands	r3, r2
 800edde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	4313      	orrs	r3, r2
 800ede8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800edf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	041b      	lsls	r3, r3, #16
 800edf8:	693a      	ldr	r2, [r7, #16]
 800edfa:	4313      	orrs	r3, r2
 800edfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a18      	ldr	r2, [pc, #96]	@ (800ee64 <TIM_OC5_SetConfig+0xb4>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d00f      	beq.n	800ee26 <TIM_OC5_SetConfig+0x76>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a17      	ldr	r2, [pc, #92]	@ (800ee68 <TIM_OC5_SetConfig+0xb8>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d00b      	beq.n	800ee26 <TIM_OC5_SetConfig+0x76>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4a16      	ldr	r2, [pc, #88]	@ (800ee6c <TIM_OC5_SetConfig+0xbc>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d007      	beq.n	800ee26 <TIM_OC5_SetConfig+0x76>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4a15      	ldr	r2, [pc, #84]	@ (800ee70 <TIM_OC5_SetConfig+0xc0>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d003      	beq.n	800ee26 <TIM_OC5_SetConfig+0x76>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a14      	ldr	r2, [pc, #80]	@ (800ee74 <TIM_OC5_SetConfig+0xc4>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d109      	bne.n	800ee3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	021b      	lsls	r3, r3, #8
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	4313      	orrs	r3, r2
 800ee38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	697a      	ldr	r2, [r7, #20]
 800ee3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	621a      	str	r2, [r3, #32]
}
 800ee54:	bf00      	nop
 800ee56:	371c      	adds	r7, #28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	fffeff8f 	.word	0xfffeff8f
 800ee64:	40010000 	.word	0x40010000
 800ee68:	40010400 	.word	0x40010400
 800ee6c:	40014000 	.word	0x40014000
 800ee70:	40014400 	.word	0x40014400
 800ee74:	40014800 	.word	0x40014800

0800ee78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee78:	b480      	push	{r7}
 800ee7a:	b087      	sub	sp, #28
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	6078      	str	r0, [r7, #4]
 800ee80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a1b      	ldr	r3, [r3, #32]
 800ee86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6a1b      	ldr	r3, [r3, #32]
 800ee8c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	4b22      	ldr	r3, [pc, #136]	@ (800ef2c <TIM_OC6_SetConfig+0xb4>)
 800eea4:	4013      	ands	r3, r2
 800eea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	021b      	lsls	r3, r3, #8
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eeba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	051b      	lsls	r3, r3, #20
 800eec2:	693a      	ldr	r2, [r7, #16]
 800eec4:	4313      	orrs	r3, r2
 800eec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a19      	ldr	r2, [pc, #100]	@ (800ef30 <TIM_OC6_SetConfig+0xb8>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d00f      	beq.n	800eef0 <TIM_OC6_SetConfig+0x78>
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	4a18      	ldr	r2, [pc, #96]	@ (800ef34 <TIM_OC6_SetConfig+0xbc>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d00b      	beq.n	800eef0 <TIM_OC6_SetConfig+0x78>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4a17      	ldr	r2, [pc, #92]	@ (800ef38 <TIM_OC6_SetConfig+0xc0>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d007      	beq.n	800eef0 <TIM_OC6_SetConfig+0x78>
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	4a16      	ldr	r2, [pc, #88]	@ (800ef3c <TIM_OC6_SetConfig+0xc4>)
 800eee4:	4293      	cmp	r3, r2
 800eee6:	d003      	beq.n	800eef0 <TIM_OC6_SetConfig+0x78>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	4a15      	ldr	r2, [pc, #84]	@ (800ef40 <TIM_OC6_SetConfig+0xc8>)
 800eeec:	4293      	cmp	r3, r2
 800eeee:	d109      	bne.n	800ef04 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eef6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	695b      	ldr	r3, [r3, #20]
 800eefc:	029b      	lsls	r3, r3, #10
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	4313      	orrs	r3, r2
 800ef02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	697a      	ldr	r2, [r7, #20]
 800ef08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	685a      	ldr	r2, [r3, #4]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	621a      	str	r2, [r3, #32]
}
 800ef1e:	bf00      	nop
 800ef20:	371c      	adds	r7, #28
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	feff8fff 	.word	0xfeff8fff
 800ef30:	40010000 	.word	0x40010000
 800ef34:	40010400 	.word	0x40010400
 800ef38:	40014000 	.word	0x40014000
 800ef3c:	40014400 	.word	0x40014400
 800ef40:	40014800 	.word	0x40014800

0800ef44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b087      	sub	sp, #28
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	60b9      	str	r1, [r7, #8]
 800ef4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6a1b      	ldr	r3, [r3, #32]
 800ef54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	6a1b      	ldr	r3, [r3, #32]
 800ef5a:	f023 0201 	bic.w	r2, r3, #1
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	699b      	ldr	r3, [r3, #24]
 800ef66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	011b      	lsls	r3, r3, #4
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	f023 030a 	bic.w	r3, r3, #10
 800ef80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ef82:	697a      	ldr	r2, [r7, #20]
 800ef84:	68bb      	ldr	r3, [r7, #8]
 800ef86:	4313      	orrs	r3, r2
 800ef88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	693a      	ldr	r2, [r7, #16]
 800ef8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	697a      	ldr	r2, [r7, #20]
 800ef94:	621a      	str	r2, [r3, #32]
}
 800ef96:	bf00      	nop
 800ef98:	371c      	adds	r7, #28
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr

0800efa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800efa2:	b480      	push	{r7}
 800efa4:	b087      	sub	sp, #28
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	60f8      	str	r0, [r7, #12]
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	6a1b      	ldr	r3, [r3, #32]
 800efb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6a1b      	ldr	r3, [r3, #32]
 800efb8:	f023 0210 	bic.w	r2, r3, #16
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800efcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	031b      	lsls	r3, r3, #12
 800efd2:	693a      	ldr	r2, [r7, #16]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800efde:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	011b      	lsls	r3, r3, #4
 800efe4:	697a      	ldr	r2, [r7, #20]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	693a      	ldr	r2, [r7, #16]
 800efee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	697a      	ldr	r2, [r7, #20]
 800eff4:	621a      	str	r2, [r3, #32]
}
 800eff6:	bf00      	nop
 800eff8:	371c      	adds	r7, #28
 800effa:	46bd      	mov	sp, r7
 800effc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f000:	4770      	bx	lr
	...

0800f004 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
 800f00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	689b      	ldr	r3, [r3, #8]
 800f012:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	4b09      	ldr	r3, [pc, #36]	@ (800f03c <TIM_ITRx_SetConfig+0x38>)
 800f018:	4013      	ands	r3, r2
 800f01a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	4313      	orrs	r3, r2
 800f022:	f043 0307 	orr.w	r3, r3, #7
 800f026:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	609a      	str	r2, [r3, #8]
}
 800f02e:	bf00      	nop
 800f030:	3714      	adds	r7, #20
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	ffcfff8f 	.word	0xffcfff8f

0800f040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f040:	b480      	push	{r7}
 800f042:	b087      	sub	sp, #28
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	689b      	ldr	r3, [r3, #8]
 800f052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f05a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	021a      	lsls	r2, r3, #8
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	431a      	orrs	r2, r3
 800f064:	68bb      	ldr	r3, [r7, #8]
 800f066:	4313      	orrs	r3, r2
 800f068:	697a      	ldr	r2, [r7, #20]
 800f06a:	4313      	orrs	r3, r2
 800f06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	609a      	str	r2, [r3, #8]
}
 800f074:	bf00      	nop
 800f076:	371c      	adds	r7, #28
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f080:	b480      	push	{r7}
 800f082:	b085      	sub	sp, #20
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
 800f088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f090:	2b01      	cmp	r3, #1
 800f092:	d101      	bne.n	800f098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f094:	2302      	movs	r3, #2
 800f096:	e077      	b.n	800f188 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2201      	movs	r2, #1
 800f09c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2202      	movs	r2, #2
 800f0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	689b      	ldr	r3, [r3, #8]
 800f0b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a35      	ldr	r2, [pc, #212]	@ (800f194 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d004      	beq.n	800f0cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	4a34      	ldr	r2, [pc, #208]	@ (800f198 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0c8:	4293      	cmp	r3, r2
 800f0ca:	d108      	bne.n	800f0de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f0d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	68fa      	ldr	r2, [r7, #12]
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	68fa      	ldr	r2, [r7, #12]
 800f0f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a25      	ldr	r2, [pc, #148]	@ (800f194 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d02c      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f10a:	d027      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a22      	ldr	r2, [pc, #136]	@ (800f19c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d022      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a21      	ldr	r2, [pc, #132]	@ (800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d01d      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	4a1f      	ldr	r2, [pc, #124]	@ (800f1a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d018      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4a1a      	ldr	r2, [pc, #104]	@ (800f198 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d013      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	4a1b      	ldr	r2, [pc, #108]	@ (800f1a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d00e      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	4a1a      	ldr	r2, [pc, #104]	@ (800f1ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d009      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a18      	ldr	r2, [pc, #96]	@ (800f1b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d004      	beq.n	800f15c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	4a17      	ldr	r2, [pc, #92]	@ (800f1b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d10c      	bne.n	800f176 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f162:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	689b      	ldr	r3, [r3, #8]
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	4313      	orrs	r3, r2
 800f16c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68ba      	ldr	r2, [r7, #8]
 800f174:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	2201      	movs	r2, #1
 800f17a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr
 800f194:	40010000 	.word	0x40010000
 800f198:	40010400 	.word	0x40010400
 800f19c:	40000400 	.word	0x40000400
 800f1a0:	40000800 	.word	0x40000800
 800f1a4:	40000c00 	.word	0x40000c00
 800f1a8:	40001800 	.word	0x40001800
 800f1ac:	40014000 	.word	0x40014000
 800f1b0:	4000e000 	.word	0x4000e000
 800f1b4:	4000e400 	.word	0x4000e400

0800f1b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f1b8:	b480      	push	{r7}
 800f1ba:	b085      	sub	sp, #20
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1cc:	2b01      	cmp	r3, #1
 800f1ce:	d101      	bne.n	800f1d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f1d0:	2302      	movs	r3, #2
 800f1d2:	e073      	b.n	800f2bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	68db      	ldr	r3, [r3, #12]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	4313      	orrs	r3, r2
 800f1f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	4313      	orrs	r3, r2
 800f204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4313      	orrs	r3, r2
 800f212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	691b      	ldr	r3, [r3, #16]
 800f21e:	4313      	orrs	r3, r2
 800f220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	695b      	ldr	r3, [r3, #20]
 800f22c:	4313      	orrs	r3, r2
 800f22e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f23a:	4313      	orrs	r3, r2
 800f23c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	699b      	ldr	r3, [r3, #24]
 800f248:	041b      	lsls	r3, r3, #16
 800f24a:	4313      	orrs	r3, r2
 800f24c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	69db      	ldr	r3, [r3, #28]
 800f258:	4313      	orrs	r3, r2
 800f25a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a19      	ldr	r2, [pc, #100]	@ (800f2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d004      	beq.n	800f270 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4a18      	ldr	r2, [pc, #96]	@ (800f2cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d11c      	bne.n	800f2aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f27a:	051b      	lsls	r3, r3, #20
 800f27c:	4313      	orrs	r3, r2
 800f27e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f298:	4313      	orrs	r3, r2
 800f29a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr
 800f2c8:	40010000 	.word	0x40010000
 800f2cc:	40010400 	.word	0x40010400

0800f2d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b083      	sub	sp, #12
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f300:	bf00      	nop
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b082      	sub	sp, #8
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f31a:	2301      	movs	r3, #1
 800f31c:	e042      	b.n	800f3a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f324:	2b00      	cmp	r3, #0
 800f326:	d106      	bne.n	800f336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7f3 f9d1 	bl	80026d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2224      	movs	r2, #36	@ 0x24
 800f33a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	681a      	ldr	r2, [r3, #0]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f022 0201 	bic.w	r2, r2, #1
 800f34c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f352:	2b00      	cmp	r3, #0
 800f354:	d002      	beq.n	800f35c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 ff22 	bl	80101a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f8b3 	bl	800f4c8 <UART_SetConfig>
 800f362:	4603      	mov	r3, r0
 800f364:	2b01      	cmp	r3, #1
 800f366:	d101      	bne.n	800f36c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f368:	2301      	movs	r3, #1
 800f36a:	e01b      	b.n	800f3a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	685a      	ldr	r2, [r3, #4]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f37a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	689a      	ldr	r2, [r3, #8]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f38a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f042 0201 	orr.w	r2, r2, #1
 800f39a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f000 ffa1 	bl	80102e4 <UART_CheckIdleState>
 800f3a2:	4603      	mov	r3, r0
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b08a      	sub	sp, #40	@ 0x28
 800f3b0:	af02      	add	r7, sp, #8
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	4613      	mov	r3, r2
 800f3ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3c2:	2b20      	cmp	r3, #32
 800f3c4:	d17b      	bne.n	800f4be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <HAL_UART_Transmit+0x26>
 800f3cc:	88fb      	ldrh	r3, [r7, #6]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d101      	bne.n	800f3d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	e074      	b.n	800f4c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2221      	movs	r2, #33	@ 0x21
 800f3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f3e6:	f7f3 fc07 	bl	8002bf8 <HAL_GetTick>
 800f3ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	88fa      	ldrh	r2, [r7, #6]
 800f3f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	88fa      	ldrh	r2, [r7, #6]
 800f3f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f404:	d108      	bne.n	800f418 <HAL_UART_Transmit+0x6c>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	691b      	ldr	r3, [r3, #16]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d104      	bne.n	800f418 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f40e:	2300      	movs	r3, #0
 800f410:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	61bb      	str	r3, [r7, #24]
 800f416:	e003      	b.n	800f420 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f41c:	2300      	movs	r3, #0
 800f41e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f420:	e030      	b.n	800f484 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	2200      	movs	r2, #0
 800f42a:	2180      	movs	r1, #128	@ 0x80
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f001 f803 	bl	8010438 <UART_WaitOnFlagUntilTimeout>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d005      	beq.n	800f444 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	2220      	movs	r2, #32
 800f43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f440:	2303      	movs	r3, #3
 800f442:	e03d      	b.n	800f4c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d10b      	bne.n	800f462 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	461a      	mov	r2, r3
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f458:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f45a:	69bb      	ldr	r3, [r7, #24]
 800f45c:	3302      	adds	r3, #2
 800f45e:	61bb      	str	r3, [r7, #24]
 800f460:	e007      	b.n	800f472 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	781a      	ldrb	r2, [r3, #0]
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	3301      	adds	r3, #1
 800f470:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f478:	b29b      	uxth	r3, r3
 800f47a:	3b01      	subs	r3, #1
 800f47c:	b29a      	uxth	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d1c8      	bne.n	800f422 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	2200      	movs	r2, #0
 800f498:	2140      	movs	r1, #64	@ 0x40
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 ffcc 	bl	8010438 <UART_WaitOnFlagUntilTimeout>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d005      	beq.n	800f4b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2220      	movs	r2, #32
 800f4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f4ae:	2303      	movs	r3, #3
 800f4b0:	e006      	b.n	800f4c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	2220      	movs	r2, #32
 800f4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e000      	b.n	800f4c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f4be:	2302      	movs	r3, #2
  }
}
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	3720      	adds	r7, #32
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f4c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f4cc:	b092      	sub	sp, #72	@ 0x48
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	689a      	ldr	r2, [r3, #8]
 800f4dc:	697b      	ldr	r3, [r7, #20]
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	431a      	orrs	r2, r3
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	695b      	ldr	r3, [r3, #20]
 800f4e6:	431a      	orrs	r2, r3
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	69db      	ldr	r3, [r3, #28]
 800f4ec:	4313      	orrs	r3, r2
 800f4ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	4bbe      	ldr	r3, [pc, #760]	@ (800f7f0 <UART_SetConfig+0x328>)
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	697a      	ldr	r2, [r7, #20]
 800f4fc:	6812      	ldr	r2, [r2, #0]
 800f4fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f500:	430b      	orrs	r3, r1
 800f502:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	68da      	ldr	r2, [r3, #12]
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	430a      	orrs	r2, r1
 800f518:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	699b      	ldr	r3, [r3, #24]
 800f51e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4ab3      	ldr	r2, [pc, #716]	@ (800f7f4 <UART_SetConfig+0x32c>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d004      	beq.n	800f534 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f530:	4313      	orrs	r3, r2
 800f532:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	689a      	ldr	r2, [r3, #8]
 800f53a:	4baf      	ldr	r3, [pc, #700]	@ (800f7f8 <UART_SetConfig+0x330>)
 800f53c:	4013      	ands	r3, r2
 800f53e:	697a      	ldr	r2, [r7, #20]
 800f540:	6812      	ldr	r2, [r2, #0]
 800f542:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f544:	430b      	orrs	r3, r1
 800f546:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54e:	f023 010f 	bic.w	r1, r3, #15
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	430a      	orrs	r2, r1
 800f55c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4aa6      	ldr	r2, [pc, #664]	@ (800f7fc <UART_SetConfig+0x334>)
 800f564:	4293      	cmp	r3, r2
 800f566:	d177      	bne.n	800f658 <UART_SetConfig+0x190>
 800f568:	4ba5      	ldr	r3, [pc, #660]	@ (800f800 <UART_SetConfig+0x338>)
 800f56a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f56c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f570:	2b28      	cmp	r3, #40	@ 0x28
 800f572:	d86d      	bhi.n	800f650 <UART_SetConfig+0x188>
 800f574:	a201      	add	r2, pc, #4	@ (adr r2, 800f57c <UART_SetConfig+0xb4>)
 800f576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f57a:	bf00      	nop
 800f57c:	0800f621 	.word	0x0800f621
 800f580:	0800f651 	.word	0x0800f651
 800f584:	0800f651 	.word	0x0800f651
 800f588:	0800f651 	.word	0x0800f651
 800f58c:	0800f651 	.word	0x0800f651
 800f590:	0800f651 	.word	0x0800f651
 800f594:	0800f651 	.word	0x0800f651
 800f598:	0800f651 	.word	0x0800f651
 800f59c:	0800f629 	.word	0x0800f629
 800f5a0:	0800f651 	.word	0x0800f651
 800f5a4:	0800f651 	.word	0x0800f651
 800f5a8:	0800f651 	.word	0x0800f651
 800f5ac:	0800f651 	.word	0x0800f651
 800f5b0:	0800f651 	.word	0x0800f651
 800f5b4:	0800f651 	.word	0x0800f651
 800f5b8:	0800f651 	.word	0x0800f651
 800f5bc:	0800f631 	.word	0x0800f631
 800f5c0:	0800f651 	.word	0x0800f651
 800f5c4:	0800f651 	.word	0x0800f651
 800f5c8:	0800f651 	.word	0x0800f651
 800f5cc:	0800f651 	.word	0x0800f651
 800f5d0:	0800f651 	.word	0x0800f651
 800f5d4:	0800f651 	.word	0x0800f651
 800f5d8:	0800f651 	.word	0x0800f651
 800f5dc:	0800f639 	.word	0x0800f639
 800f5e0:	0800f651 	.word	0x0800f651
 800f5e4:	0800f651 	.word	0x0800f651
 800f5e8:	0800f651 	.word	0x0800f651
 800f5ec:	0800f651 	.word	0x0800f651
 800f5f0:	0800f651 	.word	0x0800f651
 800f5f4:	0800f651 	.word	0x0800f651
 800f5f8:	0800f651 	.word	0x0800f651
 800f5fc:	0800f641 	.word	0x0800f641
 800f600:	0800f651 	.word	0x0800f651
 800f604:	0800f651 	.word	0x0800f651
 800f608:	0800f651 	.word	0x0800f651
 800f60c:	0800f651 	.word	0x0800f651
 800f610:	0800f651 	.word	0x0800f651
 800f614:	0800f651 	.word	0x0800f651
 800f618:	0800f651 	.word	0x0800f651
 800f61c:	0800f649 	.word	0x0800f649
 800f620:	2301      	movs	r3, #1
 800f622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f626:	e326      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f628:	2304      	movs	r3, #4
 800f62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f62e:	e322      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f630:	2308      	movs	r3, #8
 800f632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f636:	e31e      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f638:	2310      	movs	r3, #16
 800f63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f63e:	e31a      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f640:	2320      	movs	r3, #32
 800f642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f646:	e316      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f648:	2340      	movs	r3, #64	@ 0x40
 800f64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f64e:	e312      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f650:	2380      	movs	r3, #128	@ 0x80
 800f652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f656:	e30e      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a69      	ldr	r2, [pc, #420]	@ (800f804 <UART_SetConfig+0x33c>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d130      	bne.n	800f6c4 <UART_SetConfig+0x1fc>
 800f662:	4b67      	ldr	r3, [pc, #412]	@ (800f800 <UART_SetConfig+0x338>)
 800f664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f666:	f003 0307 	and.w	r3, r3, #7
 800f66a:	2b05      	cmp	r3, #5
 800f66c:	d826      	bhi.n	800f6bc <UART_SetConfig+0x1f4>
 800f66e:	a201      	add	r2, pc, #4	@ (adr r2, 800f674 <UART_SetConfig+0x1ac>)
 800f670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f674:	0800f68d 	.word	0x0800f68d
 800f678:	0800f695 	.word	0x0800f695
 800f67c:	0800f69d 	.word	0x0800f69d
 800f680:	0800f6a5 	.word	0x0800f6a5
 800f684:	0800f6ad 	.word	0x0800f6ad
 800f688:	0800f6b5 	.word	0x0800f6b5
 800f68c:	2300      	movs	r3, #0
 800f68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f692:	e2f0      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f694:	2304      	movs	r3, #4
 800f696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f69a:	e2ec      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f69c:	2308      	movs	r3, #8
 800f69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6a2:	e2e8      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f6a4:	2310      	movs	r3, #16
 800f6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6aa:	e2e4      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f6ac:	2320      	movs	r3, #32
 800f6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6b2:	e2e0      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f6b4:	2340      	movs	r3, #64	@ 0x40
 800f6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6ba:	e2dc      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f6bc:	2380      	movs	r3, #128	@ 0x80
 800f6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6c2:	e2d8      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	4a4f      	ldr	r2, [pc, #316]	@ (800f808 <UART_SetConfig+0x340>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d130      	bne.n	800f730 <UART_SetConfig+0x268>
 800f6ce:	4b4c      	ldr	r3, [pc, #304]	@ (800f800 <UART_SetConfig+0x338>)
 800f6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6d2:	f003 0307 	and.w	r3, r3, #7
 800f6d6:	2b05      	cmp	r3, #5
 800f6d8:	d826      	bhi.n	800f728 <UART_SetConfig+0x260>
 800f6da:	a201      	add	r2, pc, #4	@ (adr r2, 800f6e0 <UART_SetConfig+0x218>)
 800f6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e0:	0800f6f9 	.word	0x0800f6f9
 800f6e4:	0800f701 	.word	0x0800f701
 800f6e8:	0800f709 	.word	0x0800f709
 800f6ec:	0800f711 	.word	0x0800f711
 800f6f0:	0800f719 	.word	0x0800f719
 800f6f4:	0800f721 	.word	0x0800f721
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f6fe:	e2ba      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f700:	2304      	movs	r3, #4
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f706:	e2b6      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f708:	2308      	movs	r3, #8
 800f70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f70e:	e2b2      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f710:	2310      	movs	r3, #16
 800f712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f716:	e2ae      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f718:	2320      	movs	r3, #32
 800f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f71e:	e2aa      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f720:	2340      	movs	r3, #64	@ 0x40
 800f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f726:	e2a6      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f728:	2380      	movs	r3, #128	@ 0x80
 800f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f72e:	e2a2      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	4a35      	ldr	r2, [pc, #212]	@ (800f80c <UART_SetConfig+0x344>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d130      	bne.n	800f79c <UART_SetConfig+0x2d4>
 800f73a:	4b31      	ldr	r3, [pc, #196]	@ (800f800 <UART_SetConfig+0x338>)
 800f73c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f73e:	f003 0307 	and.w	r3, r3, #7
 800f742:	2b05      	cmp	r3, #5
 800f744:	d826      	bhi.n	800f794 <UART_SetConfig+0x2cc>
 800f746:	a201      	add	r2, pc, #4	@ (adr r2, 800f74c <UART_SetConfig+0x284>)
 800f748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f74c:	0800f765 	.word	0x0800f765
 800f750:	0800f76d 	.word	0x0800f76d
 800f754:	0800f775 	.word	0x0800f775
 800f758:	0800f77d 	.word	0x0800f77d
 800f75c:	0800f785 	.word	0x0800f785
 800f760:	0800f78d 	.word	0x0800f78d
 800f764:	2300      	movs	r3, #0
 800f766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f76a:	e284      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f76c:	2304      	movs	r3, #4
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f772:	e280      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f774:	2308      	movs	r3, #8
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f77a:	e27c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f77c:	2310      	movs	r3, #16
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f782:	e278      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f784:	2320      	movs	r3, #32
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f78a:	e274      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f78c:	2340      	movs	r3, #64	@ 0x40
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f792:	e270      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f794:	2380      	movs	r3, #128	@ 0x80
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f79a:	e26c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f79c:	697b      	ldr	r3, [r7, #20]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	4a1b      	ldr	r2, [pc, #108]	@ (800f810 <UART_SetConfig+0x348>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d142      	bne.n	800f82c <UART_SetConfig+0x364>
 800f7a6:	4b16      	ldr	r3, [pc, #88]	@ (800f800 <UART_SetConfig+0x338>)
 800f7a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7aa:	f003 0307 	and.w	r3, r3, #7
 800f7ae:	2b05      	cmp	r3, #5
 800f7b0:	d838      	bhi.n	800f824 <UART_SetConfig+0x35c>
 800f7b2:	a201      	add	r2, pc, #4	@ (adr r2, 800f7b8 <UART_SetConfig+0x2f0>)
 800f7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7b8:	0800f7d1 	.word	0x0800f7d1
 800f7bc:	0800f7d9 	.word	0x0800f7d9
 800f7c0:	0800f7e1 	.word	0x0800f7e1
 800f7c4:	0800f7e9 	.word	0x0800f7e9
 800f7c8:	0800f815 	.word	0x0800f815
 800f7cc:	0800f81d 	.word	0x0800f81d
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d6:	e24e      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f7d8:	2304      	movs	r3, #4
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7de:	e24a      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f7e0:	2308      	movs	r3, #8
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e6:	e246      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f7e8:	2310      	movs	r3, #16
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ee:	e242      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f7f0:	cfff69f3 	.word	0xcfff69f3
 800f7f4:	58000c00 	.word	0x58000c00
 800f7f8:	11fff4ff 	.word	0x11fff4ff
 800f7fc:	40011000 	.word	0x40011000
 800f800:	58024400 	.word	0x58024400
 800f804:	40004400 	.word	0x40004400
 800f808:	40004800 	.word	0x40004800
 800f80c:	40004c00 	.word	0x40004c00
 800f810:	40005000 	.word	0x40005000
 800f814:	2320      	movs	r3, #32
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81a:	e22c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f81c:	2340      	movs	r3, #64	@ 0x40
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f822:	e228      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f824:	2380      	movs	r3, #128	@ 0x80
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82a:	e224      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4ab1      	ldr	r2, [pc, #708]	@ (800faf8 <UART_SetConfig+0x630>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d176      	bne.n	800f924 <UART_SetConfig+0x45c>
 800f836:	4bb1      	ldr	r3, [pc, #708]	@ (800fafc <UART_SetConfig+0x634>)
 800f838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f83a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f83e:	2b28      	cmp	r3, #40	@ 0x28
 800f840:	d86c      	bhi.n	800f91c <UART_SetConfig+0x454>
 800f842:	a201      	add	r2, pc, #4	@ (adr r2, 800f848 <UART_SetConfig+0x380>)
 800f844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f848:	0800f8ed 	.word	0x0800f8ed
 800f84c:	0800f91d 	.word	0x0800f91d
 800f850:	0800f91d 	.word	0x0800f91d
 800f854:	0800f91d 	.word	0x0800f91d
 800f858:	0800f91d 	.word	0x0800f91d
 800f85c:	0800f91d 	.word	0x0800f91d
 800f860:	0800f91d 	.word	0x0800f91d
 800f864:	0800f91d 	.word	0x0800f91d
 800f868:	0800f8f5 	.word	0x0800f8f5
 800f86c:	0800f91d 	.word	0x0800f91d
 800f870:	0800f91d 	.word	0x0800f91d
 800f874:	0800f91d 	.word	0x0800f91d
 800f878:	0800f91d 	.word	0x0800f91d
 800f87c:	0800f91d 	.word	0x0800f91d
 800f880:	0800f91d 	.word	0x0800f91d
 800f884:	0800f91d 	.word	0x0800f91d
 800f888:	0800f8fd 	.word	0x0800f8fd
 800f88c:	0800f91d 	.word	0x0800f91d
 800f890:	0800f91d 	.word	0x0800f91d
 800f894:	0800f91d 	.word	0x0800f91d
 800f898:	0800f91d 	.word	0x0800f91d
 800f89c:	0800f91d 	.word	0x0800f91d
 800f8a0:	0800f91d 	.word	0x0800f91d
 800f8a4:	0800f91d 	.word	0x0800f91d
 800f8a8:	0800f905 	.word	0x0800f905
 800f8ac:	0800f91d 	.word	0x0800f91d
 800f8b0:	0800f91d 	.word	0x0800f91d
 800f8b4:	0800f91d 	.word	0x0800f91d
 800f8b8:	0800f91d 	.word	0x0800f91d
 800f8bc:	0800f91d 	.word	0x0800f91d
 800f8c0:	0800f91d 	.word	0x0800f91d
 800f8c4:	0800f91d 	.word	0x0800f91d
 800f8c8:	0800f90d 	.word	0x0800f90d
 800f8cc:	0800f91d 	.word	0x0800f91d
 800f8d0:	0800f91d 	.word	0x0800f91d
 800f8d4:	0800f91d 	.word	0x0800f91d
 800f8d8:	0800f91d 	.word	0x0800f91d
 800f8dc:	0800f91d 	.word	0x0800f91d
 800f8e0:	0800f91d 	.word	0x0800f91d
 800f8e4:	0800f91d 	.word	0x0800f91d
 800f8e8:	0800f915 	.word	0x0800f915
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f2:	e1c0      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f8f4:	2304      	movs	r3, #4
 800f8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fa:	e1bc      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f8fc:	2308      	movs	r3, #8
 800f8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f902:	e1b8      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f904:	2310      	movs	r3, #16
 800f906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90a:	e1b4      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f90c:	2320      	movs	r3, #32
 800f90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f912:	e1b0      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f914:	2340      	movs	r3, #64	@ 0x40
 800f916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91a:	e1ac      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f91c:	2380      	movs	r3, #128	@ 0x80
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f922:	e1a8      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	4a75      	ldr	r2, [pc, #468]	@ (800fb00 <UART_SetConfig+0x638>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d130      	bne.n	800f990 <UART_SetConfig+0x4c8>
 800f92e:	4b73      	ldr	r3, [pc, #460]	@ (800fafc <UART_SetConfig+0x634>)
 800f930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f932:	f003 0307 	and.w	r3, r3, #7
 800f936:	2b05      	cmp	r3, #5
 800f938:	d826      	bhi.n	800f988 <UART_SetConfig+0x4c0>
 800f93a:	a201      	add	r2, pc, #4	@ (adr r2, 800f940 <UART_SetConfig+0x478>)
 800f93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f940:	0800f959 	.word	0x0800f959
 800f944:	0800f961 	.word	0x0800f961
 800f948:	0800f969 	.word	0x0800f969
 800f94c:	0800f971 	.word	0x0800f971
 800f950:	0800f979 	.word	0x0800f979
 800f954:	0800f981 	.word	0x0800f981
 800f958:	2300      	movs	r3, #0
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95e:	e18a      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f960:	2304      	movs	r3, #4
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f966:	e186      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f968:	2308      	movs	r3, #8
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96e:	e182      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f970:	2310      	movs	r3, #16
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f976:	e17e      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f978:	2320      	movs	r3, #32
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97e:	e17a      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f980:	2340      	movs	r3, #64	@ 0x40
 800f982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f986:	e176      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f988:	2380      	movs	r3, #128	@ 0x80
 800f98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f98e:	e172      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	4a5b      	ldr	r2, [pc, #364]	@ (800fb04 <UART_SetConfig+0x63c>)
 800f996:	4293      	cmp	r3, r2
 800f998:	d130      	bne.n	800f9fc <UART_SetConfig+0x534>
 800f99a:	4b58      	ldr	r3, [pc, #352]	@ (800fafc <UART_SetConfig+0x634>)
 800f99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f99e:	f003 0307 	and.w	r3, r3, #7
 800f9a2:	2b05      	cmp	r3, #5
 800f9a4:	d826      	bhi.n	800f9f4 <UART_SetConfig+0x52c>
 800f9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9ac <UART_SetConfig+0x4e4>)
 800f9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9ac:	0800f9c5 	.word	0x0800f9c5
 800f9b0:	0800f9cd 	.word	0x0800f9cd
 800f9b4:	0800f9d5 	.word	0x0800f9d5
 800f9b8:	0800f9dd 	.word	0x0800f9dd
 800f9bc:	0800f9e5 	.word	0x0800f9e5
 800f9c0:	0800f9ed 	.word	0x0800f9ed
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ca:	e154      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9cc:	2304      	movs	r3, #4
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d2:	e150      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9d4:	2308      	movs	r3, #8
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9da:	e14c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9dc:	2310      	movs	r3, #16
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e2:	e148      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9e4:	2320      	movs	r3, #32
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ea:	e144      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9ec:	2340      	movs	r3, #64	@ 0x40
 800f9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9f2:	e140      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9f4:	2380      	movs	r3, #128	@ 0x80
 800f9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9fa:	e13c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a41      	ldr	r2, [pc, #260]	@ (800fb08 <UART_SetConfig+0x640>)
 800fa02:	4293      	cmp	r3, r2
 800fa04:	f040 8082 	bne.w	800fb0c <UART_SetConfig+0x644>
 800fa08:	4b3c      	ldr	r3, [pc, #240]	@ (800fafc <UART_SetConfig+0x634>)
 800fa0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fa10:	2b28      	cmp	r3, #40	@ 0x28
 800fa12:	d86d      	bhi.n	800faf0 <UART_SetConfig+0x628>
 800fa14:	a201      	add	r2, pc, #4	@ (adr r2, 800fa1c <UART_SetConfig+0x554>)
 800fa16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa1a:	bf00      	nop
 800fa1c:	0800fac1 	.word	0x0800fac1
 800fa20:	0800faf1 	.word	0x0800faf1
 800fa24:	0800faf1 	.word	0x0800faf1
 800fa28:	0800faf1 	.word	0x0800faf1
 800fa2c:	0800faf1 	.word	0x0800faf1
 800fa30:	0800faf1 	.word	0x0800faf1
 800fa34:	0800faf1 	.word	0x0800faf1
 800fa38:	0800faf1 	.word	0x0800faf1
 800fa3c:	0800fac9 	.word	0x0800fac9
 800fa40:	0800faf1 	.word	0x0800faf1
 800fa44:	0800faf1 	.word	0x0800faf1
 800fa48:	0800faf1 	.word	0x0800faf1
 800fa4c:	0800faf1 	.word	0x0800faf1
 800fa50:	0800faf1 	.word	0x0800faf1
 800fa54:	0800faf1 	.word	0x0800faf1
 800fa58:	0800faf1 	.word	0x0800faf1
 800fa5c:	0800fad1 	.word	0x0800fad1
 800fa60:	0800faf1 	.word	0x0800faf1
 800fa64:	0800faf1 	.word	0x0800faf1
 800fa68:	0800faf1 	.word	0x0800faf1
 800fa6c:	0800faf1 	.word	0x0800faf1
 800fa70:	0800faf1 	.word	0x0800faf1
 800fa74:	0800faf1 	.word	0x0800faf1
 800fa78:	0800faf1 	.word	0x0800faf1
 800fa7c:	0800fad9 	.word	0x0800fad9
 800fa80:	0800faf1 	.word	0x0800faf1
 800fa84:	0800faf1 	.word	0x0800faf1
 800fa88:	0800faf1 	.word	0x0800faf1
 800fa8c:	0800faf1 	.word	0x0800faf1
 800fa90:	0800faf1 	.word	0x0800faf1
 800fa94:	0800faf1 	.word	0x0800faf1
 800fa98:	0800faf1 	.word	0x0800faf1
 800fa9c:	0800fae1 	.word	0x0800fae1
 800faa0:	0800faf1 	.word	0x0800faf1
 800faa4:	0800faf1 	.word	0x0800faf1
 800faa8:	0800faf1 	.word	0x0800faf1
 800faac:	0800faf1 	.word	0x0800faf1
 800fab0:	0800faf1 	.word	0x0800faf1
 800fab4:	0800faf1 	.word	0x0800faf1
 800fab8:	0800faf1 	.word	0x0800faf1
 800fabc:	0800fae9 	.word	0x0800fae9
 800fac0:	2301      	movs	r3, #1
 800fac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac6:	e0d6      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fac8:	2304      	movs	r3, #4
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800face:	e0d2      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fad0:	2308      	movs	r3, #8
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad6:	e0ce      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fad8:	2310      	movs	r3, #16
 800fada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fade:	e0ca      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fae0:	2320      	movs	r3, #32
 800fae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fae6:	e0c6      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fae8:	2340      	movs	r3, #64	@ 0x40
 800faea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faee:	e0c2      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800faf0:	2380      	movs	r3, #128	@ 0x80
 800faf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf6:	e0be      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800faf8:	40011400 	.word	0x40011400
 800fafc:	58024400 	.word	0x58024400
 800fb00:	40007800 	.word	0x40007800
 800fb04:	40007c00 	.word	0x40007c00
 800fb08:	40011800 	.word	0x40011800
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4aad      	ldr	r2, [pc, #692]	@ (800fdc8 <UART_SetConfig+0x900>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d176      	bne.n	800fc04 <UART_SetConfig+0x73c>
 800fb16:	4bad      	ldr	r3, [pc, #692]	@ (800fdcc <UART_SetConfig+0x904>)
 800fb18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb1e:	2b28      	cmp	r3, #40	@ 0x28
 800fb20:	d86c      	bhi.n	800fbfc <UART_SetConfig+0x734>
 800fb22:	a201      	add	r2, pc, #4	@ (adr r2, 800fb28 <UART_SetConfig+0x660>)
 800fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb28:	0800fbcd 	.word	0x0800fbcd
 800fb2c:	0800fbfd 	.word	0x0800fbfd
 800fb30:	0800fbfd 	.word	0x0800fbfd
 800fb34:	0800fbfd 	.word	0x0800fbfd
 800fb38:	0800fbfd 	.word	0x0800fbfd
 800fb3c:	0800fbfd 	.word	0x0800fbfd
 800fb40:	0800fbfd 	.word	0x0800fbfd
 800fb44:	0800fbfd 	.word	0x0800fbfd
 800fb48:	0800fbd5 	.word	0x0800fbd5
 800fb4c:	0800fbfd 	.word	0x0800fbfd
 800fb50:	0800fbfd 	.word	0x0800fbfd
 800fb54:	0800fbfd 	.word	0x0800fbfd
 800fb58:	0800fbfd 	.word	0x0800fbfd
 800fb5c:	0800fbfd 	.word	0x0800fbfd
 800fb60:	0800fbfd 	.word	0x0800fbfd
 800fb64:	0800fbfd 	.word	0x0800fbfd
 800fb68:	0800fbdd 	.word	0x0800fbdd
 800fb6c:	0800fbfd 	.word	0x0800fbfd
 800fb70:	0800fbfd 	.word	0x0800fbfd
 800fb74:	0800fbfd 	.word	0x0800fbfd
 800fb78:	0800fbfd 	.word	0x0800fbfd
 800fb7c:	0800fbfd 	.word	0x0800fbfd
 800fb80:	0800fbfd 	.word	0x0800fbfd
 800fb84:	0800fbfd 	.word	0x0800fbfd
 800fb88:	0800fbe5 	.word	0x0800fbe5
 800fb8c:	0800fbfd 	.word	0x0800fbfd
 800fb90:	0800fbfd 	.word	0x0800fbfd
 800fb94:	0800fbfd 	.word	0x0800fbfd
 800fb98:	0800fbfd 	.word	0x0800fbfd
 800fb9c:	0800fbfd 	.word	0x0800fbfd
 800fba0:	0800fbfd 	.word	0x0800fbfd
 800fba4:	0800fbfd 	.word	0x0800fbfd
 800fba8:	0800fbed 	.word	0x0800fbed
 800fbac:	0800fbfd 	.word	0x0800fbfd
 800fbb0:	0800fbfd 	.word	0x0800fbfd
 800fbb4:	0800fbfd 	.word	0x0800fbfd
 800fbb8:	0800fbfd 	.word	0x0800fbfd
 800fbbc:	0800fbfd 	.word	0x0800fbfd
 800fbc0:	0800fbfd 	.word	0x0800fbfd
 800fbc4:	0800fbfd 	.word	0x0800fbfd
 800fbc8:	0800fbf5 	.word	0x0800fbf5
 800fbcc:	2301      	movs	r3, #1
 800fbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbd2:	e050      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fbd4:	2304      	movs	r3, #4
 800fbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbda:	e04c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fbdc:	2308      	movs	r3, #8
 800fbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbe2:	e048      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fbe4:	2310      	movs	r3, #16
 800fbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbea:	e044      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fbec:	2320      	movs	r3, #32
 800fbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbf2:	e040      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fbf4:	2340      	movs	r3, #64	@ 0x40
 800fbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbfa:	e03c      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fbfc:	2380      	movs	r3, #128	@ 0x80
 800fbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc02:	e038      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a71      	ldr	r2, [pc, #452]	@ (800fdd0 <UART_SetConfig+0x908>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d130      	bne.n	800fc70 <UART_SetConfig+0x7a8>
 800fc0e:	4b6f      	ldr	r3, [pc, #444]	@ (800fdcc <UART_SetConfig+0x904>)
 800fc10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fc12:	f003 0307 	and.w	r3, r3, #7
 800fc16:	2b05      	cmp	r3, #5
 800fc18:	d826      	bhi.n	800fc68 <UART_SetConfig+0x7a0>
 800fc1a:	a201      	add	r2, pc, #4	@ (adr r2, 800fc20 <UART_SetConfig+0x758>)
 800fc1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc20:	0800fc39 	.word	0x0800fc39
 800fc24:	0800fc41 	.word	0x0800fc41
 800fc28:	0800fc49 	.word	0x0800fc49
 800fc2c:	0800fc51 	.word	0x0800fc51
 800fc30:	0800fc59 	.word	0x0800fc59
 800fc34:	0800fc61 	.word	0x0800fc61
 800fc38:	2302      	movs	r3, #2
 800fc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3e:	e01a      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc40:	2304      	movs	r3, #4
 800fc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc46:	e016      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc48:	2308      	movs	r3, #8
 800fc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4e:	e012      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc50:	2310      	movs	r3, #16
 800fc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc56:	e00e      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc58:	2320      	movs	r3, #32
 800fc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5e:	e00a      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc60:	2340      	movs	r3, #64	@ 0x40
 800fc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc66:	e006      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc68:	2380      	movs	r3, #128	@ 0x80
 800fc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc6e:	e002      	b.n	800fc76 <UART_SetConfig+0x7ae>
 800fc70:	2380      	movs	r3, #128	@ 0x80
 800fc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a55      	ldr	r2, [pc, #340]	@ (800fdd0 <UART_SetConfig+0x908>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	f040 80f8 	bne.w	800fe72 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fc86:	2b20      	cmp	r3, #32
 800fc88:	dc46      	bgt.n	800fd18 <UART_SetConfig+0x850>
 800fc8a:	2b02      	cmp	r3, #2
 800fc8c:	db75      	blt.n	800fd7a <UART_SetConfig+0x8b2>
 800fc8e:	3b02      	subs	r3, #2
 800fc90:	2b1e      	cmp	r3, #30
 800fc92:	d872      	bhi.n	800fd7a <UART_SetConfig+0x8b2>
 800fc94:	a201      	add	r2, pc, #4	@ (adr r2, 800fc9c <UART_SetConfig+0x7d4>)
 800fc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc9a:	bf00      	nop
 800fc9c:	0800fd1f 	.word	0x0800fd1f
 800fca0:	0800fd7b 	.word	0x0800fd7b
 800fca4:	0800fd27 	.word	0x0800fd27
 800fca8:	0800fd7b 	.word	0x0800fd7b
 800fcac:	0800fd7b 	.word	0x0800fd7b
 800fcb0:	0800fd7b 	.word	0x0800fd7b
 800fcb4:	0800fd37 	.word	0x0800fd37
 800fcb8:	0800fd7b 	.word	0x0800fd7b
 800fcbc:	0800fd7b 	.word	0x0800fd7b
 800fcc0:	0800fd7b 	.word	0x0800fd7b
 800fcc4:	0800fd7b 	.word	0x0800fd7b
 800fcc8:	0800fd7b 	.word	0x0800fd7b
 800fccc:	0800fd7b 	.word	0x0800fd7b
 800fcd0:	0800fd7b 	.word	0x0800fd7b
 800fcd4:	0800fd47 	.word	0x0800fd47
 800fcd8:	0800fd7b 	.word	0x0800fd7b
 800fcdc:	0800fd7b 	.word	0x0800fd7b
 800fce0:	0800fd7b 	.word	0x0800fd7b
 800fce4:	0800fd7b 	.word	0x0800fd7b
 800fce8:	0800fd7b 	.word	0x0800fd7b
 800fcec:	0800fd7b 	.word	0x0800fd7b
 800fcf0:	0800fd7b 	.word	0x0800fd7b
 800fcf4:	0800fd7b 	.word	0x0800fd7b
 800fcf8:	0800fd7b 	.word	0x0800fd7b
 800fcfc:	0800fd7b 	.word	0x0800fd7b
 800fd00:	0800fd7b 	.word	0x0800fd7b
 800fd04:	0800fd7b 	.word	0x0800fd7b
 800fd08:	0800fd7b 	.word	0x0800fd7b
 800fd0c:	0800fd7b 	.word	0x0800fd7b
 800fd10:	0800fd7b 	.word	0x0800fd7b
 800fd14:	0800fd6d 	.word	0x0800fd6d
 800fd18:	2b40      	cmp	r3, #64	@ 0x40
 800fd1a:	d02a      	beq.n	800fd72 <UART_SetConfig+0x8aa>
 800fd1c:	e02d      	b.n	800fd7a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fd1e:	f7fb ff37 	bl	800bb90 <HAL_RCCEx_GetD3PCLK1Freq>
 800fd22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800fd24:	e02f      	b.n	800fd86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f7fb ff46 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd34:	e027      	b.n	800fd86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd36:	f107 0318 	add.w	r3, r7, #24
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fc f892 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd40:	69fb      	ldr	r3, [r7, #28]
 800fd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd44:	e01f      	b.n	800fd86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd46:	4b21      	ldr	r3, [pc, #132]	@ (800fdcc <UART_SetConfig+0x904>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f003 0320 	and.w	r3, r3, #32
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d009      	beq.n	800fd66 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd52:	4b1e      	ldr	r3, [pc, #120]	@ (800fdcc <UART_SetConfig+0x904>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	08db      	lsrs	r3, r3, #3
 800fd58:	f003 0303 	and.w	r3, r3, #3
 800fd5c:	4a1d      	ldr	r2, [pc, #116]	@ (800fdd4 <UART_SetConfig+0x90c>)
 800fd5e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd64:	e00f      	b.n	800fd86 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd66:	4b1b      	ldr	r3, [pc, #108]	@ (800fdd4 <UART_SetConfig+0x90c>)
 800fd68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd6a:	e00c      	b.n	800fd86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd6c:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd8 <UART_SetConfig+0x910>)
 800fd6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd70:	e009      	b.n	800fd86 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fd76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fd78:	e005      	b.n	800fd86 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800fd84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fd86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f000 81ee 	beq.w	801016a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd92:	4a12      	ldr	r2, [pc, #72]	@ (800fddc <UART_SetConfig+0x914>)
 800fd94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd9c:	fbb3 f3f2 	udiv	r3, r3, r2
 800fda0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	685a      	ldr	r2, [r3, #4]
 800fda6:	4613      	mov	r3, r2
 800fda8:	005b      	lsls	r3, r3, #1
 800fdaa:	4413      	add	r3, r2
 800fdac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d305      	bcc.n	800fdbe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fdb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d910      	bls.n	800fde0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fdc4:	e1d1      	b.n	801016a <UART_SetConfig+0xca2>
 800fdc6:	bf00      	nop
 800fdc8:	40011c00 	.word	0x40011c00
 800fdcc:	58024400 	.word	0x58024400
 800fdd0:	58000c00 	.word	0x58000c00
 800fdd4:	03d09000 	.word	0x03d09000
 800fdd8:	003d0900 	.word	0x003d0900
 800fddc:	08012528 	.word	0x08012528
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fde0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fde2:	2200      	movs	r2, #0
 800fde4:	60bb      	str	r3, [r7, #8]
 800fde6:	60fa      	str	r2, [r7, #12]
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdec:	4ac0      	ldr	r2, [pc, #768]	@ (80100f0 <UART_SetConfig+0xc28>)
 800fdee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	603b      	str	r3, [r7, #0]
 800fdf8:	607a      	str	r2, [r7, #4]
 800fdfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fe02:	f7f0 fadd 	bl	80003c0 <__aeabi_uldivmod>
 800fe06:	4602      	mov	r2, r0
 800fe08:	460b      	mov	r3, r1
 800fe0a:	4610      	mov	r0, r2
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	f04f 0200 	mov.w	r2, #0
 800fe12:	f04f 0300 	mov.w	r3, #0
 800fe16:	020b      	lsls	r3, r1, #8
 800fe18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fe1c:	0202      	lsls	r2, r0, #8
 800fe1e:	6979      	ldr	r1, [r7, #20]
 800fe20:	6849      	ldr	r1, [r1, #4]
 800fe22:	0849      	lsrs	r1, r1, #1
 800fe24:	2000      	movs	r0, #0
 800fe26:	460c      	mov	r4, r1
 800fe28:	4605      	mov	r5, r0
 800fe2a:	eb12 0804 	adds.w	r8, r2, r4
 800fe2e:	eb43 0905 	adc.w	r9, r3, r5
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	469a      	mov	sl, r3
 800fe3a:	4693      	mov	fp, r2
 800fe3c:	4652      	mov	r2, sl
 800fe3e:	465b      	mov	r3, fp
 800fe40:	4640      	mov	r0, r8
 800fe42:	4649      	mov	r1, r9
 800fe44:	f7f0 fabc 	bl	80003c0 <__aeabi_uldivmod>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4613      	mov	r3, r2
 800fe4e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fe56:	d308      	bcc.n	800fe6a <UART_SetConfig+0x9a2>
 800fe58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe5e:	d204      	bcs.n	800fe6a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fe66:	60da      	str	r2, [r3, #12]
 800fe68:	e17f      	b.n	801016a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fe70:	e17b      	b.n	801016a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	69db      	ldr	r3, [r3, #28]
 800fe76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fe7a:	f040 80bd 	bne.w	800fff8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fe7e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe82:	2b20      	cmp	r3, #32
 800fe84:	dc48      	bgt.n	800ff18 <UART_SetConfig+0xa50>
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	db7b      	blt.n	800ff82 <UART_SetConfig+0xaba>
 800fe8a:	2b20      	cmp	r3, #32
 800fe8c:	d879      	bhi.n	800ff82 <UART_SetConfig+0xaba>
 800fe8e:	a201      	add	r2, pc, #4	@ (adr r2, 800fe94 <UART_SetConfig+0x9cc>)
 800fe90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe94:	0800ff1f 	.word	0x0800ff1f
 800fe98:	0800ff27 	.word	0x0800ff27
 800fe9c:	0800ff83 	.word	0x0800ff83
 800fea0:	0800ff83 	.word	0x0800ff83
 800fea4:	0800ff2f 	.word	0x0800ff2f
 800fea8:	0800ff83 	.word	0x0800ff83
 800feac:	0800ff83 	.word	0x0800ff83
 800feb0:	0800ff83 	.word	0x0800ff83
 800feb4:	0800ff3f 	.word	0x0800ff3f
 800feb8:	0800ff83 	.word	0x0800ff83
 800febc:	0800ff83 	.word	0x0800ff83
 800fec0:	0800ff83 	.word	0x0800ff83
 800fec4:	0800ff83 	.word	0x0800ff83
 800fec8:	0800ff83 	.word	0x0800ff83
 800fecc:	0800ff83 	.word	0x0800ff83
 800fed0:	0800ff83 	.word	0x0800ff83
 800fed4:	0800ff4f 	.word	0x0800ff4f
 800fed8:	0800ff83 	.word	0x0800ff83
 800fedc:	0800ff83 	.word	0x0800ff83
 800fee0:	0800ff83 	.word	0x0800ff83
 800fee4:	0800ff83 	.word	0x0800ff83
 800fee8:	0800ff83 	.word	0x0800ff83
 800feec:	0800ff83 	.word	0x0800ff83
 800fef0:	0800ff83 	.word	0x0800ff83
 800fef4:	0800ff83 	.word	0x0800ff83
 800fef8:	0800ff83 	.word	0x0800ff83
 800fefc:	0800ff83 	.word	0x0800ff83
 800ff00:	0800ff83 	.word	0x0800ff83
 800ff04:	0800ff83 	.word	0x0800ff83
 800ff08:	0800ff83 	.word	0x0800ff83
 800ff0c:	0800ff83 	.word	0x0800ff83
 800ff10:	0800ff83 	.word	0x0800ff83
 800ff14:	0800ff75 	.word	0x0800ff75
 800ff18:	2b40      	cmp	r3, #64	@ 0x40
 800ff1a:	d02e      	beq.n	800ff7a <UART_SetConfig+0xab2>
 800ff1c:	e031      	b.n	800ff82 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff1e:	f7f9 ff99 	bl	8009e54 <HAL_RCC_GetPCLK1Freq>
 800ff22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff24:	e033      	b.n	800ff8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff26:	f7f9 ffab 	bl	8009e80 <HAL_RCC_GetPCLK2Freq>
 800ff2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ff2c:	e02f      	b.n	800ff8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fb fe42 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff3c:	e027      	b.n	800ff8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff3e:	f107 0318 	add.w	r3, r7, #24
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fb ff8e 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff4c:	e01f      	b.n	800ff8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff4e:	4b69      	ldr	r3, [pc, #420]	@ (80100f4 <UART_SetConfig+0xc2c>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	f003 0320 	and.w	r3, r3, #32
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d009      	beq.n	800ff6e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff5a:	4b66      	ldr	r3, [pc, #408]	@ (80100f4 <UART_SetConfig+0xc2c>)
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	08db      	lsrs	r3, r3, #3
 800ff60:	f003 0303 	and.w	r3, r3, #3
 800ff64:	4a64      	ldr	r2, [pc, #400]	@ (80100f8 <UART_SetConfig+0xc30>)
 800ff66:	fa22 f303 	lsr.w	r3, r2, r3
 800ff6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff6c:	e00f      	b.n	800ff8e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ff6e:	4b62      	ldr	r3, [pc, #392]	@ (80100f8 <UART_SetConfig+0xc30>)
 800ff70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff72:	e00c      	b.n	800ff8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff74:	4b61      	ldr	r3, [pc, #388]	@ (80100fc <UART_SetConfig+0xc34>)
 800ff76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff78:	e009      	b.n	800ff8e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff80:	e005      	b.n	800ff8e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ff82:	2300      	movs	r3, #0
 800ff84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff86:	2301      	movs	r3, #1
 800ff88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f000 80ea 	beq.w	801016a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff9a:	4a55      	ldr	r2, [pc, #340]	@ (80100f0 <UART_SetConfig+0xc28>)
 800ff9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffa8:	005a      	lsls	r2, r3, #1
 800ffaa:	697b      	ldr	r3, [r7, #20]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	085b      	lsrs	r3, r3, #1
 800ffb0:	441a      	add	r2, r3
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ffbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffbe:	2b0f      	cmp	r3, #15
 800ffc0:	d916      	bls.n	800fff0 <UART_SetConfig+0xb28>
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ffc8:	d212      	bcs.n	800fff0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ffca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffcc:	b29b      	uxth	r3, r3
 800ffce:	f023 030f 	bic.w	r3, r3, #15
 800ffd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd6:	085b      	lsrs	r3, r3, #1
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	f003 0307 	and.w	r3, r3, #7
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ffec:	60da      	str	r2, [r3, #12]
 800ffee:	e0bc      	b.n	801016a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800fff0:	2301      	movs	r3, #1
 800fff2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fff6:	e0b8      	b.n	801016a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fff8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fffc:	2b20      	cmp	r3, #32
 800fffe:	dc4b      	bgt.n	8010098 <UART_SetConfig+0xbd0>
 8010000:	2b00      	cmp	r3, #0
 8010002:	f2c0 8087 	blt.w	8010114 <UART_SetConfig+0xc4c>
 8010006:	2b20      	cmp	r3, #32
 8010008:	f200 8084 	bhi.w	8010114 <UART_SetConfig+0xc4c>
 801000c:	a201      	add	r2, pc, #4	@ (adr r2, 8010014 <UART_SetConfig+0xb4c>)
 801000e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010012:	bf00      	nop
 8010014:	0801009f 	.word	0x0801009f
 8010018:	080100a7 	.word	0x080100a7
 801001c:	08010115 	.word	0x08010115
 8010020:	08010115 	.word	0x08010115
 8010024:	080100af 	.word	0x080100af
 8010028:	08010115 	.word	0x08010115
 801002c:	08010115 	.word	0x08010115
 8010030:	08010115 	.word	0x08010115
 8010034:	080100bf 	.word	0x080100bf
 8010038:	08010115 	.word	0x08010115
 801003c:	08010115 	.word	0x08010115
 8010040:	08010115 	.word	0x08010115
 8010044:	08010115 	.word	0x08010115
 8010048:	08010115 	.word	0x08010115
 801004c:	08010115 	.word	0x08010115
 8010050:	08010115 	.word	0x08010115
 8010054:	080100cf 	.word	0x080100cf
 8010058:	08010115 	.word	0x08010115
 801005c:	08010115 	.word	0x08010115
 8010060:	08010115 	.word	0x08010115
 8010064:	08010115 	.word	0x08010115
 8010068:	08010115 	.word	0x08010115
 801006c:	08010115 	.word	0x08010115
 8010070:	08010115 	.word	0x08010115
 8010074:	08010115 	.word	0x08010115
 8010078:	08010115 	.word	0x08010115
 801007c:	08010115 	.word	0x08010115
 8010080:	08010115 	.word	0x08010115
 8010084:	08010115 	.word	0x08010115
 8010088:	08010115 	.word	0x08010115
 801008c:	08010115 	.word	0x08010115
 8010090:	08010115 	.word	0x08010115
 8010094:	08010107 	.word	0x08010107
 8010098:	2b40      	cmp	r3, #64	@ 0x40
 801009a:	d037      	beq.n	801010c <UART_SetConfig+0xc44>
 801009c:	e03a      	b.n	8010114 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801009e:	f7f9 fed9 	bl	8009e54 <HAL_RCC_GetPCLK1Freq>
 80100a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100a4:	e03c      	b.n	8010120 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100a6:	f7f9 feeb 	bl	8009e80 <HAL_RCC_GetPCLK2Freq>
 80100aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100ac:	e038      	b.n	8010120 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fb fd82 	bl	800bbbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100bc:	e030      	b.n	8010120 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100be:	f107 0318 	add.w	r3, r7, #24
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fb fece 	bl	800be64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100cc:	e028      	b.n	8010120 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100ce:	4b09      	ldr	r3, [pc, #36]	@ (80100f4 <UART_SetConfig+0xc2c>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 0320 	and.w	r3, r3, #32
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d012      	beq.n	8010100 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100da:	4b06      	ldr	r3, [pc, #24]	@ (80100f4 <UART_SetConfig+0xc2c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	08db      	lsrs	r3, r3, #3
 80100e0:	f003 0303 	and.w	r3, r3, #3
 80100e4:	4a04      	ldr	r2, [pc, #16]	@ (80100f8 <UART_SetConfig+0xc30>)
 80100e6:	fa22 f303 	lsr.w	r3, r2, r3
 80100ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100ec:	e018      	b.n	8010120 <UART_SetConfig+0xc58>
 80100ee:	bf00      	nop
 80100f0:	08012528 	.word	0x08012528
 80100f4:	58024400 	.word	0x58024400
 80100f8:	03d09000 	.word	0x03d09000
 80100fc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010100:	4b24      	ldr	r3, [pc, #144]	@ (8010194 <UART_SetConfig+0xccc>)
 8010102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010104:	e00c      	b.n	8010120 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010106:	4b24      	ldr	r3, [pc, #144]	@ (8010198 <UART_SetConfig+0xcd0>)
 8010108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801010a:	e009      	b.n	8010120 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801010c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010112:	e005      	b.n	8010120 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010114:	2300      	movs	r3, #0
 8010116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010118:	2301      	movs	r3, #1
 801011a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801011e:	bf00      	nop
    }

    if (pclk != 0U)
 8010120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010122:	2b00      	cmp	r3, #0
 8010124:	d021      	beq.n	801016a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801012a:	4a1c      	ldr	r2, [pc, #112]	@ (801019c <UART_SetConfig+0xcd4>)
 801012c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010130:	461a      	mov	r2, r3
 8010132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010134:	fbb3 f2f2 	udiv	r2, r3, r2
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	085b      	lsrs	r3, r3, #1
 801013e:	441a      	add	r2, r3
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	685b      	ldr	r3, [r3, #4]
 8010144:	fbb2 f3f3 	udiv	r3, r2, r3
 8010148:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801014a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014c:	2b0f      	cmp	r3, #15
 801014e:	d909      	bls.n	8010164 <UART_SetConfig+0xc9c>
 8010150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010152:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010156:	d205      	bcs.n	8010164 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801015a:	b29a      	uxth	r2, r3
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	60da      	str	r2, [r3, #12]
 8010162:	e002      	b.n	801016a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010164:	2301      	movs	r3, #1
 8010166:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	2201      	movs	r2, #1
 801016e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	2201      	movs	r2, #1
 8010176:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	2200      	movs	r2, #0
 801017e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	2200      	movs	r2, #0
 8010184:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010186:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801018a:	4618      	mov	r0, r3
 801018c:	3748      	adds	r7, #72	@ 0x48
 801018e:	46bd      	mov	sp, r7
 8010190:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010194:	03d09000 	.word	0x03d09000
 8010198:	003d0900 	.word	0x003d0900
 801019c:	08012528 	.word	0x08012528

080101a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b083      	sub	sp, #12
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ac:	f003 0308 	and.w	r3, r3, #8
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d00a      	beq.n	80101ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	430a      	orrs	r2, r1
 80101c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ce:	f003 0301 	and.w	r3, r3, #1
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00a      	beq.n	80101ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	430a      	orrs	r2, r1
 80101ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101f0:	f003 0302 	and.w	r3, r3, #2
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d00a      	beq.n	801020e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	430a      	orrs	r2, r1
 801020c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010212:	f003 0304 	and.w	r3, r3, #4
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00a      	beq.n	8010230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	430a      	orrs	r2, r1
 801022e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010234:	f003 0310 	and.w	r3, r3, #16
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00a      	beq.n	8010252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	430a      	orrs	r2, r1
 8010250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010256:	f003 0320 	and.w	r3, r3, #32
 801025a:	2b00      	cmp	r3, #0
 801025c:	d00a      	beq.n	8010274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	689b      	ldr	r3, [r3, #8]
 8010264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	430a      	orrs	r2, r1
 8010272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801027c:	2b00      	cmp	r3, #0
 801027e:	d01a      	beq.n	80102b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	430a      	orrs	r2, r1
 8010294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801029a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801029e:	d10a      	bne.n	80102b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	685b      	ldr	r3, [r3, #4]
 80102a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	430a      	orrs	r2, r1
 80102b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00a      	beq.n	80102d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	430a      	orrs	r2, r1
 80102d6:	605a      	str	r2, [r3, #4]
  }
}
 80102d8:	bf00      	nop
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b098      	sub	sp, #96	@ 0x60
 80102e8:	af02      	add	r7, sp, #8
 80102ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2200      	movs	r2, #0
 80102f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80102f4:	f7f2 fc80 	bl	8002bf8 <HAL_GetTick>
 80102f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f003 0308 	and.w	r3, r3, #8
 8010304:	2b08      	cmp	r3, #8
 8010306:	d12f      	bne.n	8010368 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801030c:	9300      	str	r3, [sp, #0]
 801030e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010310:	2200      	movs	r2, #0
 8010312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f88e 	bl	8010438 <UART_WaitOnFlagUntilTimeout>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d022      	beq.n	8010368 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801032a:	e853 3f00 	ldrex	r3, [r3]
 801032e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010336:	653b      	str	r3, [r7, #80]	@ 0x50
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	461a      	mov	r2, r3
 801033e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010340:	647b      	str	r3, [r7, #68]	@ 0x44
 8010342:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010348:	e841 2300 	strex	r3, r2, [r1]
 801034c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801034e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1e6      	bne.n	8010322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2220      	movs	r2, #32
 8010358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2200      	movs	r2, #0
 8010360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010364:	2303      	movs	r3, #3
 8010366:	e063      	b.n	8010430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f003 0304 	and.w	r3, r3, #4
 8010372:	2b04      	cmp	r3, #4
 8010374:	d149      	bne.n	801040a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010376:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801037a:	9300      	str	r3, [sp, #0]
 801037c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801037e:	2200      	movs	r2, #0
 8010380:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 f857 	bl	8010438 <UART_WaitOnFlagUntilTimeout>
 801038a:	4603      	mov	r3, r0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d03c      	beq.n	801040a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010398:	e853 3f00 	ldrex	r3, [r3]
 801039c:	623b      	str	r3, [r7, #32]
   return(result);
 801039e:	6a3b      	ldr	r3, [r7, #32]
 80103a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80103a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	461a      	mov	r2, r3
 80103ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80103b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80103b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103b6:	e841 2300 	strex	r3, r2, [r1]
 80103ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80103bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1e6      	bne.n	8010390 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	3308      	adds	r3, #8
 80103c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	e853 3f00 	ldrex	r3, [r3]
 80103d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	f023 0301 	bic.w	r3, r3, #1
 80103d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	3308      	adds	r3, #8
 80103e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80103e2:	61fa      	str	r2, [r7, #28]
 80103e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e6:	69b9      	ldr	r1, [r7, #24]
 80103e8:	69fa      	ldr	r2, [r7, #28]
 80103ea:	e841 2300 	strex	r3, r2, [r1]
 80103ee:	617b      	str	r3, [r7, #20]
   return(result);
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1e5      	bne.n	80103c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2220      	movs	r2, #32
 80103fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010406:	2303      	movs	r3, #3
 8010408:	e012      	b.n	8010430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2220      	movs	r2, #32
 801040e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2220      	movs	r2, #32
 8010416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	2200      	movs	r2, #0
 801042a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801042e:	2300      	movs	r3, #0
}
 8010430:	4618      	mov	r0, r3
 8010432:	3758      	adds	r7, #88	@ 0x58
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	603b      	str	r3, [r7, #0]
 8010444:	4613      	mov	r3, r2
 8010446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010448:	e04f      	b.n	80104ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801044a:	69bb      	ldr	r3, [r7, #24]
 801044c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010450:	d04b      	beq.n	80104ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010452:	f7f2 fbd1 	bl	8002bf8 <HAL_GetTick>
 8010456:	4602      	mov	r2, r0
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	69ba      	ldr	r2, [r7, #24]
 801045e:	429a      	cmp	r2, r3
 8010460:	d302      	bcc.n	8010468 <UART_WaitOnFlagUntilTimeout+0x30>
 8010462:	69bb      	ldr	r3, [r7, #24]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d101      	bne.n	801046c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010468:	2303      	movs	r3, #3
 801046a:	e04e      	b.n	801050a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 0304 	and.w	r3, r3, #4
 8010476:	2b00      	cmp	r3, #0
 8010478:	d037      	beq.n	80104ea <UART_WaitOnFlagUntilTimeout+0xb2>
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b80      	cmp	r3, #128	@ 0x80
 801047e:	d034      	beq.n	80104ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	2b40      	cmp	r3, #64	@ 0x40
 8010484:	d031      	beq.n	80104ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	69db      	ldr	r3, [r3, #28]
 801048c:	f003 0308 	and.w	r3, r3, #8
 8010490:	2b08      	cmp	r3, #8
 8010492:	d110      	bne.n	80104b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2208      	movs	r2, #8
 801049a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f000 f839 	bl	8010514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2208      	movs	r2, #8
 80104a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2200      	movs	r2, #0
 80104ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80104b2:	2301      	movs	r3, #1
 80104b4:	e029      	b.n	801050a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	69db      	ldr	r3, [r3, #28]
 80104bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104c4:	d111      	bne.n	80104ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f000 f81f 	bl	8010514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2220      	movs	r2, #32
 80104da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2200      	movs	r2, #0
 80104e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80104e6:	2303      	movs	r3, #3
 80104e8:	e00f      	b.n	801050a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	69da      	ldr	r2, [r3, #28]
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	4013      	ands	r3, r2
 80104f4:	68ba      	ldr	r2, [r7, #8]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	bf0c      	ite	eq
 80104fa:	2301      	moveq	r3, #1
 80104fc:	2300      	movne	r3, #0
 80104fe:	b2db      	uxtb	r3, r3
 8010500:	461a      	mov	r2, r3
 8010502:	79fb      	ldrb	r3, [r7, #7]
 8010504:	429a      	cmp	r2, r3
 8010506:	d0a0      	beq.n	801044a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
	...

08010514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010514:	b480      	push	{r7}
 8010516:	b095      	sub	sp, #84	@ 0x54
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010524:	e853 3f00 	ldrex	r3, [r3]
 8010528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801052a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801052c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801053a:	643b      	str	r3, [r7, #64]	@ 0x40
 801053c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010542:	e841 2300 	strex	r3, r2, [r1]
 8010546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1e6      	bne.n	801051c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	3308      	adds	r3, #8
 8010554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	e853 3f00 	ldrex	r3, [r3]
 801055c:	61fb      	str	r3, [r7, #28]
   return(result);
 801055e:	69fa      	ldr	r2, [r7, #28]
 8010560:	4b1e      	ldr	r3, [pc, #120]	@ (80105dc <UART_EndRxTransfer+0xc8>)
 8010562:	4013      	ands	r3, r2
 8010564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3308      	adds	r3, #8
 801056c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801056e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801057c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e5      	bne.n	801054e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010586:	2b01      	cmp	r3, #1
 8010588:	d118      	bne.n	80105bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	e853 3f00 	ldrex	r3, [r3]
 8010596:	60bb      	str	r3, [r7, #8]
   return(result);
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	f023 0310 	bic.w	r3, r3, #16
 801059e:	647b      	str	r3, [r7, #68]	@ 0x44
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	461a      	mov	r2, r3
 80105a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105a8:	61bb      	str	r3, [r7, #24]
 80105aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ac:	6979      	ldr	r1, [r7, #20]
 80105ae:	69ba      	ldr	r2, [r7, #24]
 80105b0:	e841 2300 	strex	r3, r2, [r1]
 80105b4:	613b      	str	r3, [r7, #16]
   return(result);
 80105b6:	693b      	ldr	r3, [r7, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d1e6      	bne.n	801058a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2220      	movs	r2, #32
 80105c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2200      	movs	r2, #0
 80105c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2200      	movs	r2, #0
 80105ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80105d0:	bf00      	nop
 80105d2:	3754      	adds	r7, #84	@ 0x54
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr
 80105dc:	effffffe 	.word	0xeffffffe

080105e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80105ee:	2b01      	cmp	r3, #1
 80105f0:	d101      	bne.n	80105f6 <HAL_UARTEx_DisableFifoMode+0x16>
 80105f2:	2302      	movs	r3, #2
 80105f4:	e027      	b.n	8010646 <HAL_UARTEx_DisableFifoMode+0x66>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2201      	movs	r2, #1
 80105fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2224      	movs	r2, #36	@ 0x24
 8010602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f022 0201 	bic.w	r2, r2, #1
 801061c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010624:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2200      	movs	r2, #0
 801062a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	68fa      	ldr	r2, [r7, #12]
 8010632:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2220      	movs	r2, #32
 8010638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010644:	2300      	movs	r3, #0
}
 8010646:	4618      	mov	r0, r3
 8010648:	3714      	adds	r7, #20
 801064a:	46bd      	mov	sp, r7
 801064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010650:	4770      	bx	lr

08010652 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b084      	sub	sp, #16
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010662:	2b01      	cmp	r3, #1
 8010664:	d101      	bne.n	801066a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010666:	2302      	movs	r3, #2
 8010668:	e02d      	b.n	80106c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2201      	movs	r2, #1
 801066e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2224      	movs	r2, #36	@ 0x24
 8010676:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	681a      	ldr	r2, [r3, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f022 0201 	bic.w	r2, r2, #1
 8010690:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	689b      	ldr	r3, [r3, #8]
 8010698:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	683a      	ldr	r2, [r7, #0]
 80106a2:	430a      	orrs	r2, r1
 80106a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 f850 	bl	801074c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2220      	movs	r2, #32
 80106b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	2200      	movs	r2, #0
 80106c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106c4:	2300      	movs	r3, #0
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3710      	adds	r7, #16
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}

080106ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80106ce:	b580      	push	{r7, lr}
 80106d0:	b084      	sub	sp, #16
 80106d2:	af00      	add	r7, sp, #0
 80106d4:	6078      	str	r0, [r7, #4]
 80106d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106de:	2b01      	cmp	r3, #1
 80106e0:	d101      	bne.n	80106e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80106e2:	2302      	movs	r3, #2
 80106e4:	e02d      	b.n	8010742 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2201      	movs	r2, #1
 80106ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2224      	movs	r2, #36	@ 0x24
 80106f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	681a      	ldr	r2, [r3, #0]
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f022 0201 	bic.w	r2, r2, #1
 801070c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	683a      	ldr	r2, [r7, #0]
 801071e:	430a      	orrs	r2, r1
 8010720:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010722:	6878      	ldr	r0, [r7, #4]
 8010724:	f000 f812 	bl	801074c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	68fa      	ldr	r2, [r7, #12]
 801072e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2220      	movs	r2, #32
 8010734:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3710      	adds	r7, #16
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
	...

0801074c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801074c:	b480      	push	{r7}
 801074e:	b085      	sub	sp, #20
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010758:	2b00      	cmp	r3, #0
 801075a:	d108      	bne.n	801076e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2201      	movs	r2, #1
 8010760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801076c:	e031      	b.n	80107d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801076e:	2310      	movs	r3, #16
 8010770:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010772:	2310      	movs	r3, #16
 8010774:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	689b      	ldr	r3, [r3, #8]
 801077c:	0e5b      	lsrs	r3, r3, #25
 801077e:	b2db      	uxtb	r3, r3
 8010780:	f003 0307 	and.w	r3, r3, #7
 8010784:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	0f5b      	lsrs	r3, r3, #29
 801078e:	b2db      	uxtb	r3, r3
 8010790:	f003 0307 	and.w	r3, r3, #7
 8010794:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010796:	7bbb      	ldrb	r3, [r7, #14]
 8010798:	7b3a      	ldrb	r2, [r7, #12]
 801079a:	4911      	ldr	r1, [pc, #68]	@ (80107e0 <UARTEx_SetNbDataToProcess+0x94>)
 801079c:	5c8a      	ldrb	r2, [r1, r2]
 801079e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80107a2:	7b3a      	ldrb	r2, [r7, #12]
 80107a4:	490f      	ldr	r1, [pc, #60]	@ (80107e4 <UARTEx_SetNbDataToProcess+0x98>)
 80107a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80107a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107b4:	7bfb      	ldrb	r3, [r7, #15]
 80107b6:	7b7a      	ldrb	r2, [r7, #13]
 80107b8:	4909      	ldr	r1, [pc, #36]	@ (80107e0 <UARTEx_SetNbDataToProcess+0x94>)
 80107ba:	5c8a      	ldrb	r2, [r1, r2]
 80107bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80107c0:	7b7a      	ldrb	r2, [r7, #13]
 80107c2:	4908      	ldr	r1, [pc, #32]	@ (80107e4 <UARTEx_SetNbDataToProcess+0x98>)
 80107c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80107c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80107d2:	bf00      	nop
 80107d4:	3714      	adds	r7, #20
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	08012540 	.word	0x08012540
 80107e4:	08012548 	.word	0x08012548

080107e8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80107e8:	b084      	sub	sp, #16
 80107ea:	b480      	push	{r7}
 80107ec:	b085      	sub	sp, #20
 80107ee:	af00      	add	r7, sp, #0
 80107f0:	6078      	str	r0, [r7, #4]
 80107f2:	f107 001c 	add.w	r0, r7, #28
 80107f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80107fa:	2300      	movs	r3, #0
 80107fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80107fe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8010800:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8010802:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8010804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8010806:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8010808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 801080a:	431a      	orrs	r2, r3
             Init.ClockDiv
 801080c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 801080e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	4313      	orrs	r3, r2
 8010814:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685a      	ldr	r2, [r3, #4]
 801081a:	4b07      	ldr	r3, [pc, #28]	@ (8010838 <SDMMC_Init+0x50>)
 801081c:	4013      	ands	r3, r2
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	431a      	orrs	r2, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010826:	2300      	movs	r3, #0
}
 8010828:	4618      	mov	r0, r3
 801082a:	3714      	adds	r7, #20
 801082c:	46bd      	mov	sp, r7
 801082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010832:	b004      	add	sp, #16
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	ffc02c00 	.word	0xffc02c00

0801083c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 801084a:	4618      	mov	r0, r3
 801084c:	370c      	adds	r7, #12
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr

08010856 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010856:	b480      	push	{r7}
 8010858:	b083      	sub	sp, #12
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
 801085e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	681a      	ldr	r2, [r3, #0]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010878:	b480      	push	{r7}
 801087a:	b083      	sub	sp, #12
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f043 0203 	orr.w	r2, r3, #3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801088c:	2300      	movs	r3, #0
}
 801088e:	4618      	mov	r0, r3
 8010890:	370c      	adds	r7, #12
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801089a:	b480      	push	{r7}
 801089c:	b083      	sub	sp, #12
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f003 0303 	and.w	r3, r3, #3
}
 80108aa:	4618      	mov	r0, r3
 80108ac:	370c      	adds	r7, #12
 80108ae:	46bd      	mov	sp, r7
 80108b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b4:	4770      	bx	lr
	...

080108b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b085      	sub	sp, #20
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
 80108c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80108c2:	2300      	movs	r3, #0
 80108c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	681a      	ldr	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80108d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80108dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80108e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	4313      	orrs	r3, r2
 80108e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	68da      	ldr	r2, [r3, #12]
 80108ee:	4b06      	ldr	r3, [pc, #24]	@ (8010908 <SDMMC_SendCommand+0x50>)
 80108f0:	4013      	ands	r3, r2
 80108f2:	68fa      	ldr	r2, [r7, #12]
 80108f4:	431a      	orrs	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr
 8010908:	fffee0c0 	.word	0xfffee0c0

0801090c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801090c:	b480      	push	{r7}
 801090e:	b083      	sub	sp, #12
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	b2db      	uxtb	r3, r3
}
 801091a:	4618      	mov	r0, r3
 801091c:	370c      	adds	r7, #12
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010926:	b480      	push	{r7}
 8010928:	b085      	sub	sp, #20
 801092a:	af00      	add	r7, sp, #0
 801092c:	6078      	str	r0, [r7, #4]
 801092e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	3314      	adds	r3, #20
 8010934:	461a      	mov	r2, r3
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	4413      	add	r3, r2
 801093a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	681b      	ldr	r3, [r3, #0]
}
 8010940:	4618      	mov	r0, r3
 8010942:	3714      	adds	r7, #20
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801094c:	b480      	push	{r7}
 801094e:	b085      	sub	sp, #20
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	681a      	ldr	r2, [r3, #0]
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	685a      	ldr	r2, [r3, #4]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010972:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010978:	431a      	orrs	r2, r3
                       Data->DPSM);
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801097e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010980:	68fa      	ldr	r2, [r7, #12]
 8010982:	4313      	orrs	r3, r2
 8010984:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801098a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	431a      	orrs	r2, r3
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010996:	2300      	movs	r3, #0

}
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b088      	sub	sp, #32
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
 80109ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80109ae:	683b      	ldr	r3, [r7, #0]
 80109b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80109b2:	2310      	movs	r3, #16
 80109b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109bc:	2300      	movs	r3, #0
 80109be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109c6:	f107 0308 	add.w	r3, r7, #8
 80109ca:	4619      	mov	r1, r3
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f7ff ff73 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80109d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109d6:	2110      	movs	r1, #16
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fa5f 	bl	8010e9c <SDMMC_GetCmdResp1>
 80109de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109e0:	69fb      	ldr	r3, [r7, #28]
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3720      	adds	r7, #32
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b088      	sub	sp, #32
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80109f8:	2311      	movs	r3, #17
 80109fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a02:	2300      	movs	r3, #0
 8010a04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a0c:	f107 0308 	add.w	r3, r7, #8
 8010a10:	4619      	mov	r1, r3
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff ff50 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a1c:	2111      	movs	r1, #17
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fa3c 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010a24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a26:	69fb      	ldr	r3, [r7, #28]
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3720      	adds	r7, #32
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bd80      	pop	{r7, pc}

08010a30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010a3e:	2312      	movs	r3, #18
 8010a40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a52:	f107 0308 	add.w	r3, r7, #8
 8010a56:	4619      	mov	r1, r3
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f7ff ff2d 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a62:	2112      	movs	r1, #18
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 fa19 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010a6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a6c:	69fb      	ldr	r3, [r7, #28]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3720      	adds	r7, #32
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b088      	sub	sp, #32
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a84:	2318      	movs	r3, #24
 8010a86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010a96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a98:	f107 0308 	add.w	r3, r7, #8
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7ff ff0a 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aa8:	2118      	movs	r1, #24
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f000 f9f6 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab2:	69fb      	ldr	r3, [r7, #28]
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3720      	adds	r7, #32
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b088      	sub	sp, #32
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010aca:	2319      	movs	r3, #25
 8010acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ace:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ad2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010adc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ade:	f107 0308 	add.w	r3, r7, #8
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff fee7 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aee:	2119      	movs	r1, #25
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 f9d3 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010af6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010af8:	69fb      	ldr	r3, [r7, #28]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3720      	adds	r7, #32
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
	...

08010b04 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b088      	sub	sp, #32
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010b10:	230c      	movs	r3, #12
 8010b12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b22:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b3c:	f107 0308 	add.w	r3, r7, #8
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7ff feb8 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010b48:	4a0b      	ldr	r2, [pc, #44]	@ (8010b78 <SDMMC_CmdStopTransfer+0x74>)
 8010b4a:	210c      	movs	r1, #12
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f000 f9a5 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010b52:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010b66:	d101      	bne.n	8010b6c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010b6c:	69fb      	ldr	r3, [r7, #28]
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	3720      	adds	r7, #32
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	05f5e100 	.word	0x05f5e100

08010b7c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b088      	sub	sp, #32
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010b8a:	2307      	movs	r3, #7
 8010b8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b94:	2300      	movs	r3, #0
 8010b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010b9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b9e:	f107 0308 	add.w	r3, r7, #8
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7ff fe87 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bae:	2107      	movs	r1, #7
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 f973 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb8:	69fb      	ldr	r3, [r7, #28]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3720      	adds	r7, #32
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b088      	sub	sp, #32
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010bde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010be0:	f107 0308 	add.w	r3, r7, #8
 8010be4:	4619      	mov	r1, r3
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7ff fe66 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 fb97 	bl	8011320 <SDMMC_GetCmdError>
 8010bf2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bf4:	69fb      	ldr	r3, [r7, #28]
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3720      	adds	r7, #32
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b088      	sub	sp, #32
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010c06:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010c0c:	2308      	movs	r3, #8
 8010c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c16:	2300      	movs	r3, #0
 8010c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c20:	f107 0308 	add.w	r3, r7, #8
 8010c24:	4619      	mov	r1, r3
 8010c26:	6878      	ldr	r0, [r7, #4]
 8010c28:	f7ff fe46 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 fb29 	bl	8011284 <SDMMC_GetCmdResp7>
 8010c32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c34:	69fb      	ldr	r3, [r7, #28]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3720      	adds	r7, #32
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd80      	pop	{r7, pc}

08010c3e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c3e:	b580      	push	{r7, lr}
 8010c40:	b088      	sub	sp, #32
 8010c42:	af00      	add	r7, sp, #0
 8010c44:	6078      	str	r0, [r7, #4]
 8010c46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010c4c:	2337      	movs	r3, #55	@ 0x37
 8010c4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c56:	2300      	movs	r3, #0
 8010c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010c5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c60:	f107 0308 	add.w	r3, r7, #8
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7ff fe26 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010c70:	2137      	movs	r1, #55	@ 0x37
 8010c72:	6878      	ldr	r0, [r7, #4]
 8010c74:	f000 f912 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c7a:	69fb      	ldr	r3, [r7, #28]
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3720      	adds	r7, #32
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b088      	sub	sp, #32
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010c92:	2329      	movs	r3, #41	@ 0x29
 8010c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ca6:	f107 0308 	add.w	r3, r7, #8
 8010caa:	4619      	mov	r1, r3
 8010cac:	6878      	ldr	r0, [r7, #4]
 8010cae:	f7ff fe03 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f000 fa2e 	bl	8011114 <SDMMC_GetCmdResp3>
 8010cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cba:	69fb      	ldr	r3, [r7, #28]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3720      	adds	r7, #32
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b088      	sub	sp, #32
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010cd2:	2306      	movs	r3, #6
 8010cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010cda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010cdc:	2300      	movs	r3, #0
 8010cde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ce4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ce6:	f107 0308 	add.w	r3, r7, #8
 8010cea:	4619      	mov	r1, r3
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f7ff fde3 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010cf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010cf6:	2106      	movs	r1, #6
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	f000 f8cf 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010cfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d00:	69fb      	ldr	r3, [r7, #28]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3720      	adds	r7, #32
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010d0a:	b580      	push	{r7, lr}
 8010d0c:	b088      	sub	sp, #32
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d12:	2300      	movs	r3, #0
 8010d14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010d16:	2333      	movs	r3, #51	@ 0x33
 8010d18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010d1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d20:	2300      	movs	r3, #0
 8010d22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d2a:	f107 0308 	add.w	r3, r7, #8
 8010d2e:	4619      	mov	r1, r3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7ff fdc1 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010d3a:	2133      	movs	r1, #51	@ 0x33
 8010d3c:	6878      	ldr	r0, [r7, #4]
 8010d3e:	f000 f8ad 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010d42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d44:	69fb      	ldr	r3, [r7, #28]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3720      	adds	r7, #32
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}

08010d4e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010d4e:	b580      	push	{r7, lr}
 8010d50:	b088      	sub	sp, #32
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010d56:	2300      	movs	r3, #0
 8010d58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010d5a:	2302      	movs	r3, #2
 8010d5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010d62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d64:	2300      	movs	r3, #0
 8010d66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010d6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d6e:	f107 0308 	add.w	r3, r7, #8
 8010d72:	4619      	mov	r1, r3
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7ff fd9f 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f000 f980 	bl	8011080 <SDMMC_GetCmdResp2>
 8010d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d82:	69fb      	ldr	r3, [r7, #28]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3720      	adds	r7, #32
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b088      	sub	sp, #32
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010d9a:	2309      	movs	r3, #9
 8010d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010da4:	2300      	movs	r3, #0
 8010da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010dac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dae:	f107 0308 	add.w	r3, r7, #8
 8010db2:	4619      	mov	r1, r3
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff fd7f 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 f960 	bl	8011080 <SDMMC_GetCmdResp2>
 8010dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dc2:	69fb      	ldr	r3, [r7, #28]
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3720      	adds	r7, #32
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b088      	sub	sp, #32
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010dda:	2303      	movs	r3, #3
 8010ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010de4:	2300      	movs	r3, #0
 8010de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010dec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dee:	f107 0308 	add.w	r3, r7, #8
 8010df2:	4619      	mov	r1, r3
 8010df4:	6878      	ldr	r0, [r7, #4]
 8010df6:	f7ff fd5f 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010dfa:	683a      	ldr	r2, [r7, #0]
 8010dfc:	2103      	movs	r1, #3
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 f9c8 	bl	8011194 <SDMMC_GetCmdResp6>
 8010e04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e06:	69fb      	ldr	r3, [r7, #28]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3720      	adds	r7, #32
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}

08010e10 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b088      	sub	sp, #32
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
 8010e18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010e1e:	230d      	movs	r3, #13
 8010e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e32:	f107 0308 	add.w	r3, r7, #8
 8010e36:	4619      	mov	r1, r3
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7ff fd3d 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e42:	210d      	movs	r1, #13
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f000 f829 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e4c:	69fb      	ldr	r3, [r7, #28]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3720      	adds	r7, #32
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}

08010e56 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010e56:	b580      	push	{r7, lr}
 8010e58:	b088      	sub	sp, #32
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010e62:	230d      	movs	r3, #13
 8010e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010e74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e76:	f107 0308 	add.w	r3, r7, #8
 8010e7a:	4619      	mov	r1, r3
 8010e7c:	6878      	ldr	r0, [r7, #4]
 8010e7e:	f7ff fd1b 	bl	80108b8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e86:	210d      	movs	r1, #13
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f000 f807 	bl	8010e9c <SDMMC_GetCmdResp1>
 8010e8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e90:	69fb      	ldr	r3, [r7, #28]
}
 8010e92:	4618      	mov	r0, r3
 8010e94:	3720      	adds	r7, #32
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
	...

08010e9c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b088      	sub	sp, #32
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010eaa:	4b70      	ldr	r3, [pc, #448]	@ (801106c <SDMMC_GetCmdResp1+0x1d0>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4a70      	ldr	r2, [pc, #448]	@ (8011070 <SDMMC_GetCmdResp1+0x1d4>)
 8010eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8010eb4:	0a5a      	lsrs	r2, r3, #9
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	fb02 f303 	mul.w	r3, r2, r3
 8010ebc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	1e5a      	subs	r2, r3, #1
 8010ec2:	61fa      	str	r2, [r7, #28]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d102      	bne.n	8010ece <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ec8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ecc:	e0c9      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ed2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010ed4:	69ba      	ldr	r2, [r7, #24]
 8010ed6:	4b67      	ldr	r3, [pc, #412]	@ (8011074 <SDMMC_GetCmdResp1+0x1d8>)
 8010ed8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d0ef      	beq.n	8010ebe <SDMMC_GetCmdResp1+0x22>
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d1ea      	bne.n	8010ebe <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010eec:	f003 0304 	and.w	r3, r3, #4
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d004      	beq.n	8010efe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010efa:	2304      	movs	r3, #4
 8010efc:	e0b1      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f02:	f003 0301 	and.w	r3, r3, #1
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d004      	beq.n	8010f14 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f10:	2301      	movs	r3, #1
 8010f12:	e0a6      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	4a58      	ldr	r2, [pc, #352]	@ (8011078 <SDMMC_GetCmdResp1+0x1dc>)
 8010f18:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f1a:	68f8      	ldr	r0, [r7, #12]
 8010f1c:	f7ff fcf6 	bl	801090c <SDMMC_GetCommandResponse>
 8010f20:	4603      	mov	r3, r0
 8010f22:	461a      	mov	r2, r3
 8010f24:	7afb      	ldrb	r3, [r7, #11]
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d001      	beq.n	8010f2e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	e099      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010f2e:	2100      	movs	r1, #0
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f7ff fcf8 	bl	8010926 <SDMMC_GetResponse>
 8010f36:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010f38:	697a      	ldr	r2, [r7, #20]
 8010f3a:	4b50      	ldr	r3, [pc, #320]	@ (801107c <SDMMC_GetCmdResp1+0x1e0>)
 8010f3c:	4013      	ands	r3, r2
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d101      	bne.n	8010f46 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010f42:	2300      	movs	r3, #0
 8010f44:	e08d      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010f46:	697b      	ldr	r3, [r7, #20]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	da02      	bge.n	8010f52 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010f50:	e087      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010f52:	697b      	ldr	r3, [r7, #20]
 8010f54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d001      	beq.n	8010f60 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010f5c:	2340      	movs	r3, #64	@ 0x40
 8010f5e:	e080      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d001      	beq.n	8010f6e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010f6a:	2380      	movs	r3, #128	@ 0x80
 8010f6c:	e079      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d002      	beq.n	8010f7e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010f7c:	e071      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010f88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010f8c:	e069      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f9c:	e061      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010f9e:	697b      	ldr	r3, [r7, #20]
 8010fa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d002      	beq.n	8010fae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010fa8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010fac:	e059      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d002      	beq.n	8010fbe <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010fbc:	e051      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d002      	beq.n	8010fce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010fcc:	e049      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d002      	beq.n	8010fde <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010fd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010fdc:	e041      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d002      	beq.n	8010fee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010fe8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010fec:	e039      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d002      	beq.n	8010ffe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010ff8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010ffc:	e031      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011004:	2b00      	cmp	r3, #0
 8011006:	d002      	beq.n	801100e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011008:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801100c:	e029      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011018:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801101c:	e021      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011024:	2b00      	cmp	r3, #0
 8011026:	d002      	beq.n	801102e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011028:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801102c:	e019      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011034:	2b00      	cmp	r3, #0
 8011036:	d002      	beq.n	801103e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011038:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801103c:	e011      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011048:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801104c:	e009      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	f003 0308 	and.w	r3, r3, #8
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011058:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 801105c:	e001      	b.n	8011062 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801105e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8011062:	4618      	mov	r0, r3
 8011064:	3720      	adds	r7, #32
 8011066:	46bd      	mov	sp, r7
 8011068:	bd80      	pop	{r7, pc}
 801106a:	bf00      	nop
 801106c:	2400000c 	.word	0x2400000c
 8011070:	10624dd3 	.word	0x10624dd3
 8011074:	00200045 	.word	0x00200045
 8011078:	002000c5 	.word	0x002000c5
 801107c:	fdffe008 	.word	0xfdffe008

08011080 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011080:	b480      	push	{r7}
 8011082:	b085      	sub	sp, #20
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011088:	4b1f      	ldr	r3, [pc, #124]	@ (8011108 <SDMMC_GetCmdResp2+0x88>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	4a1f      	ldr	r2, [pc, #124]	@ (801110c <SDMMC_GetCmdResp2+0x8c>)
 801108e:	fba2 2303 	umull	r2, r3, r2, r3
 8011092:	0a5b      	lsrs	r3, r3, #9
 8011094:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011098:	fb02 f303 	mul.w	r3, r2, r3
 801109c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	1e5a      	subs	r2, r3, #1
 80110a2:	60fa      	str	r2, [r7, #12]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d102      	bne.n	80110ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80110ac:	e026      	b.n	80110fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d0ef      	beq.n	801109e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d1ea      	bne.n	801109e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110cc:	f003 0304 	and.w	r3, r3, #4
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d004      	beq.n	80110de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	2204      	movs	r2, #4
 80110d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80110da:	2304      	movs	r3, #4
 80110dc:	e00e      	b.n	80110fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80110e2:	f003 0301 	and.w	r3, r3, #1
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d004      	beq.n	80110f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2201      	movs	r2, #1
 80110ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80110f0:	2301      	movs	r3, #1
 80110f2:	e003      	b.n	80110fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4a06      	ldr	r2, [pc, #24]	@ (8011110 <SDMMC_GetCmdResp2+0x90>)
 80110f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80110fa:	2300      	movs	r3, #0
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3714      	adds	r7, #20
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	2400000c 	.word	0x2400000c
 801110c:	10624dd3 	.word	0x10624dd3
 8011110:	002000c5 	.word	0x002000c5

08011114 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011114:	b480      	push	{r7}
 8011116:	b085      	sub	sp, #20
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801111c:	4b1a      	ldr	r3, [pc, #104]	@ (8011188 <SDMMC_GetCmdResp3+0x74>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	4a1a      	ldr	r2, [pc, #104]	@ (801118c <SDMMC_GetCmdResp3+0x78>)
 8011122:	fba2 2303 	umull	r2, r3, r2, r3
 8011126:	0a5b      	lsrs	r3, r3, #9
 8011128:	f241 3288 	movw	r2, #5000	@ 0x1388
 801112c:	fb02 f303 	mul.w	r3, r2, r3
 8011130:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	1e5a      	subs	r2, r3, #1
 8011136:	60fa      	str	r2, [r7, #12]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d102      	bne.n	8011142 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801113c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011140:	e01b      	b.n	801117a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011146:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801114e:	2b00      	cmp	r3, #0
 8011150:	d0ef      	beq.n	8011132 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1ea      	bne.n	8011132 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011160:	f003 0304 	and.w	r3, r3, #4
 8011164:	2b00      	cmp	r3, #0
 8011166:	d004      	beq.n	8011172 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2204      	movs	r2, #4
 801116c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801116e:	2304      	movs	r3, #4
 8011170:	e003      	b.n	801117a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	4a06      	ldr	r2, [pc, #24]	@ (8011190 <SDMMC_GetCmdResp3+0x7c>)
 8011176:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011178:	2300      	movs	r3, #0
}
 801117a:	4618      	mov	r0, r3
 801117c:	3714      	adds	r7, #20
 801117e:	46bd      	mov	sp, r7
 8011180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop
 8011188:	2400000c 	.word	0x2400000c
 801118c:	10624dd3 	.word	0x10624dd3
 8011190:	002000c5 	.word	0x002000c5

08011194 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b088      	sub	sp, #32
 8011198:	af00      	add	r7, sp, #0
 801119a:	60f8      	str	r0, [r7, #12]
 801119c:	460b      	mov	r3, r1
 801119e:	607a      	str	r2, [r7, #4]
 80111a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80111a2:	4b35      	ldr	r3, [pc, #212]	@ (8011278 <SDMMC_GetCmdResp6+0xe4>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4a35      	ldr	r2, [pc, #212]	@ (801127c <SDMMC_GetCmdResp6+0xe8>)
 80111a8:	fba2 2303 	umull	r2, r3, r2, r3
 80111ac:	0a5b      	lsrs	r3, r3, #9
 80111ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111b2:	fb02 f303 	mul.w	r3, r2, r3
 80111b6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80111b8:	69fb      	ldr	r3, [r7, #28]
 80111ba:	1e5a      	subs	r2, r3, #1
 80111bc:	61fa      	str	r2, [r7, #28]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d102      	bne.n	80111c8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80111c2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80111c6:	e052      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111cc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d0ef      	beq.n	80111b8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1ea      	bne.n	80111b8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111e6:	f003 0304 	and.w	r3, r3, #4
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d004      	beq.n	80111f8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	2204      	movs	r2, #4
 80111f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111f4:	2304      	movs	r3, #4
 80111f6:	e03a      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80111fc:	f003 0301 	and.w	r3, r3, #1
 8011200:	2b00      	cmp	r3, #0
 8011202:	d004      	beq.n	801120e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2201      	movs	r2, #1
 8011208:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801120a:	2301      	movs	r3, #1
 801120c:	e02f      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f7ff fb7c 	bl	801090c <SDMMC_GetCommandResponse>
 8011214:	4603      	mov	r3, r0
 8011216:	461a      	mov	r2, r3
 8011218:	7afb      	ldrb	r3, [r7, #11]
 801121a:	4293      	cmp	r3, r2
 801121c:	d001      	beq.n	8011222 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801121e:	2301      	movs	r3, #1
 8011220:	e025      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	4a16      	ldr	r2, [pc, #88]	@ (8011280 <SDMMC_GetCmdResp6+0xec>)
 8011226:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011228:	2100      	movs	r1, #0
 801122a:	68f8      	ldr	r0, [r7, #12]
 801122c:	f7ff fb7b 	bl	8010926 <SDMMC_GetResponse>
 8011230:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011238:	2b00      	cmp	r3, #0
 801123a:	d106      	bne.n	801124a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	0c1b      	lsrs	r3, r3, #16
 8011240:	b29a      	uxth	r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011246:	2300      	movs	r3, #0
 8011248:	e011      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011258:	e009      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011260:	2b00      	cmp	r3, #0
 8011262:	d002      	beq.n	801126a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011264:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011268:	e001      	b.n	801126e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801126a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801126e:	4618      	mov	r0, r3
 8011270:	3720      	adds	r7, #32
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}
 8011276:	bf00      	nop
 8011278:	2400000c 	.word	0x2400000c
 801127c:	10624dd3 	.word	0x10624dd3
 8011280:	002000c5 	.word	0x002000c5

08011284 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011284:	b480      	push	{r7}
 8011286:	b085      	sub	sp, #20
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801128c:	4b22      	ldr	r3, [pc, #136]	@ (8011318 <SDMMC_GetCmdResp7+0x94>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	4a22      	ldr	r2, [pc, #136]	@ (801131c <SDMMC_GetCmdResp7+0x98>)
 8011292:	fba2 2303 	umull	r2, r3, r2, r3
 8011296:	0a5b      	lsrs	r3, r3, #9
 8011298:	f241 3288 	movw	r2, #5000	@ 0x1388
 801129c:	fb02 f303 	mul.w	r3, r2, r3
 80112a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	1e5a      	subs	r2, r3, #1
 80112a6:	60fa      	str	r2, [r7, #12]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d102      	bne.n	80112b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80112b0:	e02c      	b.n	801130c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112b6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112b8:	68bb      	ldr	r3, [r7, #8]
 80112ba:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d0ef      	beq.n	80112a2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d1ea      	bne.n	80112a2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112d0:	f003 0304 	and.w	r3, r3, #4
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d004      	beq.n	80112e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2204      	movs	r2, #4
 80112dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112de:	2304      	movs	r3, #4
 80112e0:	e014      	b.n	801130c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112e6:	f003 0301 	and.w	r3, r3, #1
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d004      	beq.n	80112f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2201      	movs	r2, #1
 80112f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112f4:	2301      	movs	r3, #1
 80112f6:	e009      	b.n	801130c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80112fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2240      	movs	r2, #64	@ 0x40
 8011308:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801130a:	2300      	movs	r3, #0

}
 801130c:	4618      	mov	r0, r3
 801130e:	3714      	adds	r7, #20
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr
 8011318:	2400000c 	.word	0x2400000c
 801131c:	10624dd3 	.word	0x10624dd3

08011320 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011320:	b480      	push	{r7}
 8011322:	b085      	sub	sp, #20
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011328:	4b11      	ldr	r3, [pc, #68]	@ (8011370 <SDMMC_GetCmdError+0x50>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	4a11      	ldr	r2, [pc, #68]	@ (8011374 <SDMMC_GetCmdError+0x54>)
 801132e:	fba2 2303 	umull	r2, r3, r2, r3
 8011332:	0a5b      	lsrs	r3, r3, #9
 8011334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011338:	fb02 f303 	mul.w	r3, r2, r3
 801133c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	1e5a      	subs	r2, r3, #1
 8011342:	60fa      	str	r2, [r7, #12]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d102      	bne.n	801134e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011348:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801134c:	e009      	b.n	8011362 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011356:	2b00      	cmp	r3, #0
 8011358:	d0f1      	beq.n	801133e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4a06      	ldr	r2, [pc, #24]	@ (8011378 <SDMMC_GetCmdError+0x58>)
 801135e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8011360:	2300      	movs	r3, #0
}
 8011362:	4618      	mov	r0, r3
 8011364:	3714      	adds	r7, #20
 8011366:	46bd      	mov	sp, r7
 8011368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136c:	4770      	bx	lr
 801136e:	bf00      	nop
 8011370:	2400000c 	.word	0x2400000c
 8011374:	10624dd3 	.word	0x10624dd3
 8011378:	002000c5 	.word	0x002000c5

0801137c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011380:	4904      	ldr	r1, [pc, #16]	@ (8011394 <MX_FATFS_Init+0x18>)
 8011382:	4805      	ldr	r0, [pc, #20]	@ (8011398 <MX_FATFS_Init+0x1c>)
 8011384:	f000 fa8e 	bl	80118a4 <FATFS_LinkDriver>
 8011388:	4603      	mov	r3, r0
 801138a:	461a      	mov	r2, r3
 801138c:	4b03      	ldr	r3, [pc, #12]	@ (801139c <MX_FATFS_Init+0x20>)
 801138e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011390:	bf00      	nop
 8011392:	bd80      	pop	{r7, pc}
 8011394:	240008a4 	.word	0x240008a4
 8011398:	08012550 	.word	0x08012550
 801139c:	240008a0 	.word	0x240008a0

080113a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80113aa:	f000 f885 	bl	80114b8 <BSP_SD_IsDetected>
 80113ae:	4603      	mov	r3, r0
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d001      	beq.n	80113b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80113b4:	2302      	movs	r3, #2
 80113b6:	e012      	b.n	80113de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80113b8:	480b      	ldr	r0, [pc, #44]	@ (80113e8 <BSP_SD_Init+0x48>)
 80113ba:	f7fb f95d 	bl	800c678 <HAL_SD_Init>
 80113be:	4603      	mov	r3, r0
 80113c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80113c2:	79fb      	ldrb	r3, [r7, #7]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d109      	bne.n	80113dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80113c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80113cc:	4806      	ldr	r0, [pc, #24]	@ (80113e8 <BSP_SD_Init+0x48>)
 80113ce:	f7fc f813 	bl	800d3f8 <HAL_SD_ConfigWideBusOperation>
 80113d2:	4603      	mov	r3, r0
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d001      	beq.n	80113dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80113d8:	2301      	movs	r3, #1
 80113da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80113dc:	79fb      	ldrb	r3, [r7, #7]
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3708      	adds	r7, #8
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bd80      	pop	{r7, pc}
 80113e6:	bf00      	nop
 80113e8:	240003cc 	.word	0x240003cc

080113ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b086      	sub	sp, #24
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	60b9      	str	r1, [r7, #8]
 80113f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80113f8:	2300      	movs	r3, #0
 80113fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	68ba      	ldr	r2, [r7, #8]
 8011400:	68f9      	ldr	r1, [r7, #12]
 8011402:	4806      	ldr	r0, [pc, #24]	@ (801141c <BSP_SD_ReadBlocks_DMA+0x30>)
 8011404:	f7fb fa58 	bl	800c8b8 <HAL_SD_ReadBlocks_DMA>
 8011408:	4603      	mov	r3, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d001      	beq.n	8011412 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801140e:	2301      	movs	r3, #1
 8011410:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011412:	7dfb      	ldrb	r3, [r7, #23]
}
 8011414:	4618      	mov	r0, r3
 8011416:	3718      	adds	r7, #24
 8011418:	46bd      	mov	sp, r7
 801141a:	bd80      	pop	{r7, pc}
 801141c:	240003cc 	.word	0x240003cc

08011420 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af00      	add	r7, sp, #0
 8011426:	60f8      	str	r0, [r7, #12]
 8011428:	60b9      	str	r1, [r7, #8]
 801142a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801142c:	2300      	movs	r3, #0
 801142e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	68ba      	ldr	r2, [r7, #8]
 8011434:	68f9      	ldr	r1, [r7, #12]
 8011436:	4806      	ldr	r0, [pc, #24]	@ (8011450 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011438:	f7fb fae6 	bl	800ca08 <HAL_SD_WriteBlocks_DMA>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d001      	beq.n	8011446 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011442:	2301      	movs	r3, #1
 8011444:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011446:	7dfb      	ldrb	r3, [r7, #23]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3718      	adds	r7, #24
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}
 8011450:	240003cc 	.word	0x240003cc

08011454 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011454:	b580      	push	{r7, lr}
 8011456:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011458:	4805      	ldr	r0, [pc, #20]	@ (8011470 <BSP_SD_GetCardState+0x1c>)
 801145a:	f7fc f8df 	bl	800d61c <HAL_SD_GetCardState>
 801145e:	4603      	mov	r3, r0
 8011460:	2b04      	cmp	r3, #4
 8011462:	bf14      	ite	ne
 8011464:	2301      	movne	r3, #1
 8011466:	2300      	moveq	r3, #0
 8011468:	b2db      	uxtb	r3, r3
}
 801146a:	4618      	mov	r0, r3
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	240003cc 	.word	0x240003cc

08011474 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801147c:	6879      	ldr	r1, [r7, #4]
 801147e:	4803      	ldr	r0, [pc, #12]	@ (801148c <BSP_SD_GetCardInfo+0x18>)
 8011480:	f7fb ff8e 	bl	800d3a0 <HAL_SD_GetCardInfo>
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	240003cc 	.word	0x240003cc

08011490 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011498:	f000 f9a0 	bl	80117dc <BSP_SD_WriteCpltCallback>
}
 801149c:	bf00      	nop
 801149e:	3708      	adds	r7, #8
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b082      	sub	sp, #8
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80114ac:	f000 f9a2 	bl	80117f4 <BSP_SD_ReadCpltCallback>
}
 80114b0:	bf00      	nop
 80114b2:	3708      	adds	r7, #8
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bd80      	pop	{r7, pc}

080114b8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b082      	sub	sp, #8
 80114bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80114be:	2301      	movs	r3, #1
 80114c0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80114c2:	f000 f80b 	bl	80114dc <BSP_PlatformIsDetected>
 80114c6:	4603      	mov	r3, r0
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d101      	bne.n	80114d0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80114cc:	2300      	movs	r3, #0
 80114ce:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80114d0:	79fb      	ldrb	r3, [r7, #7]
 80114d2:	b2db      	uxtb	r3, r3
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3708      	adds	r7, #8
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80114e2:	2301      	movs	r3, #1
 80114e4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80114e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80114ea:	4806      	ldr	r0, [pc, #24]	@ (8011504 <BSP_PlatformIsDetected+0x28>)
 80114ec:	f7f7 fd0c 	bl	8008f08 <HAL_GPIO_ReadPin>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d001      	beq.n	80114fa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80114f6:	2300      	movs	r3, #0
 80114f8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80114fa:	79fb      	ldrb	r3, [r7, #7]
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3708      	adds	r7, #8
 8011500:	46bd      	mov	sp, r7
 8011502:	bd80      	pop	{r7, pc}
 8011504:	58021400 	.word	0x58021400

08011508 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011510:	f7f1 fb72 	bl	8002bf8 <HAL_GetTick>
 8011514:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011516:	e006      	b.n	8011526 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011518:	f7ff ff9c 	bl	8011454 <BSP_SD_GetCardState>
 801151c:	4603      	mov	r3, r0
 801151e:	2b00      	cmp	r3, #0
 8011520:	d101      	bne.n	8011526 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011522:	2300      	movs	r3, #0
 8011524:	e009      	b.n	801153a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011526:	f7f1 fb67 	bl	8002bf8 <HAL_GetTick>
 801152a:	4602      	mov	r2, r0
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	429a      	cmp	r2, r3
 8011534:	d8f0      	bhi.n	8011518 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011536:	f04f 33ff 	mov.w	r3, #4294967295
}
 801153a:	4618      	mov	r0, r3
 801153c:	3710      	adds	r7, #16
 801153e:	46bd      	mov	sp, r7
 8011540:	bd80      	pop	{r7, pc}
	...

08011544 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b082      	sub	sp, #8
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801154e:	4b0b      	ldr	r3, [pc, #44]	@ (801157c <SD_CheckStatus+0x38>)
 8011550:	2201      	movs	r2, #1
 8011552:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011554:	f7ff ff7e 	bl	8011454 <BSP_SD_GetCardState>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d107      	bne.n	801156e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801155e:	4b07      	ldr	r3, [pc, #28]	@ (801157c <SD_CheckStatus+0x38>)
 8011560:	781b      	ldrb	r3, [r3, #0]
 8011562:	b2db      	uxtb	r3, r3
 8011564:	f023 0301 	bic.w	r3, r3, #1
 8011568:	b2da      	uxtb	r2, r3
 801156a:	4b04      	ldr	r3, [pc, #16]	@ (801157c <SD_CheckStatus+0x38>)
 801156c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801156e:	4b03      	ldr	r3, [pc, #12]	@ (801157c <SD_CheckStatus+0x38>)
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	b2db      	uxtb	r3, r3
}
 8011574:	4618      	mov	r0, r3
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	24000019 	.word	0x24000019

08011580 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b082      	sub	sp, #8
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801158a:	f7ff ff09 	bl	80113a0 <BSP_SD_Init>
 801158e:	4603      	mov	r3, r0
 8011590:	2b00      	cmp	r3, #0
 8011592:	d107      	bne.n	80115a4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011594:	79fb      	ldrb	r3, [r7, #7]
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff ffd4 	bl	8011544 <SD_CheckStatus>
 801159c:	4603      	mov	r3, r0
 801159e:	461a      	mov	r2, r3
 80115a0:	4b04      	ldr	r3, [pc, #16]	@ (80115b4 <SD_initialize+0x34>)
 80115a2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80115a4:	4b03      	ldr	r3, [pc, #12]	@ (80115b4 <SD_initialize+0x34>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	b2db      	uxtb	r3, r3
}
 80115aa:	4618      	mov	r0, r3
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}
 80115b2:	bf00      	nop
 80115b4:	24000019 	.word	0x24000019

080115b8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b082      	sub	sp, #8
 80115bc:	af00      	add	r7, sp, #0
 80115be:	4603      	mov	r3, r0
 80115c0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80115c2:	79fb      	ldrb	r3, [r7, #7]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff ffbd 	bl	8011544 <SD_CheckStatus>
 80115ca:	4603      	mov	r3, r0
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b086      	sub	sp, #24
 80115d8:	af00      	add	r7, sp, #0
 80115da:	60b9      	str	r1, [r7, #8]
 80115dc:	607a      	str	r2, [r7, #4]
 80115de:	603b      	str	r3, [r7, #0]
 80115e0:	4603      	mov	r3, r0
 80115e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80115e4:	2301      	movs	r3, #1
 80115e6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80115e8:	f247 5030 	movw	r0, #30000	@ 0x7530
 80115ec:	f7ff ff8c 	bl	8011508 <SD_CheckStatusWithTimeout>
 80115f0:	4603      	mov	r3, r0
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	da01      	bge.n	80115fa <SD_read+0x26>
  {
    return res;
 80115f6:	7dfb      	ldrb	r3, [r7, #23]
 80115f8:	e03b      	b.n	8011672 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80115fa:	683a      	ldr	r2, [r7, #0]
 80115fc:	6879      	ldr	r1, [r7, #4]
 80115fe:	68b8      	ldr	r0, [r7, #8]
 8011600:	f7ff fef4 	bl	80113ec <BSP_SD_ReadBlocks_DMA>
 8011604:	4603      	mov	r3, r0
 8011606:	2b00      	cmp	r3, #0
 8011608:	d132      	bne.n	8011670 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801160a:	4b1c      	ldr	r3, [pc, #112]	@ (801167c <SD_read+0xa8>)
 801160c:	2200      	movs	r2, #0
 801160e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011610:	f7f1 faf2 	bl	8002bf8 <HAL_GetTick>
 8011614:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011616:	bf00      	nop
 8011618:	4b18      	ldr	r3, [pc, #96]	@ (801167c <SD_read+0xa8>)
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d108      	bne.n	8011632 <SD_read+0x5e>
 8011620:	f7f1 faea 	bl	8002bf8 <HAL_GetTick>
 8011624:	4602      	mov	r2, r0
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	1ad3      	subs	r3, r2, r3
 801162a:	f247 522f 	movw	r2, #29999	@ 0x752f
 801162e:	4293      	cmp	r3, r2
 8011630:	d9f2      	bls.n	8011618 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8011632:	4b12      	ldr	r3, [pc, #72]	@ (801167c <SD_read+0xa8>)
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d102      	bne.n	8011640 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	75fb      	strb	r3, [r7, #23]
 801163e:	e017      	b.n	8011670 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011640:	4b0e      	ldr	r3, [pc, #56]	@ (801167c <SD_read+0xa8>)
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011646:	f7f1 fad7 	bl	8002bf8 <HAL_GetTick>
 801164a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801164c:	e007      	b.n	801165e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801164e:	f7ff ff01 	bl	8011454 <BSP_SD_GetCardState>
 8011652:	4603      	mov	r3, r0
 8011654:	2b00      	cmp	r3, #0
 8011656:	d102      	bne.n	801165e <SD_read+0x8a>
          {
            res = RES_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801165c:	e008      	b.n	8011670 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801165e:	f7f1 facb 	bl	8002bf8 <HAL_GetTick>
 8011662:	4602      	mov	r2, r0
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	1ad3      	subs	r3, r2, r3
 8011668:	f247 522f 	movw	r2, #29999	@ 0x752f
 801166c:	4293      	cmp	r3, r2
 801166e:	d9ee      	bls.n	801164e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011670:	7dfb      	ldrb	r3, [r7, #23]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3718      	adds	r7, #24
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	240008ac 	.word	0x240008ac

08011680 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	60b9      	str	r1, [r7, #8]
 8011688:	607a      	str	r2, [r7, #4]
 801168a:	603b      	str	r3, [r7, #0]
 801168c:	4603      	mov	r3, r0
 801168e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011690:	2301      	movs	r3, #1
 8011692:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011694:	4b24      	ldr	r3, [pc, #144]	@ (8011728 <SD_write+0xa8>)
 8011696:	2200      	movs	r2, #0
 8011698:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801169a:	f247 5030 	movw	r0, #30000	@ 0x7530
 801169e:	f7ff ff33 	bl	8011508 <SD_CheckStatusWithTimeout>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	da01      	bge.n	80116ac <SD_write+0x2c>
  {
    return res;
 80116a8:	7dfb      	ldrb	r3, [r7, #23]
 80116aa:	e038      	b.n	801171e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80116ac:	683a      	ldr	r2, [r7, #0]
 80116ae:	6879      	ldr	r1, [r7, #4]
 80116b0:	68b8      	ldr	r0, [r7, #8]
 80116b2:	f7ff feb5 	bl	8011420 <BSP_SD_WriteBlocks_DMA>
 80116b6:	4603      	mov	r3, r0
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d12f      	bne.n	801171c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80116bc:	f7f1 fa9c 	bl	8002bf8 <HAL_GetTick>
 80116c0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80116c2:	bf00      	nop
 80116c4:	4b18      	ldr	r3, [pc, #96]	@ (8011728 <SD_write+0xa8>)
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d108      	bne.n	80116de <SD_write+0x5e>
 80116cc:	f7f1 fa94 	bl	8002bf8 <HAL_GetTick>
 80116d0:	4602      	mov	r2, r0
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80116da:	4293      	cmp	r3, r2
 80116dc:	d9f2      	bls.n	80116c4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80116de:	4b12      	ldr	r3, [pc, #72]	@ (8011728 <SD_write+0xa8>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d102      	bne.n	80116ec <SD_write+0x6c>
      {
        res = RES_ERROR;
 80116e6:	2301      	movs	r3, #1
 80116e8:	75fb      	strb	r3, [r7, #23]
 80116ea:	e017      	b.n	801171c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80116ec:	4b0e      	ldr	r3, [pc, #56]	@ (8011728 <SD_write+0xa8>)
 80116ee:	2200      	movs	r2, #0
 80116f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80116f2:	f7f1 fa81 	bl	8002bf8 <HAL_GetTick>
 80116f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80116f8:	e007      	b.n	801170a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80116fa:	f7ff feab 	bl	8011454 <BSP_SD_GetCardState>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	d102      	bne.n	801170a <SD_write+0x8a>
          {
            res = RES_OK;
 8011704:	2300      	movs	r3, #0
 8011706:	75fb      	strb	r3, [r7, #23]
            break;
 8011708:	e008      	b.n	801171c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801170a:	f7f1 fa75 	bl	8002bf8 <HAL_GetTick>
 801170e:	4602      	mov	r2, r0
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	1ad3      	subs	r3, r2, r3
 8011714:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011718:	4293      	cmp	r3, r2
 801171a:	d9ee      	bls.n	80116fa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801171c:	7dfb      	ldrb	r3, [r7, #23]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3718      	adds	r7, #24
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	240008a8 	.word	0x240008a8

0801172c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b08c      	sub	sp, #48	@ 0x30
 8011730:	af00      	add	r7, sp, #0
 8011732:	4603      	mov	r3, r0
 8011734:	603a      	str	r2, [r7, #0]
 8011736:	71fb      	strb	r3, [r7, #7]
 8011738:	460b      	mov	r3, r1
 801173a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011742:	4b25      	ldr	r3, [pc, #148]	@ (80117d8 <SD_ioctl+0xac>)
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	b2db      	uxtb	r3, r3
 8011748:	f003 0301 	and.w	r3, r3, #1
 801174c:	2b00      	cmp	r3, #0
 801174e:	d001      	beq.n	8011754 <SD_ioctl+0x28>
 8011750:	2303      	movs	r3, #3
 8011752:	e03c      	b.n	80117ce <SD_ioctl+0xa2>

  switch (cmd)
 8011754:	79bb      	ldrb	r3, [r7, #6]
 8011756:	2b03      	cmp	r3, #3
 8011758:	d834      	bhi.n	80117c4 <SD_ioctl+0x98>
 801175a:	a201      	add	r2, pc, #4	@ (adr r2, 8011760 <SD_ioctl+0x34>)
 801175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011760:	08011771 	.word	0x08011771
 8011764:	08011779 	.word	0x08011779
 8011768:	08011791 	.word	0x08011791
 801176c:	080117ab 	.word	0x080117ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011776:	e028      	b.n	80117ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011778:	f107 0308 	add.w	r3, r7, #8
 801177c:	4618      	mov	r0, r3
 801177e:	f7ff fe79 	bl	8011474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011782:	6a3a      	ldr	r2, [r7, #32]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011788:	2300      	movs	r3, #0
 801178a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801178e:	e01c      	b.n	80117ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011790:	f107 0308 	add.w	r3, r7, #8
 8011794:	4618      	mov	r0, r3
 8011796:	f7ff fe6d 	bl	8011474 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801179c:	b29a      	uxth	r2, r3
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80117a2:	2300      	movs	r3, #0
 80117a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80117a8:	e00f      	b.n	80117ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80117aa:	f107 0308 	add.w	r3, r7, #8
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7ff fe60 	bl	8011474 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80117b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117b6:	0a5a      	lsrs	r2, r3, #9
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80117bc:	2300      	movs	r3, #0
 80117be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80117c2:	e002      	b.n	80117ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80117c4:	2304      	movs	r3, #4
 80117c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80117ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3730      	adds	r7, #48	@ 0x30
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	24000019 	.word	0x24000019

080117dc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80117dc:	b480      	push	{r7}
 80117de:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80117e0:	4b03      	ldr	r3, [pc, #12]	@ (80117f0 <BSP_SD_WriteCpltCallback+0x14>)
 80117e2:	2201      	movs	r2, #1
 80117e4:	601a      	str	r2, [r3, #0]
}
 80117e6:	bf00      	nop
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr
 80117f0:	240008a8 	.word	0x240008a8

080117f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80117f4:	b480      	push	{r7}
 80117f6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80117f8:	4b03      	ldr	r3, [pc, #12]	@ (8011808 <BSP_SD_ReadCpltCallback+0x14>)
 80117fa:	2201      	movs	r2, #1
 80117fc:	601a      	str	r2, [r3, #0]
}
 80117fe:	bf00      	nop
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr
 8011808:	240008ac 	.word	0x240008ac

0801180c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801180c:	b480      	push	{r7}
 801180e:	b087      	sub	sp, #28
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	4613      	mov	r3, r2
 8011818:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801181a:	2301      	movs	r3, #1
 801181c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011822:	4b1f      	ldr	r3, [pc, #124]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 8011824:	7a5b      	ldrb	r3, [r3, #9]
 8011826:	b2db      	uxtb	r3, r3
 8011828:	2b00      	cmp	r3, #0
 801182a:	d131      	bne.n	8011890 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801182c:	4b1c      	ldr	r3, [pc, #112]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 801182e:	7a5b      	ldrb	r3, [r3, #9]
 8011830:	b2db      	uxtb	r3, r3
 8011832:	461a      	mov	r2, r3
 8011834:	4b1a      	ldr	r3, [pc, #104]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 8011836:	2100      	movs	r1, #0
 8011838:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801183a:	4b19      	ldr	r3, [pc, #100]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 801183c:	7a5b      	ldrb	r3, [r3, #9]
 801183e:	b2db      	uxtb	r3, r3
 8011840:	4a17      	ldr	r2, [pc, #92]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4413      	add	r3, r2
 8011846:	68fa      	ldr	r2, [r7, #12]
 8011848:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801184a:	4b15      	ldr	r3, [pc, #84]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 801184c:	7a5b      	ldrb	r3, [r3, #9]
 801184e:	b2db      	uxtb	r3, r3
 8011850:	461a      	mov	r2, r3
 8011852:	4b13      	ldr	r3, [pc, #76]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 8011854:	4413      	add	r3, r2
 8011856:	79fa      	ldrb	r2, [r7, #7]
 8011858:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801185a:	4b11      	ldr	r3, [pc, #68]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 801185c:	7a5b      	ldrb	r3, [r3, #9]
 801185e:	b2db      	uxtb	r3, r3
 8011860:	1c5a      	adds	r2, r3, #1
 8011862:	b2d1      	uxtb	r1, r2
 8011864:	4a0e      	ldr	r2, [pc, #56]	@ (80118a0 <FATFS_LinkDriverEx+0x94>)
 8011866:	7251      	strb	r1, [r2, #9]
 8011868:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801186a:	7dbb      	ldrb	r3, [r7, #22]
 801186c:	3330      	adds	r3, #48	@ 0x30
 801186e:	b2da      	uxtb	r2, r3
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	3301      	adds	r3, #1
 8011878:	223a      	movs	r2, #58	@ 0x3a
 801187a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	3302      	adds	r3, #2
 8011880:	222f      	movs	r2, #47	@ 0x2f
 8011882:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	3303      	adds	r3, #3
 8011888:	2200      	movs	r2, #0
 801188a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801188c:	2300      	movs	r3, #0
 801188e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011890:	7dfb      	ldrb	r3, [r7, #23]
}
 8011892:	4618      	mov	r0, r3
 8011894:	371c      	adds	r7, #28
 8011896:	46bd      	mov	sp, r7
 8011898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189c:	4770      	bx	lr
 801189e:	bf00      	nop
 80118a0:	240008b0 	.word	0x240008b0

080118a4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	b082      	sub	sp, #8
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
 80118ac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118ae:	2200      	movs	r2, #0
 80118b0:	6839      	ldr	r1, [r7, #0]
 80118b2:	6878      	ldr	r0, [r7, #4]
 80118b4:	f7ff ffaa 	bl	801180c <FATFS_LinkDriverEx>
 80118b8:	4603      	mov	r3, r0
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3708      	adds	r7, #8
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
	...

080118c4 <siprintf>:
 80118c4:	b40e      	push	{r1, r2, r3}
 80118c6:	b510      	push	{r4, lr}
 80118c8:	b09d      	sub	sp, #116	@ 0x74
 80118ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80118cc:	9002      	str	r0, [sp, #8]
 80118ce:	9006      	str	r0, [sp, #24]
 80118d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80118d4:	480a      	ldr	r0, [pc, #40]	@ (8011900 <siprintf+0x3c>)
 80118d6:	9107      	str	r1, [sp, #28]
 80118d8:	9104      	str	r1, [sp, #16]
 80118da:	490a      	ldr	r1, [pc, #40]	@ (8011904 <siprintf+0x40>)
 80118dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80118e0:	9105      	str	r1, [sp, #20]
 80118e2:	2400      	movs	r4, #0
 80118e4:	a902      	add	r1, sp, #8
 80118e6:	6800      	ldr	r0, [r0, #0]
 80118e8:	9301      	str	r3, [sp, #4]
 80118ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80118ec:	f000 f9a2 	bl	8011c34 <_svfiprintf_r>
 80118f0:	9b02      	ldr	r3, [sp, #8]
 80118f2:	701c      	strb	r4, [r3, #0]
 80118f4:	b01d      	add	sp, #116	@ 0x74
 80118f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80118fa:	b003      	add	sp, #12
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	2400001c 	.word	0x2400001c
 8011904:	ffff0208 	.word	0xffff0208

08011908 <memset>:
 8011908:	4402      	add	r2, r0
 801190a:	4603      	mov	r3, r0
 801190c:	4293      	cmp	r3, r2
 801190e:	d100      	bne.n	8011912 <memset+0xa>
 8011910:	4770      	bx	lr
 8011912:	f803 1b01 	strb.w	r1, [r3], #1
 8011916:	e7f9      	b.n	801190c <memset+0x4>

08011918 <__errno>:
 8011918:	4b01      	ldr	r3, [pc, #4]	@ (8011920 <__errno+0x8>)
 801191a:	6818      	ldr	r0, [r3, #0]
 801191c:	4770      	bx	lr
 801191e:	bf00      	nop
 8011920:	2400001c 	.word	0x2400001c

08011924 <__libc_init_array>:
 8011924:	b570      	push	{r4, r5, r6, lr}
 8011926:	4d0d      	ldr	r5, [pc, #52]	@ (801195c <__libc_init_array+0x38>)
 8011928:	4c0d      	ldr	r4, [pc, #52]	@ (8011960 <__libc_init_array+0x3c>)
 801192a:	1b64      	subs	r4, r4, r5
 801192c:	10a4      	asrs	r4, r4, #2
 801192e:	2600      	movs	r6, #0
 8011930:	42a6      	cmp	r6, r4
 8011932:	d109      	bne.n	8011948 <__libc_init_array+0x24>
 8011934:	4d0b      	ldr	r5, [pc, #44]	@ (8011964 <__libc_init_array+0x40>)
 8011936:	4c0c      	ldr	r4, [pc, #48]	@ (8011968 <__libc_init_array+0x44>)
 8011938:	f000 fc64 	bl	8012204 <_init>
 801193c:	1b64      	subs	r4, r4, r5
 801193e:	10a4      	asrs	r4, r4, #2
 8011940:	2600      	movs	r6, #0
 8011942:	42a6      	cmp	r6, r4
 8011944:	d105      	bne.n	8011952 <__libc_init_array+0x2e>
 8011946:	bd70      	pop	{r4, r5, r6, pc}
 8011948:	f855 3b04 	ldr.w	r3, [r5], #4
 801194c:	4798      	blx	r3
 801194e:	3601      	adds	r6, #1
 8011950:	e7ee      	b.n	8011930 <__libc_init_array+0xc>
 8011952:	f855 3b04 	ldr.w	r3, [r5], #4
 8011956:	4798      	blx	r3
 8011958:	3601      	adds	r6, #1
 801195a:	e7f2      	b.n	8011942 <__libc_init_array+0x1e>
 801195c:	080125a0 	.word	0x080125a0
 8011960:	080125a0 	.word	0x080125a0
 8011964:	080125a0 	.word	0x080125a0
 8011968:	080125a4 	.word	0x080125a4

0801196c <__retarget_lock_acquire_recursive>:
 801196c:	4770      	bx	lr

0801196e <__retarget_lock_release_recursive>:
 801196e:	4770      	bx	lr

08011970 <memcpy>:
 8011970:	440a      	add	r2, r1
 8011972:	4291      	cmp	r1, r2
 8011974:	f100 33ff 	add.w	r3, r0, #4294967295
 8011978:	d100      	bne.n	801197c <memcpy+0xc>
 801197a:	4770      	bx	lr
 801197c:	b510      	push	{r4, lr}
 801197e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011982:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011986:	4291      	cmp	r1, r2
 8011988:	d1f9      	bne.n	801197e <memcpy+0xe>
 801198a:	bd10      	pop	{r4, pc}

0801198c <_free_r>:
 801198c:	b538      	push	{r3, r4, r5, lr}
 801198e:	4605      	mov	r5, r0
 8011990:	2900      	cmp	r1, #0
 8011992:	d041      	beq.n	8011a18 <_free_r+0x8c>
 8011994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011998:	1f0c      	subs	r4, r1, #4
 801199a:	2b00      	cmp	r3, #0
 801199c:	bfb8      	it	lt
 801199e:	18e4      	addlt	r4, r4, r3
 80119a0:	f000 f8e0 	bl	8011b64 <__malloc_lock>
 80119a4:	4a1d      	ldr	r2, [pc, #116]	@ (8011a1c <_free_r+0x90>)
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	b933      	cbnz	r3, 80119b8 <_free_r+0x2c>
 80119aa:	6063      	str	r3, [r4, #4]
 80119ac:	6014      	str	r4, [r2, #0]
 80119ae:	4628      	mov	r0, r5
 80119b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119b4:	f000 b8dc 	b.w	8011b70 <__malloc_unlock>
 80119b8:	42a3      	cmp	r3, r4
 80119ba:	d908      	bls.n	80119ce <_free_r+0x42>
 80119bc:	6820      	ldr	r0, [r4, #0]
 80119be:	1821      	adds	r1, r4, r0
 80119c0:	428b      	cmp	r3, r1
 80119c2:	bf01      	itttt	eq
 80119c4:	6819      	ldreq	r1, [r3, #0]
 80119c6:	685b      	ldreq	r3, [r3, #4]
 80119c8:	1809      	addeq	r1, r1, r0
 80119ca:	6021      	streq	r1, [r4, #0]
 80119cc:	e7ed      	b.n	80119aa <_free_r+0x1e>
 80119ce:	461a      	mov	r2, r3
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	b10b      	cbz	r3, 80119d8 <_free_r+0x4c>
 80119d4:	42a3      	cmp	r3, r4
 80119d6:	d9fa      	bls.n	80119ce <_free_r+0x42>
 80119d8:	6811      	ldr	r1, [r2, #0]
 80119da:	1850      	adds	r0, r2, r1
 80119dc:	42a0      	cmp	r0, r4
 80119de:	d10b      	bne.n	80119f8 <_free_r+0x6c>
 80119e0:	6820      	ldr	r0, [r4, #0]
 80119e2:	4401      	add	r1, r0
 80119e4:	1850      	adds	r0, r2, r1
 80119e6:	4283      	cmp	r3, r0
 80119e8:	6011      	str	r1, [r2, #0]
 80119ea:	d1e0      	bne.n	80119ae <_free_r+0x22>
 80119ec:	6818      	ldr	r0, [r3, #0]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	6053      	str	r3, [r2, #4]
 80119f2:	4408      	add	r0, r1
 80119f4:	6010      	str	r0, [r2, #0]
 80119f6:	e7da      	b.n	80119ae <_free_r+0x22>
 80119f8:	d902      	bls.n	8011a00 <_free_r+0x74>
 80119fa:	230c      	movs	r3, #12
 80119fc:	602b      	str	r3, [r5, #0]
 80119fe:	e7d6      	b.n	80119ae <_free_r+0x22>
 8011a00:	6820      	ldr	r0, [r4, #0]
 8011a02:	1821      	adds	r1, r4, r0
 8011a04:	428b      	cmp	r3, r1
 8011a06:	bf04      	itt	eq
 8011a08:	6819      	ldreq	r1, [r3, #0]
 8011a0a:	685b      	ldreq	r3, [r3, #4]
 8011a0c:	6063      	str	r3, [r4, #4]
 8011a0e:	bf04      	itt	eq
 8011a10:	1809      	addeq	r1, r1, r0
 8011a12:	6021      	streq	r1, [r4, #0]
 8011a14:	6054      	str	r4, [r2, #4]
 8011a16:	e7ca      	b.n	80119ae <_free_r+0x22>
 8011a18:	bd38      	pop	{r3, r4, r5, pc}
 8011a1a:	bf00      	nop
 8011a1c:	24000a00 	.word	0x24000a00

08011a20 <sbrk_aligned>:
 8011a20:	b570      	push	{r4, r5, r6, lr}
 8011a22:	4e0f      	ldr	r6, [pc, #60]	@ (8011a60 <sbrk_aligned+0x40>)
 8011a24:	460c      	mov	r4, r1
 8011a26:	6831      	ldr	r1, [r6, #0]
 8011a28:	4605      	mov	r5, r0
 8011a2a:	b911      	cbnz	r1, 8011a32 <sbrk_aligned+0x12>
 8011a2c:	f000 fba4 	bl	8012178 <_sbrk_r>
 8011a30:	6030      	str	r0, [r6, #0]
 8011a32:	4621      	mov	r1, r4
 8011a34:	4628      	mov	r0, r5
 8011a36:	f000 fb9f 	bl	8012178 <_sbrk_r>
 8011a3a:	1c43      	adds	r3, r0, #1
 8011a3c:	d103      	bne.n	8011a46 <sbrk_aligned+0x26>
 8011a3e:	f04f 34ff 	mov.w	r4, #4294967295
 8011a42:	4620      	mov	r0, r4
 8011a44:	bd70      	pop	{r4, r5, r6, pc}
 8011a46:	1cc4      	adds	r4, r0, #3
 8011a48:	f024 0403 	bic.w	r4, r4, #3
 8011a4c:	42a0      	cmp	r0, r4
 8011a4e:	d0f8      	beq.n	8011a42 <sbrk_aligned+0x22>
 8011a50:	1a21      	subs	r1, r4, r0
 8011a52:	4628      	mov	r0, r5
 8011a54:	f000 fb90 	bl	8012178 <_sbrk_r>
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d1f2      	bne.n	8011a42 <sbrk_aligned+0x22>
 8011a5c:	e7ef      	b.n	8011a3e <sbrk_aligned+0x1e>
 8011a5e:	bf00      	nop
 8011a60:	240009fc 	.word	0x240009fc

08011a64 <_malloc_r>:
 8011a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a68:	1ccd      	adds	r5, r1, #3
 8011a6a:	f025 0503 	bic.w	r5, r5, #3
 8011a6e:	3508      	adds	r5, #8
 8011a70:	2d0c      	cmp	r5, #12
 8011a72:	bf38      	it	cc
 8011a74:	250c      	movcc	r5, #12
 8011a76:	2d00      	cmp	r5, #0
 8011a78:	4606      	mov	r6, r0
 8011a7a:	db01      	blt.n	8011a80 <_malloc_r+0x1c>
 8011a7c:	42a9      	cmp	r1, r5
 8011a7e:	d904      	bls.n	8011a8a <_malloc_r+0x26>
 8011a80:	230c      	movs	r3, #12
 8011a82:	6033      	str	r3, [r6, #0]
 8011a84:	2000      	movs	r0, #0
 8011a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b60 <_malloc_r+0xfc>
 8011a8e:	f000 f869 	bl	8011b64 <__malloc_lock>
 8011a92:	f8d8 3000 	ldr.w	r3, [r8]
 8011a96:	461c      	mov	r4, r3
 8011a98:	bb44      	cbnz	r4, 8011aec <_malloc_r+0x88>
 8011a9a:	4629      	mov	r1, r5
 8011a9c:	4630      	mov	r0, r6
 8011a9e:	f7ff ffbf 	bl	8011a20 <sbrk_aligned>
 8011aa2:	1c43      	adds	r3, r0, #1
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	d158      	bne.n	8011b5a <_malloc_r+0xf6>
 8011aa8:	f8d8 4000 	ldr.w	r4, [r8]
 8011aac:	4627      	mov	r7, r4
 8011aae:	2f00      	cmp	r7, #0
 8011ab0:	d143      	bne.n	8011b3a <_malloc_r+0xd6>
 8011ab2:	2c00      	cmp	r4, #0
 8011ab4:	d04b      	beq.n	8011b4e <_malloc_r+0xea>
 8011ab6:	6823      	ldr	r3, [r4, #0]
 8011ab8:	4639      	mov	r1, r7
 8011aba:	4630      	mov	r0, r6
 8011abc:	eb04 0903 	add.w	r9, r4, r3
 8011ac0:	f000 fb5a 	bl	8012178 <_sbrk_r>
 8011ac4:	4581      	cmp	r9, r0
 8011ac6:	d142      	bne.n	8011b4e <_malloc_r+0xea>
 8011ac8:	6821      	ldr	r1, [r4, #0]
 8011aca:	1a6d      	subs	r5, r5, r1
 8011acc:	4629      	mov	r1, r5
 8011ace:	4630      	mov	r0, r6
 8011ad0:	f7ff ffa6 	bl	8011a20 <sbrk_aligned>
 8011ad4:	3001      	adds	r0, #1
 8011ad6:	d03a      	beq.n	8011b4e <_malloc_r+0xea>
 8011ad8:	6823      	ldr	r3, [r4, #0]
 8011ada:	442b      	add	r3, r5
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	f8d8 3000 	ldr.w	r3, [r8]
 8011ae2:	685a      	ldr	r2, [r3, #4]
 8011ae4:	bb62      	cbnz	r2, 8011b40 <_malloc_r+0xdc>
 8011ae6:	f8c8 7000 	str.w	r7, [r8]
 8011aea:	e00f      	b.n	8011b0c <_malloc_r+0xa8>
 8011aec:	6822      	ldr	r2, [r4, #0]
 8011aee:	1b52      	subs	r2, r2, r5
 8011af0:	d420      	bmi.n	8011b34 <_malloc_r+0xd0>
 8011af2:	2a0b      	cmp	r2, #11
 8011af4:	d917      	bls.n	8011b26 <_malloc_r+0xc2>
 8011af6:	1961      	adds	r1, r4, r5
 8011af8:	42a3      	cmp	r3, r4
 8011afa:	6025      	str	r5, [r4, #0]
 8011afc:	bf18      	it	ne
 8011afe:	6059      	strne	r1, [r3, #4]
 8011b00:	6863      	ldr	r3, [r4, #4]
 8011b02:	bf08      	it	eq
 8011b04:	f8c8 1000 	streq.w	r1, [r8]
 8011b08:	5162      	str	r2, [r4, r5]
 8011b0a:	604b      	str	r3, [r1, #4]
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	f000 f82f 	bl	8011b70 <__malloc_unlock>
 8011b12:	f104 000b 	add.w	r0, r4, #11
 8011b16:	1d23      	adds	r3, r4, #4
 8011b18:	f020 0007 	bic.w	r0, r0, #7
 8011b1c:	1ac2      	subs	r2, r0, r3
 8011b1e:	bf1c      	itt	ne
 8011b20:	1a1b      	subne	r3, r3, r0
 8011b22:	50a3      	strne	r3, [r4, r2]
 8011b24:	e7af      	b.n	8011a86 <_malloc_r+0x22>
 8011b26:	6862      	ldr	r2, [r4, #4]
 8011b28:	42a3      	cmp	r3, r4
 8011b2a:	bf0c      	ite	eq
 8011b2c:	f8c8 2000 	streq.w	r2, [r8]
 8011b30:	605a      	strne	r2, [r3, #4]
 8011b32:	e7eb      	b.n	8011b0c <_malloc_r+0xa8>
 8011b34:	4623      	mov	r3, r4
 8011b36:	6864      	ldr	r4, [r4, #4]
 8011b38:	e7ae      	b.n	8011a98 <_malloc_r+0x34>
 8011b3a:	463c      	mov	r4, r7
 8011b3c:	687f      	ldr	r7, [r7, #4]
 8011b3e:	e7b6      	b.n	8011aae <_malloc_r+0x4a>
 8011b40:	461a      	mov	r2, r3
 8011b42:	685b      	ldr	r3, [r3, #4]
 8011b44:	42a3      	cmp	r3, r4
 8011b46:	d1fb      	bne.n	8011b40 <_malloc_r+0xdc>
 8011b48:	2300      	movs	r3, #0
 8011b4a:	6053      	str	r3, [r2, #4]
 8011b4c:	e7de      	b.n	8011b0c <_malloc_r+0xa8>
 8011b4e:	230c      	movs	r3, #12
 8011b50:	6033      	str	r3, [r6, #0]
 8011b52:	4630      	mov	r0, r6
 8011b54:	f000 f80c 	bl	8011b70 <__malloc_unlock>
 8011b58:	e794      	b.n	8011a84 <_malloc_r+0x20>
 8011b5a:	6005      	str	r5, [r0, #0]
 8011b5c:	e7d6      	b.n	8011b0c <_malloc_r+0xa8>
 8011b5e:	bf00      	nop
 8011b60:	24000a00 	.word	0x24000a00

08011b64 <__malloc_lock>:
 8011b64:	4801      	ldr	r0, [pc, #4]	@ (8011b6c <__malloc_lock+0x8>)
 8011b66:	f7ff bf01 	b.w	801196c <__retarget_lock_acquire_recursive>
 8011b6a:	bf00      	nop
 8011b6c:	240009f8 	.word	0x240009f8

08011b70 <__malloc_unlock>:
 8011b70:	4801      	ldr	r0, [pc, #4]	@ (8011b78 <__malloc_unlock+0x8>)
 8011b72:	f7ff befc 	b.w	801196e <__retarget_lock_release_recursive>
 8011b76:	bf00      	nop
 8011b78:	240009f8 	.word	0x240009f8

08011b7c <__ssputs_r>:
 8011b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b80:	688e      	ldr	r6, [r1, #8]
 8011b82:	461f      	mov	r7, r3
 8011b84:	42be      	cmp	r6, r7
 8011b86:	680b      	ldr	r3, [r1, #0]
 8011b88:	4682      	mov	sl, r0
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	4690      	mov	r8, r2
 8011b8e:	d82d      	bhi.n	8011bec <__ssputs_r+0x70>
 8011b90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011b94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011b98:	d026      	beq.n	8011be8 <__ssputs_r+0x6c>
 8011b9a:	6965      	ldr	r5, [r4, #20]
 8011b9c:	6909      	ldr	r1, [r1, #16]
 8011b9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011ba2:	eba3 0901 	sub.w	r9, r3, r1
 8011ba6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011baa:	1c7b      	adds	r3, r7, #1
 8011bac:	444b      	add	r3, r9
 8011bae:	106d      	asrs	r5, r5, #1
 8011bb0:	429d      	cmp	r5, r3
 8011bb2:	bf38      	it	cc
 8011bb4:	461d      	movcc	r5, r3
 8011bb6:	0553      	lsls	r3, r2, #21
 8011bb8:	d527      	bpl.n	8011c0a <__ssputs_r+0x8e>
 8011bba:	4629      	mov	r1, r5
 8011bbc:	f7ff ff52 	bl	8011a64 <_malloc_r>
 8011bc0:	4606      	mov	r6, r0
 8011bc2:	b360      	cbz	r0, 8011c1e <__ssputs_r+0xa2>
 8011bc4:	6921      	ldr	r1, [r4, #16]
 8011bc6:	464a      	mov	r2, r9
 8011bc8:	f7ff fed2 	bl	8011970 <memcpy>
 8011bcc:	89a3      	ldrh	r3, [r4, #12]
 8011bce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bd6:	81a3      	strh	r3, [r4, #12]
 8011bd8:	6126      	str	r6, [r4, #16]
 8011bda:	6165      	str	r5, [r4, #20]
 8011bdc:	444e      	add	r6, r9
 8011bde:	eba5 0509 	sub.w	r5, r5, r9
 8011be2:	6026      	str	r6, [r4, #0]
 8011be4:	60a5      	str	r5, [r4, #8]
 8011be6:	463e      	mov	r6, r7
 8011be8:	42be      	cmp	r6, r7
 8011bea:	d900      	bls.n	8011bee <__ssputs_r+0x72>
 8011bec:	463e      	mov	r6, r7
 8011bee:	6820      	ldr	r0, [r4, #0]
 8011bf0:	4632      	mov	r2, r6
 8011bf2:	4641      	mov	r1, r8
 8011bf4:	f000 faa6 	bl	8012144 <memmove>
 8011bf8:	68a3      	ldr	r3, [r4, #8]
 8011bfa:	1b9b      	subs	r3, r3, r6
 8011bfc:	60a3      	str	r3, [r4, #8]
 8011bfe:	6823      	ldr	r3, [r4, #0]
 8011c00:	4433      	add	r3, r6
 8011c02:	6023      	str	r3, [r4, #0]
 8011c04:	2000      	movs	r0, #0
 8011c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c0a:	462a      	mov	r2, r5
 8011c0c:	f000 fac4 	bl	8012198 <_realloc_r>
 8011c10:	4606      	mov	r6, r0
 8011c12:	2800      	cmp	r0, #0
 8011c14:	d1e0      	bne.n	8011bd8 <__ssputs_r+0x5c>
 8011c16:	6921      	ldr	r1, [r4, #16]
 8011c18:	4650      	mov	r0, sl
 8011c1a:	f7ff feb7 	bl	801198c <_free_r>
 8011c1e:	230c      	movs	r3, #12
 8011c20:	f8ca 3000 	str.w	r3, [sl]
 8011c24:	89a3      	ldrh	r3, [r4, #12]
 8011c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c2a:	81a3      	strh	r3, [r4, #12]
 8011c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c30:	e7e9      	b.n	8011c06 <__ssputs_r+0x8a>
	...

08011c34 <_svfiprintf_r>:
 8011c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c38:	4698      	mov	r8, r3
 8011c3a:	898b      	ldrh	r3, [r1, #12]
 8011c3c:	061b      	lsls	r3, r3, #24
 8011c3e:	b09d      	sub	sp, #116	@ 0x74
 8011c40:	4607      	mov	r7, r0
 8011c42:	460d      	mov	r5, r1
 8011c44:	4614      	mov	r4, r2
 8011c46:	d510      	bpl.n	8011c6a <_svfiprintf_r+0x36>
 8011c48:	690b      	ldr	r3, [r1, #16]
 8011c4a:	b973      	cbnz	r3, 8011c6a <_svfiprintf_r+0x36>
 8011c4c:	2140      	movs	r1, #64	@ 0x40
 8011c4e:	f7ff ff09 	bl	8011a64 <_malloc_r>
 8011c52:	6028      	str	r0, [r5, #0]
 8011c54:	6128      	str	r0, [r5, #16]
 8011c56:	b930      	cbnz	r0, 8011c66 <_svfiprintf_r+0x32>
 8011c58:	230c      	movs	r3, #12
 8011c5a:	603b      	str	r3, [r7, #0]
 8011c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8011c60:	b01d      	add	sp, #116	@ 0x74
 8011c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c66:	2340      	movs	r3, #64	@ 0x40
 8011c68:	616b      	str	r3, [r5, #20]
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c6e:	2320      	movs	r3, #32
 8011c70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011c74:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c78:	2330      	movs	r3, #48	@ 0x30
 8011c7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e18 <_svfiprintf_r+0x1e4>
 8011c7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011c82:	f04f 0901 	mov.w	r9, #1
 8011c86:	4623      	mov	r3, r4
 8011c88:	469a      	mov	sl, r3
 8011c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c8e:	b10a      	cbz	r2, 8011c94 <_svfiprintf_r+0x60>
 8011c90:	2a25      	cmp	r2, #37	@ 0x25
 8011c92:	d1f9      	bne.n	8011c88 <_svfiprintf_r+0x54>
 8011c94:	ebba 0b04 	subs.w	fp, sl, r4
 8011c98:	d00b      	beq.n	8011cb2 <_svfiprintf_r+0x7e>
 8011c9a:	465b      	mov	r3, fp
 8011c9c:	4622      	mov	r2, r4
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	4638      	mov	r0, r7
 8011ca2:	f7ff ff6b 	bl	8011b7c <__ssputs_r>
 8011ca6:	3001      	adds	r0, #1
 8011ca8:	f000 80a7 	beq.w	8011dfa <_svfiprintf_r+0x1c6>
 8011cac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011cae:	445a      	add	r2, fp
 8011cb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 809f 	beq.w	8011dfa <_svfiprintf_r+0x1c6>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cc6:	f10a 0a01 	add.w	sl, sl, #1
 8011cca:	9304      	str	r3, [sp, #16]
 8011ccc:	9307      	str	r3, [sp, #28]
 8011cce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011cd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8011cd4:	4654      	mov	r4, sl
 8011cd6:	2205      	movs	r2, #5
 8011cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cdc:	484e      	ldr	r0, [pc, #312]	@ (8011e18 <_svfiprintf_r+0x1e4>)
 8011cde:	f7ee fb1f 	bl	8000320 <memchr>
 8011ce2:	9a04      	ldr	r2, [sp, #16]
 8011ce4:	b9d8      	cbnz	r0, 8011d1e <_svfiprintf_r+0xea>
 8011ce6:	06d0      	lsls	r0, r2, #27
 8011ce8:	bf44      	itt	mi
 8011cea:	2320      	movmi	r3, #32
 8011cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cf0:	0711      	lsls	r1, r2, #28
 8011cf2:	bf44      	itt	mi
 8011cf4:	232b      	movmi	r3, #43	@ 0x2b
 8011cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8011cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d00:	d015      	beq.n	8011d2e <_svfiprintf_r+0xfa>
 8011d02:	9a07      	ldr	r2, [sp, #28]
 8011d04:	4654      	mov	r4, sl
 8011d06:	2000      	movs	r0, #0
 8011d08:	f04f 0c0a 	mov.w	ip, #10
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d12:	3b30      	subs	r3, #48	@ 0x30
 8011d14:	2b09      	cmp	r3, #9
 8011d16:	d94b      	bls.n	8011db0 <_svfiprintf_r+0x17c>
 8011d18:	b1b0      	cbz	r0, 8011d48 <_svfiprintf_r+0x114>
 8011d1a:	9207      	str	r2, [sp, #28]
 8011d1c:	e014      	b.n	8011d48 <_svfiprintf_r+0x114>
 8011d1e:	eba0 0308 	sub.w	r3, r0, r8
 8011d22:	fa09 f303 	lsl.w	r3, r9, r3
 8011d26:	4313      	orrs	r3, r2
 8011d28:	9304      	str	r3, [sp, #16]
 8011d2a:	46a2      	mov	sl, r4
 8011d2c:	e7d2      	b.n	8011cd4 <_svfiprintf_r+0xa0>
 8011d2e:	9b03      	ldr	r3, [sp, #12]
 8011d30:	1d19      	adds	r1, r3, #4
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	9103      	str	r1, [sp, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	bfbb      	ittet	lt
 8011d3a:	425b      	neglt	r3, r3
 8011d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8011d40:	9307      	strge	r3, [sp, #28]
 8011d42:	9307      	strlt	r3, [sp, #28]
 8011d44:	bfb8      	it	lt
 8011d46:	9204      	strlt	r2, [sp, #16]
 8011d48:	7823      	ldrb	r3, [r4, #0]
 8011d4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d4c:	d10a      	bne.n	8011d64 <_svfiprintf_r+0x130>
 8011d4e:	7863      	ldrb	r3, [r4, #1]
 8011d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d52:	d132      	bne.n	8011dba <_svfiprintf_r+0x186>
 8011d54:	9b03      	ldr	r3, [sp, #12]
 8011d56:	1d1a      	adds	r2, r3, #4
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	9203      	str	r2, [sp, #12]
 8011d5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d60:	3402      	adds	r4, #2
 8011d62:	9305      	str	r3, [sp, #20]
 8011d64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e28 <_svfiprintf_r+0x1f4>
 8011d68:	7821      	ldrb	r1, [r4, #0]
 8011d6a:	2203      	movs	r2, #3
 8011d6c:	4650      	mov	r0, sl
 8011d6e:	f7ee fad7 	bl	8000320 <memchr>
 8011d72:	b138      	cbz	r0, 8011d84 <_svfiprintf_r+0x150>
 8011d74:	9b04      	ldr	r3, [sp, #16]
 8011d76:	eba0 000a 	sub.w	r0, r0, sl
 8011d7a:	2240      	movs	r2, #64	@ 0x40
 8011d7c:	4082      	lsls	r2, r0
 8011d7e:	4313      	orrs	r3, r2
 8011d80:	3401      	adds	r4, #1
 8011d82:	9304      	str	r3, [sp, #16]
 8011d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d88:	4824      	ldr	r0, [pc, #144]	@ (8011e1c <_svfiprintf_r+0x1e8>)
 8011d8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011d8e:	2206      	movs	r2, #6
 8011d90:	f7ee fac6 	bl	8000320 <memchr>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d036      	beq.n	8011e06 <_svfiprintf_r+0x1d2>
 8011d98:	4b21      	ldr	r3, [pc, #132]	@ (8011e20 <_svfiprintf_r+0x1ec>)
 8011d9a:	bb1b      	cbnz	r3, 8011de4 <_svfiprintf_r+0x1b0>
 8011d9c:	9b03      	ldr	r3, [sp, #12]
 8011d9e:	3307      	adds	r3, #7
 8011da0:	f023 0307 	bic.w	r3, r3, #7
 8011da4:	3308      	adds	r3, #8
 8011da6:	9303      	str	r3, [sp, #12]
 8011da8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011daa:	4433      	add	r3, r6
 8011dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8011dae:	e76a      	b.n	8011c86 <_svfiprintf_r+0x52>
 8011db0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011db4:	460c      	mov	r4, r1
 8011db6:	2001      	movs	r0, #1
 8011db8:	e7a8      	b.n	8011d0c <_svfiprintf_r+0xd8>
 8011dba:	2300      	movs	r3, #0
 8011dbc:	3401      	adds	r4, #1
 8011dbe:	9305      	str	r3, [sp, #20]
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	f04f 0c0a 	mov.w	ip, #10
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011dcc:	3a30      	subs	r2, #48	@ 0x30
 8011dce:	2a09      	cmp	r2, #9
 8011dd0:	d903      	bls.n	8011dda <_svfiprintf_r+0x1a6>
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d0c6      	beq.n	8011d64 <_svfiprintf_r+0x130>
 8011dd6:	9105      	str	r1, [sp, #20]
 8011dd8:	e7c4      	b.n	8011d64 <_svfiprintf_r+0x130>
 8011dda:	fb0c 2101 	mla	r1, ip, r1, r2
 8011dde:	4604      	mov	r4, r0
 8011de0:	2301      	movs	r3, #1
 8011de2:	e7f0      	b.n	8011dc6 <_svfiprintf_r+0x192>
 8011de4:	ab03      	add	r3, sp, #12
 8011de6:	9300      	str	r3, [sp, #0]
 8011de8:	462a      	mov	r2, r5
 8011dea:	4b0e      	ldr	r3, [pc, #56]	@ (8011e24 <_svfiprintf_r+0x1f0>)
 8011dec:	a904      	add	r1, sp, #16
 8011dee:	4638      	mov	r0, r7
 8011df0:	f3af 8000 	nop.w
 8011df4:	1c42      	adds	r2, r0, #1
 8011df6:	4606      	mov	r6, r0
 8011df8:	d1d6      	bne.n	8011da8 <_svfiprintf_r+0x174>
 8011dfa:	89ab      	ldrh	r3, [r5, #12]
 8011dfc:	065b      	lsls	r3, r3, #25
 8011dfe:	f53f af2d 	bmi.w	8011c5c <_svfiprintf_r+0x28>
 8011e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e04:	e72c      	b.n	8011c60 <_svfiprintf_r+0x2c>
 8011e06:	ab03      	add	r3, sp, #12
 8011e08:	9300      	str	r3, [sp, #0]
 8011e0a:	462a      	mov	r2, r5
 8011e0c:	4b05      	ldr	r3, [pc, #20]	@ (8011e24 <_svfiprintf_r+0x1f0>)
 8011e0e:	a904      	add	r1, sp, #16
 8011e10:	4638      	mov	r0, r7
 8011e12:	f000 f879 	bl	8011f08 <_printf_i>
 8011e16:	e7ed      	b.n	8011df4 <_svfiprintf_r+0x1c0>
 8011e18:	08012564 	.word	0x08012564
 8011e1c:	0801256e 	.word	0x0801256e
 8011e20:	00000000 	.word	0x00000000
 8011e24:	08011b7d 	.word	0x08011b7d
 8011e28:	0801256a 	.word	0x0801256a

08011e2c <_printf_common>:
 8011e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e30:	4616      	mov	r6, r2
 8011e32:	4698      	mov	r8, r3
 8011e34:	688a      	ldr	r2, [r1, #8]
 8011e36:	690b      	ldr	r3, [r1, #16]
 8011e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	bfb8      	it	lt
 8011e40:	4613      	movlt	r3, r2
 8011e42:	6033      	str	r3, [r6, #0]
 8011e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011e48:	4607      	mov	r7, r0
 8011e4a:	460c      	mov	r4, r1
 8011e4c:	b10a      	cbz	r2, 8011e52 <_printf_common+0x26>
 8011e4e:	3301      	adds	r3, #1
 8011e50:	6033      	str	r3, [r6, #0]
 8011e52:	6823      	ldr	r3, [r4, #0]
 8011e54:	0699      	lsls	r1, r3, #26
 8011e56:	bf42      	ittt	mi
 8011e58:	6833      	ldrmi	r3, [r6, #0]
 8011e5a:	3302      	addmi	r3, #2
 8011e5c:	6033      	strmi	r3, [r6, #0]
 8011e5e:	6825      	ldr	r5, [r4, #0]
 8011e60:	f015 0506 	ands.w	r5, r5, #6
 8011e64:	d106      	bne.n	8011e74 <_printf_common+0x48>
 8011e66:	f104 0a19 	add.w	sl, r4, #25
 8011e6a:	68e3      	ldr	r3, [r4, #12]
 8011e6c:	6832      	ldr	r2, [r6, #0]
 8011e6e:	1a9b      	subs	r3, r3, r2
 8011e70:	42ab      	cmp	r3, r5
 8011e72:	dc26      	bgt.n	8011ec2 <_printf_common+0x96>
 8011e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011e78:	6822      	ldr	r2, [r4, #0]
 8011e7a:	3b00      	subs	r3, #0
 8011e7c:	bf18      	it	ne
 8011e7e:	2301      	movne	r3, #1
 8011e80:	0692      	lsls	r2, r2, #26
 8011e82:	d42b      	bmi.n	8011edc <_printf_common+0xb0>
 8011e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011e88:	4641      	mov	r1, r8
 8011e8a:	4638      	mov	r0, r7
 8011e8c:	47c8      	blx	r9
 8011e8e:	3001      	adds	r0, #1
 8011e90:	d01e      	beq.n	8011ed0 <_printf_common+0xa4>
 8011e92:	6823      	ldr	r3, [r4, #0]
 8011e94:	6922      	ldr	r2, [r4, #16]
 8011e96:	f003 0306 	and.w	r3, r3, #6
 8011e9a:	2b04      	cmp	r3, #4
 8011e9c:	bf02      	ittt	eq
 8011e9e:	68e5      	ldreq	r5, [r4, #12]
 8011ea0:	6833      	ldreq	r3, [r6, #0]
 8011ea2:	1aed      	subeq	r5, r5, r3
 8011ea4:	68a3      	ldr	r3, [r4, #8]
 8011ea6:	bf0c      	ite	eq
 8011ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011eac:	2500      	movne	r5, #0
 8011eae:	4293      	cmp	r3, r2
 8011eb0:	bfc4      	itt	gt
 8011eb2:	1a9b      	subgt	r3, r3, r2
 8011eb4:	18ed      	addgt	r5, r5, r3
 8011eb6:	2600      	movs	r6, #0
 8011eb8:	341a      	adds	r4, #26
 8011eba:	42b5      	cmp	r5, r6
 8011ebc:	d11a      	bne.n	8011ef4 <_printf_common+0xc8>
 8011ebe:	2000      	movs	r0, #0
 8011ec0:	e008      	b.n	8011ed4 <_printf_common+0xa8>
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	4652      	mov	r2, sl
 8011ec6:	4641      	mov	r1, r8
 8011ec8:	4638      	mov	r0, r7
 8011eca:	47c8      	blx	r9
 8011ecc:	3001      	adds	r0, #1
 8011ece:	d103      	bne.n	8011ed8 <_printf_common+0xac>
 8011ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	3501      	adds	r5, #1
 8011eda:	e7c6      	b.n	8011e6a <_printf_common+0x3e>
 8011edc:	18e1      	adds	r1, r4, r3
 8011ede:	1c5a      	adds	r2, r3, #1
 8011ee0:	2030      	movs	r0, #48	@ 0x30
 8011ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011ee6:	4422      	add	r2, r4
 8011ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011ef0:	3302      	adds	r3, #2
 8011ef2:	e7c7      	b.n	8011e84 <_printf_common+0x58>
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	4622      	mov	r2, r4
 8011ef8:	4641      	mov	r1, r8
 8011efa:	4638      	mov	r0, r7
 8011efc:	47c8      	blx	r9
 8011efe:	3001      	adds	r0, #1
 8011f00:	d0e6      	beq.n	8011ed0 <_printf_common+0xa4>
 8011f02:	3601      	adds	r6, #1
 8011f04:	e7d9      	b.n	8011eba <_printf_common+0x8e>
	...

08011f08 <_printf_i>:
 8011f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0c:	7e0f      	ldrb	r7, [r1, #24]
 8011f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011f10:	2f78      	cmp	r7, #120	@ 0x78
 8011f12:	4691      	mov	r9, r2
 8011f14:	4680      	mov	r8, r0
 8011f16:	460c      	mov	r4, r1
 8011f18:	469a      	mov	sl, r3
 8011f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011f1e:	d807      	bhi.n	8011f30 <_printf_i+0x28>
 8011f20:	2f62      	cmp	r7, #98	@ 0x62
 8011f22:	d80a      	bhi.n	8011f3a <_printf_i+0x32>
 8011f24:	2f00      	cmp	r7, #0
 8011f26:	f000 80d1 	beq.w	80120cc <_printf_i+0x1c4>
 8011f2a:	2f58      	cmp	r7, #88	@ 0x58
 8011f2c:	f000 80b8 	beq.w	80120a0 <_printf_i+0x198>
 8011f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011f38:	e03a      	b.n	8011fb0 <_printf_i+0xa8>
 8011f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011f3e:	2b15      	cmp	r3, #21
 8011f40:	d8f6      	bhi.n	8011f30 <_printf_i+0x28>
 8011f42:	a101      	add	r1, pc, #4	@ (adr r1, 8011f48 <_printf_i+0x40>)
 8011f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011f48:	08011fa1 	.word	0x08011fa1
 8011f4c:	08011fb5 	.word	0x08011fb5
 8011f50:	08011f31 	.word	0x08011f31
 8011f54:	08011f31 	.word	0x08011f31
 8011f58:	08011f31 	.word	0x08011f31
 8011f5c:	08011f31 	.word	0x08011f31
 8011f60:	08011fb5 	.word	0x08011fb5
 8011f64:	08011f31 	.word	0x08011f31
 8011f68:	08011f31 	.word	0x08011f31
 8011f6c:	08011f31 	.word	0x08011f31
 8011f70:	08011f31 	.word	0x08011f31
 8011f74:	080120b3 	.word	0x080120b3
 8011f78:	08011fdf 	.word	0x08011fdf
 8011f7c:	0801206d 	.word	0x0801206d
 8011f80:	08011f31 	.word	0x08011f31
 8011f84:	08011f31 	.word	0x08011f31
 8011f88:	080120d5 	.word	0x080120d5
 8011f8c:	08011f31 	.word	0x08011f31
 8011f90:	08011fdf 	.word	0x08011fdf
 8011f94:	08011f31 	.word	0x08011f31
 8011f98:	08011f31 	.word	0x08011f31
 8011f9c:	08012075 	.word	0x08012075
 8011fa0:	6833      	ldr	r3, [r6, #0]
 8011fa2:	1d1a      	adds	r2, r3, #4
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	6032      	str	r2, [r6, #0]
 8011fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e09c      	b.n	80120ee <_printf_i+0x1e6>
 8011fb4:	6833      	ldr	r3, [r6, #0]
 8011fb6:	6820      	ldr	r0, [r4, #0]
 8011fb8:	1d19      	adds	r1, r3, #4
 8011fba:	6031      	str	r1, [r6, #0]
 8011fbc:	0606      	lsls	r6, r0, #24
 8011fbe:	d501      	bpl.n	8011fc4 <_printf_i+0xbc>
 8011fc0:	681d      	ldr	r5, [r3, #0]
 8011fc2:	e003      	b.n	8011fcc <_printf_i+0xc4>
 8011fc4:	0645      	lsls	r5, r0, #25
 8011fc6:	d5fb      	bpl.n	8011fc0 <_printf_i+0xb8>
 8011fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011fcc:	2d00      	cmp	r5, #0
 8011fce:	da03      	bge.n	8011fd8 <_printf_i+0xd0>
 8011fd0:	232d      	movs	r3, #45	@ 0x2d
 8011fd2:	426d      	negs	r5, r5
 8011fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fd8:	4858      	ldr	r0, [pc, #352]	@ (801213c <_printf_i+0x234>)
 8011fda:	230a      	movs	r3, #10
 8011fdc:	e011      	b.n	8012002 <_printf_i+0xfa>
 8011fde:	6821      	ldr	r1, [r4, #0]
 8011fe0:	6833      	ldr	r3, [r6, #0]
 8011fe2:	0608      	lsls	r0, r1, #24
 8011fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011fe8:	d402      	bmi.n	8011ff0 <_printf_i+0xe8>
 8011fea:	0649      	lsls	r1, r1, #25
 8011fec:	bf48      	it	mi
 8011fee:	b2ad      	uxthmi	r5, r5
 8011ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8011ff2:	4852      	ldr	r0, [pc, #328]	@ (801213c <_printf_i+0x234>)
 8011ff4:	6033      	str	r3, [r6, #0]
 8011ff6:	bf14      	ite	ne
 8011ff8:	230a      	movne	r3, #10
 8011ffa:	2308      	moveq	r3, #8
 8011ffc:	2100      	movs	r1, #0
 8011ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012002:	6866      	ldr	r6, [r4, #4]
 8012004:	60a6      	str	r6, [r4, #8]
 8012006:	2e00      	cmp	r6, #0
 8012008:	db05      	blt.n	8012016 <_printf_i+0x10e>
 801200a:	6821      	ldr	r1, [r4, #0]
 801200c:	432e      	orrs	r6, r5
 801200e:	f021 0104 	bic.w	r1, r1, #4
 8012012:	6021      	str	r1, [r4, #0]
 8012014:	d04b      	beq.n	80120ae <_printf_i+0x1a6>
 8012016:	4616      	mov	r6, r2
 8012018:	fbb5 f1f3 	udiv	r1, r5, r3
 801201c:	fb03 5711 	mls	r7, r3, r1, r5
 8012020:	5dc7      	ldrb	r7, [r0, r7]
 8012022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012026:	462f      	mov	r7, r5
 8012028:	42bb      	cmp	r3, r7
 801202a:	460d      	mov	r5, r1
 801202c:	d9f4      	bls.n	8012018 <_printf_i+0x110>
 801202e:	2b08      	cmp	r3, #8
 8012030:	d10b      	bne.n	801204a <_printf_i+0x142>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	07df      	lsls	r7, r3, #31
 8012036:	d508      	bpl.n	801204a <_printf_i+0x142>
 8012038:	6923      	ldr	r3, [r4, #16]
 801203a:	6861      	ldr	r1, [r4, #4]
 801203c:	4299      	cmp	r1, r3
 801203e:	bfde      	ittt	le
 8012040:	2330      	movle	r3, #48	@ 0x30
 8012042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012046:	f106 36ff 	addle.w	r6, r6, #4294967295
 801204a:	1b92      	subs	r2, r2, r6
 801204c:	6122      	str	r2, [r4, #16]
 801204e:	f8cd a000 	str.w	sl, [sp]
 8012052:	464b      	mov	r3, r9
 8012054:	aa03      	add	r2, sp, #12
 8012056:	4621      	mov	r1, r4
 8012058:	4640      	mov	r0, r8
 801205a:	f7ff fee7 	bl	8011e2c <_printf_common>
 801205e:	3001      	adds	r0, #1
 8012060:	d14a      	bne.n	80120f8 <_printf_i+0x1f0>
 8012062:	f04f 30ff 	mov.w	r0, #4294967295
 8012066:	b004      	add	sp, #16
 8012068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801206c:	6823      	ldr	r3, [r4, #0]
 801206e:	f043 0320 	orr.w	r3, r3, #32
 8012072:	6023      	str	r3, [r4, #0]
 8012074:	4832      	ldr	r0, [pc, #200]	@ (8012140 <_printf_i+0x238>)
 8012076:	2778      	movs	r7, #120	@ 0x78
 8012078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801207c:	6823      	ldr	r3, [r4, #0]
 801207e:	6831      	ldr	r1, [r6, #0]
 8012080:	061f      	lsls	r7, r3, #24
 8012082:	f851 5b04 	ldr.w	r5, [r1], #4
 8012086:	d402      	bmi.n	801208e <_printf_i+0x186>
 8012088:	065f      	lsls	r7, r3, #25
 801208a:	bf48      	it	mi
 801208c:	b2ad      	uxthmi	r5, r5
 801208e:	6031      	str	r1, [r6, #0]
 8012090:	07d9      	lsls	r1, r3, #31
 8012092:	bf44      	itt	mi
 8012094:	f043 0320 	orrmi.w	r3, r3, #32
 8012098:	6023      	strmi	r3, [r4, #0]
 801209a:	b11d      	cbz	r5, 80120a4 <_printf_i+0x19c>
 801209c:	2310      	movs	r3, #16
 801209e:	e7ad      	b.n	8011ffc <_printf_i+0xf4>
 80120a0:	4826      	ldr	r0, [pc, #152]	@ (801213c <_printf_i+0x234>)
 80120a2:	e7e9      	b.n	8012078 <_printf_i+0x170>
 80120a4:	6823      	ldr	r3, [r4, #0]
 80120a6:	f023 0320 	bic.w	r3, r3, #32
 80120aa:	6023      	str	r3, [r4, #0]
 80120ac:	e7f6      	b.n	801209c <_printf_i+0x194>
 80120ae:	4616      	mov	r6, r2
 80120b0:	e7bd      	b.n	801202e <_printf_i+0x126>
 80120b2:	6833      	ldr	r3, [r6, #0]
 80120b4:	6825      	ldr	r5, [r4, #0]
 80120b6:	6961      	ldr	r1, [r4, #20]
 80120b8:	1d18      	adds	r0, r3, #4
 80120ba:	6030      	str	r0, [r6, #0]
 80120bc:	062e      	lsls	r6, r5, #24
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	d501      	bpl.n	80120c6 <_printf_i+0x1be>
 80120c2:	6019      	str	r1, [r3, #0]
 80120c4:	e002      	b.n	80120cc <_printf_i+0x1c4>
 80120c6:	0668      	lsls	r0, r5, #25
 80120c8:	d5fb      	bpl.n	80120c2 <_printf_i+0x1ba>
 80120ca:	8019      	strh	r1, [r3, #0]
 80120cc:	2300      	movs	r3, #0
 80120ce:	6123      	str	r3, [r4, #16]
 80120d0:	4616      	mov	r6, r2
 80120d2:	e7bc      	b.n	801204e <_printf_i+0x146>
 80120d4:	6833      	ldr	r3, [r6, #0]
 80120d6:	1d1a      	adds	r2, r3, #4
 80120d8:	6032      	str	r2, [r6, #0]
 80120da:	681e      	ldr	r6, [r3, #0]
 80120dc:	6862      	ldr	r2, [r4, #4]
 80120de:	2100      	movs	r1, #0
 80120e0:	4630      	mov	r0, r6
 80120e2:	f7ee f91d 	bl	8000320 <memchr>
 80120e6:	b108      	cbz	r0, 80120ec <_printf_i+0x1e4>
 80120e8:	1b80      	subs	r0, r0, r6
 80120ea:	6060      	str	r0, [r4, #4]
 80120ec:	6863      	ldr	r3, [r4, #4]
 80120ee:	6123      	str	r3, [r4, #16]
 80120f0:	2300      	movs	r3, #0
 80120f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80120f6:	e7aa      	b.n	801204e <_printf_i+0x146>
 80120f8:	6923      	ldr	r3, [r4, #16]
 80120fa:	4632      	mov	r2, r6
 80120fc:	4649      	mov	r1, r9
 80120fe:	4640      	mov	r0, r8
 8012100:	47d0      	blx	sl
 8012102:	3001      	adds	r0, #1
 8012104:	d0ad      	beq.n	8012062 <_printf_i+0x15a>
 8012106:	6823      	ldr	r3, [r4, #0]
 8012108:	079b      	lsls	r3, r3, #30
 801210a:	d413      	bmi.n	8012134 <_printf_i+0x22c>
 801210c:	68e0      	ldr	r0, [r4, #12]
 801210e:	9b03      	ldr	r3, [sp, #12]
 8012110:	4298      	cmp	r0, r3
 8012112:	bfb8      	it	lt
 8012114:	4618      	movlt	r0, r3
 8012116:	e7a6      	b.n	8012066 <_printf_i+0x15e>
 8012118:	2301      	movs	r3, #1
 801211a:	4632      	mov	r2, r6
 801211c:	4649      	mov	r1, r9
 801211e:	4640      	mov	r0, r8
 8012120:	47d0      	blx	sl
 8012122:	3001      	adds	r0, #1
 8012124:	d09d      	beq.n	8012062 <_printf_i+0x15a>
 8012126:	3501      	adds	r5, #1
 8012128:	68e3      	ldr	r3, [r4, #12]
 801212a:	9903      	ldr	r1, [sp, #12]
 801212c:	1a5b      	subs	r3, r3, r1
 801212e:	42ab      	cmp	r3, r5
 8012130:	dcf2      	bgt.n	8012118 <_printf_i+0x210>
 8012132:	e7eb      	b.n	801210c <_printf_i+0x204>
 8012134:	2500      	movs	r5, #0
 8012136:	f104 0619 	add.w	r6, r4, #25
 801213a:	e7f5      	b.n	8012128 <_printf_i+0x220>
 801213c:	08012575 	.word	0x08012575
 8012140:	08012586 	.word	0x08012586

08012144 <memmove>:
 8012144:	4288      	cmp	r0, r1
 8012146:	b510      	push	{r4, lr}
 8012148:	eb01 0402 	add.w	r4, r1, r2
 801214c:	d902      	bls.n	8012154 <memmove+0x10>
 801214e:	4284      	cmp	r4, r0
 8012150:	4623      	mov	r3, r4
 8012152:	d807      	bhi.n	8012164 <memmove+0x20>
 8012154:	1e43      	subs	r3, r0, #1
 8012156:	42a1      	cmp	r1, r4
 8012158:	d008      	beq.n	801216c <memmove+0x28>
 801215a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801215e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012162:	e7f8      	b.n	8012156 <memmove+0x12>
 8012164:	4402      	add	r2, r0
 8012166:	4601      	mov	r1, r0
 8012168:	428a      	cmp	r2, r1
 801216a:	d100      	bne.n	801216e <memmove+0x2a>
 801216c:	bd10      	pop	{r4, pc}
 801216e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012172:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012176:	e7f7      	b.n	8012168 <memmove+0x24>

08012178 <_sbrk_r>:
 8012178:	b538      	push	{r3, r4, r5, lr}
 801217a:	4d06      	ldr	r5, [pc, #24]	@ (8012194 <_sbrk_r+0x1c>)
 801217c:	2300      	movs	r3, #0
 801217e:	4604      	mov	r4, r0
 8012180:	4608      	mov	r0, r1
 8012182:	602b      	str	r3, [r5, #0]
 8012184:	f7f0 fbda 	bl	800293c <_sbrk>
 8012188:	1c43      	adds	r3, r0, #1
 801218a:	d102      	bne.n	8012192 <_sbrk_r+0x1a>
 801218c:	682b      	ldr	r3, [r5, #0]
 801218e:	b103      	cbz	r3, 8012192 <_sbrk_r+0x1a>
 8012190:	6023      	str	r3, [r4, #0]
 8012192:	bd38      	pop	{r3, r4, r5, pc}
 8012194:	240009f4 	.word	0x240009f4

08012198 <_realloc_r>:
 8012198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801219c:	4607      	mov	r7, r0
 801219e:	4614      	mov	r4, r2
 80121a0:	460d      	mov	r5, r1
 80121a2:	b921      	cbnz	r1, 80121ae <_realloc_r+0x16>
 80121a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80121a8:	4611      	mov	r1, r2
 80121aa:	f7ff bc5b 	b.w	8011a64 <_malloc_r>
 80121ae:	b92a      	cbnz	r2, 80121bc <_realloc_r+0x24>
 80121b0:	f7ff fbec 	bl	801198c <_free_r>
 80121b4:	4625      	mov	r5, r4
 80121b6:	4628      	mov	r0, r5
 80121b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121bc:	f000 f81a 	bl	80121f4 <_malloc_usable_size_r>
 80121c0:	4284      	cmp	r4, r0
 80121c2:	4606      	mov	r6, r0
 80121c4:	d802      	bhi.n	80121cc <_realloc_r+0x34>
 80121c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80121ca:	d8f4      	bhi.n	80121b6 <_realloc_r+0x1e>
 80121cc:	4621      	mov	r1, r4
 80121ce:	4638      	mov	r0, r7
 80121d0:	f7ff fc48 	bl	8011a64 <_malloc_r>
 80121d4:	4680      	mov	r8, r0
 80121d6:	b908      	cbnz	r0, 80121dc <_realloc_r+0x44>
 80121d8:	4645      	mov	r5, r8
 80121da:	e7ec      	b.n	80121b6 <_realloc_r+0x1e>
 80121dc:	42b4      	cmp	r4, r6
 80121de:	4622      	mov	r2, r4
 80121e0:	4629      	mov	r1, r5
 80121e2:	bf28      	it	cs
 80121e4:	4632      	movcs	r2, r6
 80121e6:	f7ff fbc3 	bl	8011970 <memcpy>
 80121ea:	4629      	mov	r1, r5
 80121ec:	4638      	mov	r0, r7
 80121ee:	f7ff fbcd 	bl	801198c <_free_r>
 80121f2:	e7f1      	b.n	80121d8 <_realloc_r+0x40>

080121f4 <_malloc_usable_size_r>:
 80121f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80121f8:	1f18      	subs	r0, r3, #4
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	bfbc      	itt	lt
 80121fe:	580b      	ldrlt	r3, [r1, r0]
 8012200:	18c0      	addlt	r0, r0, r3
 8012202:	4770      	bx	lr

08012204 <_init>:
 8012204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012206:	bf00      	nop
 8012208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801220a:	bc08      	pop	{r3}
 801220c:	469e      	mov	lr, r3
 801220e:	4770      	bx	lr

08012210 <_fini>:
 8012210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012212:	bf00      	nop
 8012214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012216:	bc08      	pop	{r3}
 8012218:	469e      	mov	lr, r3
 801221a:	4770      	bx	lr
