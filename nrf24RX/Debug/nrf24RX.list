
nrf24RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004da4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004f84  08004f84  00005f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005060  08005060  00007064  2**0
                  CONTENTS
  4 .ARM          00000008  08005060  08005060  00006060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005068  08005068  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005068  08005068  00006068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800506c  0800506c  0000606c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005070  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000064  080050d4  00007064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  080050d4  000073ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6e8  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020be  00000000  00000000  0001577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00017840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094d  00000000  00000000  00018458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db2a  00000000  00000000  00018da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef8d  00000000  00000000  000368cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9b29  00000000  00000000  0004585c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff385  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000ff3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00102ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f6c 	.word	0x08004f6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08004f6c 	.word	0x08004f6c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96a 	b.w	8000934 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	@ 0x78
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fd92 	bl	8001466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f89d 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 f96f 	bl	8000c28 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800094a:	f000 f8e5 	bl	8000b18 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800094e:	f000 f92d 	bl	8000bac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000952:	f000 fb67 	bl	8001024 <NRF24_Init>
  NRF24_RxMode(RxAddress, 100);
 8000956:	2164      	movs	r1, #100	@ 0x64
 8000958:	4842      	ldr	r0, [pc, #264]	@ (8000a64 <main+0x12c>)
 800095a:	f000 fb9a 	bl	8001092 <NRF24_RxMode>
  nrf24_WriteRegMulti(RX_ADDR_P0, RxAddress, 5);
 800095e:	2205      	movs	r2, #5
 8000960:	4940      	ldr	r1, [pc, #256]	@ (8000a64 <main+0x12c>)
 8000962:	200a      	movs	r0, #10
 8000964:	f000 fa5c 	bl	8000e20 <nrf24_WriteRegMulti>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  print("Encendido");
 8000968:	483f      	ldr	r0, [pc, #252]	@ (8000a68 <main+0x130>)
 800096a:	f000 f9e3 	bl	8000d34 <print>
      uint8_t status = nrf24_ReadReg(STATUS);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fa7c 	bl	8000e6c <nrf24_ReadReg>
 8000974:	4603      	mov	r3, r0
 8000976:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
      print(status);
 800097a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f9d8 	bl	8000d34 <print>
      uint8_t pipe_number = (status >> 1) & 0x07;
 8000984:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
      print(pipe_number);
 8000994:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f9cb 	bl	8000d34 <print>

	  if (isDataAvailable(2)) {  // Check for data on pipe 2 (or any pipe)
 800099e:	2002      	movs	r0, #2
 80009a0:	f000 fbb6 	bl	8001110 <isDataAvailable>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d051      	beq.n	8000a4e <main+0x116>
	          // Read the STATUS register
	          uint8_t status = nrf24_ReadReg(STATUS);
 80009aa:	2007      	movs	r0, #7
 80009ac:	f000 fa5e 	bl	8000e6c <nrf24_ReadReg>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69

	          // Extract the pipe number (RX_P_NO bits 1:3)
	          uint8_t pipe_number = (status >> 1) & 0x07;
 80009b6:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80009ba:	085b      	lsrs	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

	          // Print the pipe number
	          char pipe_msg[50];
	          sprintf(pipe_msg, "Data received from Pipe: %d\n", pipe_number);
 80009c6:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 80009ca:	463b      	mov	r3, r7
 80009cc:	4927      	ldr	r1, [pc, #156]	@ (8000a6c <main+0x134>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fe2c 	bl	800462c <siprintf>
	          HAL_UART_Transmit(&hlpuart1, (uint8_t*)pipe_msg, strlen(pipe_msg), HAL_MAX_DELAY);
 80009d4:	463b      	mov	r3, r7
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc22 	bl	8000220 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	4639      	mov	r1, r7
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	4822      	ldr	r0, [pc, #136]	@ (8000a70 <main+0x138>)
 80009e8:	f002 ffa4 	bl	8003934 <HAL_UART_Transmit>

	          // Receive the data
	          NRF24_Receive((uint8_t*)receivedData);
 80009ec:	4821      	ldr	r0, [pc, #132]	@ (8000a74 <main+0x13c>)
 80009ee:	f000 fbaf 	bl	8001150 <NRF24_Receive>

	          // Print received float values
	          for (int i = 0; i < 8; i++) {
 80009f2:	2300      	movs	r3, #0
 80009f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80009f6:	e022      	b.n	8000a3e <main+0x106>
	              char msg[50];
	              sprintf(msg, "Data[%d]: %.2f\n", i, receivedData[i]); // @suppress("Float formatting support")
 80009f8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a74 <main+0x13c>)
 80009fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fdc8 	bl	8000598 <__aeabi_f2d>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8000a10:	e9cd 2300 	strd	r2, r3, [sp]
 8000a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a16:	4918      	ldr	r1, [pc, #96]	@ (8000a78 <main+0x140>)
 8000a18:	f003 fe08 	bl	800462c <siprintf>
	              HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000a1c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fbfd 	bl	8000220 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	480f      	ldr	r0, [pc, #60]	@ (8000a70 <main+0x138>)
 8000a34:	f002 ff7e 	bl	8003934 <HAL_UART_Transmit>
	          for (int i = 0; i < 8; i++) {
 8000a38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a40:	2b07      	cmp	r3, #7
 8000a42:	ddd9      	ble.n	80009f8 <main+0xc0>
	          }

	          // Clear the RX_DR bit in the STATUS register
	          nrf24_WriteReg(STATUS, (1 << 6));  // Clear RX_DR bit
 8000a44:	2140      	movs	r1, #64	@ 0x40
 8000a46:	2007      	movs	r0, #7
 8000a48:	f000 f9c8 	bl	8000ddc <nrf24_WriteReg>
 8000a4c:	e006      	b.n	8000a5c <main+0x124>
	      } else {
	          // Print a message if no data is available
	          HAL_UART_Transmit(&hlpuart1, (uint8_t*)"No data available\n", 18, HAL_MAX_DELAY);
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	2212      	movs	r2, #18
 8000a54:	4909      	ldr	r1, [pc, #36]	@ (8000a7c <main+0x144>)
 8000a56:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <main+0x138>)
 8000a58:	f002 ff6c 	bl	8003934 <HAL_UART_Transmit>

	      }

	      // Add a small delay to avoid flooding the UART
	      HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	@ 0x64
 8000a5e:	f000 fd73 	bl	8001548 <HAL_Delay>
  {
 8000a62:	e781      	b.n	8000968 <main+0x30>
 8000a64:	20000000 	.word	0x20000000
 8000a68:	08004f84 	.word	0x08004f84
 8000a6c:	08004f90 	.word	0x08004f90
 8000a70:	20000080 	.word	0x20000080
 8000a74:	200001dc 	.word	0x200001dc
 8000a78:	08004fb0 	.word	0x08004fb0
 8000a7c:	08004fc0 	.word	0x08004fc0

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	@ 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0318 	add.w	r3, r7, #24
 8000a8a:	2238      	movs	r2, #56	@ 0x38
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f003 fdec 	bl	800466c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
 8000aa0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aa2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000aa6:	f000 ffef 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2340      	movs	r3, #64	@ 0x40
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abc:	2302      	movs	r3, #2
 8000abe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ac4:	2310      	movs	r3, #16
 8000ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 f889 	bl	8001bf0 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000ae4:	f000 f944 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	230f      	movs	r3, #15
 8000aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af4:	2300      	movs	r3, #0
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2104      	movs	r1, #4
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fb87 	bl	8002214 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b0c:	f000 f930 	bl	8000d70 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3750      	adds	r7, #80	@ 0x50
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ba8 <MX_LPUART1_UART_Init+0x90>)
 8000b20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b22:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b5a:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b5c:	f002 fe9a 	bl	8003894 <HAL_UART_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f000 f903 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	480d      	ldr	r0, [pc, #52]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b6e:	f003 fc93 	bl	8004498 <HAL_UARTEx_SetTxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b78:	f000 f8fa 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b80:	f003 fcc8 	bl	8004514 <HAL_UARTEx_SetRxFifoThreshold>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b8a:	f000 f8f1 	bl	8000d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_LPUART1_UART_Init+0x8c>)
 8000b90:	f003 fc49 	bl	8004426 <HAL_UARTEx_DisableFifoMode>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b9a:	f000 f8e9 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000080 	.word	0x20000080
 8000ba8:	40008000 	.word	0x40008000

08000bac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c24 <MX_SPI2_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000bca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000be2:	2218      	movs	r2, #24
 8000be4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_SPI2_Init+0x74>)
 8000c0c:	f001 ff0e 	bl	8002a2c <HAL_SPI_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000c16:	f000 f8ab 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000114 	.word	0x20000114
 8000c24:	40003800 	.word	0x40003800

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	4a3a      	ldr	r2, [pc, #232]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c44:	f043 0304 	orr.w	r3, r3, #4
 8000c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4e:	f003 0304 	and.w	r3, r3, #4
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5a:	4a34      	ldr	r2, [pc, #208]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c5c:	f043 0320 	orr.w	r3, r3, #32
 8000c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c66:	f003 0320 	and.w	r3, r3, #32
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4a2e      	ldr	r2, [pc, #184]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	4b29      	ldr	r3, [pc, #164]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a28      	ldr	r2, [pc, #160]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <MX_GPIO_Init+0x104>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	210c      	movs	r1, #12
 8000ca2:	4823      	ldr	r0, [pc, #140]	@ (8000d30 <MX_GPIO_Init+0x108>)
 8000ca4:	f000 fed8 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2120      	movs	r1, #32
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb0:	f000 fed2 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4819      	ldr	r0, [pc, #100]	@ (8000d30 <MX_GPIO_Init+0x108>)
 8000ccc:	f000 fd42 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cd4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4812      	ldr	r0, [pc, #72]	@ (8000d30 <MX_GPIO_Init+0x108>)
 8000ce6:	f000 fd35 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000cea:	230c      	movs	r3, #12
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	@ (8000d30 <MX_GPIO_Init+0x108>)
 8000d02:	f000 fd27 	bl	8001754 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d06:	2320      	movs	r3, #32
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d20:	f000 fd18 	bl	8001754 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d24:	bf00      	nop
 8000d26:	3728      	adds	r7, #40	@ 0x28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	48000800 	.word	0x48000800

08000d34 <print>:

/* USER CODE BEGIN 4 */
void print(char uart_buffer[]){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	sprintf(uart_msg, "%s \n\r", uart_buffer);
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	4909      	ldr	r1, [pc, #36]	@ (8000d64 <print+0x30>)
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <print+0x34>)
 8000d42:	f003 fc73 	bl	800462c <siprintf>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*)uart_msg,strlen(uart_msg),HAL_MAX_DELAY);
 8000d46:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <print+0x34>)
 8000d48:	f7ff fa6a 	bl	8000220 <strlen>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	4904      	ldr	r1, [pc, #16]	@ (8000d68 <print+0x34>)
 8000d56:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <print+0x38>)
 8000d58:	f002 fdec 	bl	8003934 <HAL_UART_Transmit>
}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	08004fd4 	.word	0x08004fd4
 8000d68:	20000178 	.word	0x20000178
 8000d6c:	20000080 	.word	0x20000080

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	bf00      	nop
 8000d7a:	e7fd      	b.n	8000d78 <Error_Handler+0x8>

08000d7c <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_2


void CS_Select (void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2104      	movs	r1, #4
 8000d84:	4802      	ldr	r0, [pc, #8]	@ (8000d90 <CS_Select+0x14>)
 8000d86:	f000 fe67 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	48000800 	.word	0x48000800

08000d94 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	4802      	ldr	r0, [pc, #8]	@ (8000da8 <CS_UnSelect+0x14>)
 8000d9e:	f000 fe5b 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	48000800 	.word	0x48000800

08000dac <CE_Enable>:


void CE_Enable (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2108      	movs	r1, #8
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <CE_Enable+0x14>)
 8000db6:	f000 fe4f 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	48000800 	.word	0x48000800

08000dc4 <CE_Disable>:

void CE_Disable (void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2108      	movs	r1, #8
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <CE_Disable+0x14>)
 8000dce:	f000 fe43 	bl	8001a58 <HAL_GPIO_WritePin>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	48000800 	.word	0x48000800

08000ddc <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	460a      	mov	r2, r1
 8000de6:	71fb      	strb	r3, [r7, #7]
 8000de8:	4613      	mov	r3, r2
 8000dea:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000dfa:	f7ff ffbf 	bl	8000d7c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000dfe:	f107 010c 	add.w	r1, r7, #12
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	2202      	movs	r2, #2
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <nrf24_WriteReg+0x40>)
 8000e0a:	f001 feba 	bl	8002b82 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000e0e:	f7ff ffc1 	bl	8000d94 <CS_UnSelect>
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000114 	.word	0x20000114

08000e20 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000e38:	f7ff ffa0 	bl	8000d7c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000e3c:	f107 0114 	add.w	r1, r7, #20
 8000e40:	2364      	movs	r3, #100	@ 0x64
 8000e42:	2201      	movs	r2, #1
 8000e44:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <nrf24_WriteRegMulti+0x48>)
 8000e46:	f001 fe9c 	bl	8002b82 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e52:	68b9      	ldr	r1, [r7, #8]
 8000e54:	4804      	ldr	r0, [pc, #16]	@ (8000e68 <nrf24_WriteRegMulti+0x48>)
 8000e56:	f001 fe94 	bl	8002b82 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000e5a:	f7ff ff9b 	bl	8000d94 <CS_UnSelect>
}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000114 	.word	0x20000114

08000e6c <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000e7a:	f7ff ff7f 	bl	8000d7c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000e7e:	1df9      	adds	r1, r7, #7
 8000e80:	2364      	movs	r3, #100	@ 0x64
 8000e82:	2201      	movs	r2, #1
 8000e84:	4808      	ldr	r0, [pc, #32]	@ (8000ea8 <nrf24_ReadReg+0x3c>)
 8000e86:	f001 fe7c 	bl	8002b82 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000e8a:	f107 010f 	add.w	r1, r7, #15
 8000e8e:	2364      	movs	r3, #100	@ 0x64
 8000e90:	2201      	movs	r2, #1
 8000e92:	4805      	ldr	r0, [pc, #20]	@ (8000ea8 <nrf24_ReadReg+0x3c>)
 8000e94:	f001 ffeb 	bl	8002e6e <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000e98:	f7ff ff7c 	bl	8000d94 <CS_UnSelect>

	return data;
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000114 	.word	0x20000114

08000eac <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000eb6:	f7ff ff61 	bl	8000d7c <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000eba:	1df9      	adds	r1, r7, #7
 8000ebc:	2364      	movs	r3, #100	@ 0x64
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4804      	ldr	r0, [pc, #16]	@ (8000ed4 <nrfsendCmd+0x28>)
 8000ec2:	f001 fe5e 	bl	8002b82 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000ec6:	f7ff ff65 	bl	8000d94 <CS_UnSelect>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000114 	.word	0x20000114

08000ed8 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b07      	cmp	r3, #7
 8000ee6:	d104      	bne.n	8000ef2 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2007      	movs	r0, #7
 8000eec:	f7ff ff76 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000ef0:	e090      	b.n	8001014 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	2b17      	cmp	r3, #23
 8000ef6:	d104      	bne.n	8000f02 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000ef8:	2111      	movs	r1, #17
 8000efa:	2017      	movs	r0, #23
 8000efc:	f7ff ff6e 	bl	8000ddc <nrf24_WriteReg>
}
 8000f00:	e088      	b.n	8001014 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000f02:	2108      	movs	r1, #8
 8000f04:	2000      	movs	r0, #0
 8000f06:	f7ff ff69 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000f0a:	213f      	movs	r1, #63	@ 0x3f
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff ff65 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000f12:	2103      	movs	r1, #3
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff ff61 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f7ff ff5d 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000f22:	2103      	movs	r1, #3
 8000f24:	2004      	movs	r0, #4
 8000f26:	f7ff ff59 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	2005      	movs	r0, #5
 8000f2e:	f7ff ff55 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000f32:	210e      	movs	r1, #14
 8000f34:	2006      	movs	r0, #6
 8000f36:	f7ff ff51 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);// este
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2007      	movs	r0, #7
 8000f3e:	f7ff ff4d 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000f42:	2100      	movs	r1, #0
 8000f44:	2008      	movs	r0, #8
 8000f46:	f7ff ff49 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);// este
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2009      	movs	r0, #9
 8000f4e:	f7ff ff45 	bl	8000ddc <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000f52:	4a32      	ldr	r2, [pc, #200]	@ (800101c <nrf24_reset+0x144>)
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5c:	6018      	str	r0, [r3, #0]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000f62:	f107 0318 	add.w	r3, r7, #24
 8000f66:	2205      	movs	r2, #5
 8000f68:	4619      	mov	r1, r3
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f7ff ff58 	bl	8000e20 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};// este
 8000f70:	4a2b      	ldr	r2, [pc, #172]	@ (8001020 <nrf24_reset+0x148>)
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7a:	6018      	str	r0, [r3, #0]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2205      	movs	r2, #5
 8000f86:	4619      	mov	r1, r3
 8000f88:	200b      	movs	r0, #11
 8000f8a:	f7ff ff49 	bl	8000e20 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000f8e:	21c3      	movs	r1, #195	@ 0xc3
 8000f90:	200c      	movs	r0, #12
 8000f92:	f7ff ff23 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000f96:	21c4      	movs	r1, #196	@ 0xc4
 8000f98:	200d      	movs	r0, #13
 8000f9a:	f7ff ff1f 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000f9e:	21c5      	movs	r1, #197	@ 0xc5
 8000fa0:	200e      	movs	r0, #14
 8000fa2:	f7ff ff1b 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000fa6:	21c6      	movs	r1, #198	@ 0xc6
 8000fa8:	200f      	movs	r0, #15
 8000faa:	f7ff ff17 	bl	8000ddc <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000fae:	4a1b      	ldr	r2, [pc, #108]	@ (800101c <nrf24_reset+0x144>)
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	6018      	str	r0, [r3, #0]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f7ff ff2a 	bl	8000e20 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2011      	movs	r0, #17
 8000fd0:	f7ff ff04 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2012      	movs	r0, #18
 8000fd8:	f7ff ff00 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2013      	movs	r0, #19
 8000fe0:	f7ff fefc 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2014      	movs	r0, #20
 8000fe8:	f7ff fef8 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	2015      	movs	r0, #21
 8000ff0:	f7ff fef4 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2016      	movs	r0, #22
 8000ff8:	f7ff fef0 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000ffc:	2111      	movs	r1, #17
 8000ffe:	2017      	movs	r0, #23
 8001000:	f7ff feec 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8001004:	2100      	movs	r1, #0
 8001006:	201c      	movs	r0, #28
 8001008:	f7ff fee8 	bl	8000ddc <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800100c:	2100      	movs	r1, #0
 800100e:	201d      	movs	r0, #29
 8001010:	f7ff fee4 	bl	8000ddc <nrf24_WriteReg>
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08004fdc 	.word	0x08004fdc
 8001020:	08004fe4 	.word	0x08004fe4

08001024 <NRF24_Init>:




void NRF24_Init (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8001028:	f7ff fecc 	bl	8000dc4 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ff53 	bl	8000ed8 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8001032:	2100      	movs	r1, #0
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff fed1 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0x3F);  // No Auto ACK 0011 1111
 800103a:	213f      	movs	r1, #63	@ 0x3f
 800103c:	2001      	movs	r0, #1
 800103e:	f7ff fecd 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0x03);  // P0:on P1:on P2:off P3:off P4:off P5:off
 8001042:	2103      	movs	r1, #3
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff fec9 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800104a:	2103      	movs	r1, #3
 800104c:	2003      	movs	r0, #3
 800104e:	f7ff fec5 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0x1F);   // retry delay 500 us, retries 15
 8001052:	211f      	movs	r1, #31
 8001054:	2004      	movs	r0, #4
 8001056:	f7ff fec1 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 800105a:	2100      	movs	r1, #0
 800105c:	2005      	movs	r0, #5
 800105e:	f7ff febd 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x09);   // no continuous carrier, no force PLL lock, 2 Mbps, -18 dBm Él último es un don t care pero quien sabe...
 8001062:	2109      	movs	r1, #9
 8001064:	2006      	movs	r0, #6
 8001066:	f7ff feb9 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (FIFO_STATUS, 0x11);
 800106a:	2111      	movs	r1, #17
 800106c:	2017      	movs	r0, #23
 800106e:	f7ff feb5 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (STATUS, 0x70); // no RX data, no TX, TX retries ok, no pipe data, TX FIFO not full
 8001072:	2170      	movs	r1, #112	@ 0x70
 8001074:	2007      	movs	r0, #7
 8001076:	f7ff feb1 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg(DYNPD, 0x03); //P0:off P1:on P2:off P3:off P4:off P5:off estaba solo dos
 800107a:	2103      	movs	r1, #3
 800107c:	201c      	movs	r0, #28
 800107e:	f7ff fead 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg(FEATURE, 0x04);
 8001082:	2104      	movs	r1, #4
 8001084:	201d      	movs	r0, #29
 8001086:	f7ff fea9 	bl	8000ddc <nrf24_WriteReg>


	// Enable the chip after configuring the device
	CE_Enable();
 800108a:	f7ff fe8f 	bl	8000dac <CE_Enable>

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b084      	sub	sp, #16
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 800109e:	f7ff fe91 	bl	8000dc4 <CE_Disable>

	nrf24_reset (STATUS);
 80010a2:	2007      	movs	r0, #7
 80010a4:	f7ff ff18 	bl	8000ed8 <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	4619      	mov	r1, r3
 80010ac:	2005      	movs	r0, #5
 80010ae:	f7ff fe95 	bl	8000ddc <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80010b2:	2002      	movs	r0, #2
 80010b4:	f7ff feda 	bl	8000e6c <nrf24_ReadReg>
 80010b8:	4603      	mov	r3, r0
 80010ba:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	4619      	mov	r1, r3
 80010c8:	2002      	movs	r0, #2
 80010ca:	f7ff fe87 	bl	8000ddc <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 80010ce:	2205      	movs	r2, #5
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	200b      	movs	r0, #11
 80010d4:	f7ff fea4 	bl	8000e20 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 80010d8:	21ee      	movs	r1, #238	@ 0xee
 80010da:	200c      	movs	r0, #12
 80010dc:	f7ff fe7e 	bl	8000ddc <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 80010e0:	2120      	movs	r1, #32
 80010e2:	2013      	movs	r0, #19
 80010e4:	f7ff fe7a 	bl	8000ddc <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff febf 	bl	8000e6c <nrf24_ReadReg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	f043 0303 	orr.w	r3, r3, #3
 80010f8:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	4619      	mov	r1, r3
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fe6c 	bl	8000ddc <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001104:	f7ff fe52 	bl	8000dac <CE_Enable>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8001118:	2007      	movs	r0, #7
 800111a:	f7ff fea7 	bl	8000e6c <nrf24_ReadReg>
 800111e:	4603      	mov	r3, r0
 8001120:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00b      	beq.n	8001144 <isDataAvailable+0x34>
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4013      	ands	r3, r2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 8001138:	2140      	movs	r1, #64	@ 0x40
 800113a:	2007      	movs	r0, #7
 800113c:	f7ff fe4e 	bl	8000ddc <nrf24_WriteReg>

		return 1;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <isDataAvailable+0x36>
	}

	return 0;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 800115c:	f7ff fe0e 	bl	8000d7c <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8001160:	2361      	movs	r3, #97	@ 0x61
 8001162:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001164:	f107 010f 	add.w	r1, r7, #15
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <NRF24_Receive+0x50>)
 800116e:	f001 fd08 	bl	8002b82 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	2220      	movs	r2, #32
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4809      	ldr	r0, [pc, #36]	@ (80011a0 <NRF24_Receive+0x50>)
 800117c:	f001 fe77 	bl	8002e6e <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8001180:	f7ff fe08 	bl	8000d94 <CS_UnSelect>

	HAL_Delay(1);
 8001184:	2001      	movs	r0, #1
 8001186:	f000 f9df 	bl	8001548 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800118a:	23e2      	movs	r3, #226	@ 0xe2
 800118c:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fe8b 	bl	8000eac <nrfsendCmd>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000114 	.word	0x20000114

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_MspInit+0x44>)
 80011ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_MspInit+0x44>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <HAL_MspInit+0x44>)
 80011b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <HAL_MspInit+0x44>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c6:	4a08      	ldr	r2, [pc, #32]	@ (80011e8 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <HAL_MspInit+0x44>)
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011da:	f000 fcf9 	bl	8001bd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b09a      	sub	sp, #104	@ 0x68
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2244      	movs	r2, #68	@ 0x44
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fa2d 	bl	800466c <memset>
  if(huart->Instance==LPUART1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1f      	ldr	r2, [pc, #124]	@ (8001294 <HAL_UART_MspInit+0xa8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d136      	bne.n	800128a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800121c:	2320      	movs	r3, #32
 800121e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fa0f 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001234:	f7ff fd9c 	bl	8000d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HAL_UART_MspInit+0xac>)
 800123a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123c:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <HAL_UART_MspInit+0xac>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_UART_MspInit+0xac>)
 8001246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HAL_UART_MspInit+0xac>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001254:	4a10      	ldr	r2, [pc, #64]	@ (8001298 <HAL_UART_MspInit+0xac>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_UART_MspInit+0xac>)
 800125e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001268:	230c      	movs	r3, #12
 800126a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001278:	230c      	movs	r3, #12
 800127a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001280:	4619      	mov	r1, r3
 8001282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001286:	f000 fa65 	bl	8001754 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800128a:	bf00      	nop
 800128c:	3768      	adds	r7, #104	@ 0x68
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40008000 	.word	0x40008000
 8001298:	40021000 	.word	0x40021000

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_SPI_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d128      	bne.n	8001310 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	4a16      	ldr	r2, [pc, #88]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a10      	ldr	r2, [pc, #64]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012ee:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001300:	2305      	movs	r3, #5
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 800130c:	f000 fa22 	bl	8001754 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40003800 	.word	0x40003800
 800131c:	40021000 	.word	0x40021000
 8001320:	48000400 	.word	0x48000400

08001324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001328:	bf00      	nop
 800132a:	e7fd      	b.n	8001328 <NMI_Handler+0x4>

0800132c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001330:	bf00      	nop
 8001332:	e7fd      	b.n	8001330 <HardFault_Handler+0x4>

08001334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <MemManage_Handler+0x4>

0800133c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001340:	bf00      	nop
 8001342:	e7fd      	b.n	8001340 <BusFault_Handler+0x4>

08001344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <UsageFault_Handler+0x4>

0800134c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 f8c7 	bl	800150c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f003 f962 	bl	800467c <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	@ (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20008000 	.word	0x20008000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	2000025c 	.word	0x2000025c
 80013ec:	200003b0 	.word	0x200003b0

080013f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001414:	480d      	ldr	r0, [pc, #52]	@ (800144c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001416:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001418:	f7ff ffea 	bl	80013f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490d      	ldr	r1, [pc, #52]	@ (8001454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0a      	ldr	r2, [pc, #40]	@ (800145c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0a      	ldr	r4, [pc, #40]	@ (8001460 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001442:	f003 f921 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001446:	f7ff fa77 	bl	8000938 <main>

0800144a <LoopForever>:

LoopForever:
    b LoopForever
 800144a:	e7fe      	b.n	800144a <LoopForever>
  ldr   r0, =_estack
 800144c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001454:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001458:	08005070 	.word	0x08005070
  ldr r2, =_sbss
 800145c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001460:	200003ac 	.word	0x200003ac

08001464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001464:	e7fe      	b.n	8001464 <ADC1_2_IRQHandler>

08001466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001470:	2003      	movs	r0, #3
 8001472:	f000 f93d 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001476:	2000      	movs	r0, #0
 8001478:	f000 f80e 	bl	8001498 <HAL_InitTick>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e001      	b.n	800148c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001488:	f7ff fe8c 	bl	80011a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148c:	79fb      	ldrb	r3, [r7, #7]

}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <HAL_InitTick+0x68>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d022      	beq.n	80014f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014ac:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_InitTick+0x6c>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <HAL_InitTick+0x68>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f93a 	bl	800173a <HAL_SYSTICK_Config>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10f      	bne.n	80014ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b0f      	cmp	r3, #15
 80014d0:	d809      	bhi.n	80014e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d2:	2200      	movs	r2, #0
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	f04f 30ff 	mov.w	r0, #4294967295
 80014da:	f000 f914 	bl	8001706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <HAL_InitTick+0x70>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e007      	b.n	80014f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	e004      	b.n	80014f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e001      	b.n	80014f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000010 	.word	0x20000010
 8001504:	20000008 	.word	0x20000008
 8001508:	2000000c 	.word	0x2000000c

0800150c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x1c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_IncTick+0x20>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4413      	add	r3, r2
 800151a:	4a03      	ldr	r2, [pc, #12]	@ (8001528 <HAL_IncTick+0x1c>)
 800151c:	6013      	str	r3, [r2, #0]
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	20000260 	.word	0x20000260
 800152c:	20000010 	.word	0x20000010

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000260 	.word	0x20000260

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d004      	beq.n	800156c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_Delay+0x40>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4413      	add	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156c:	bf00      	nop
 800156e:	f7ff ffdf 	bl	8001530 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	429a      	cmp	r2, r3
 800157c:	d8f7      	bhi.n	800156e <HAL_Delay+0x26>
  {
  }
}
 800157e:	bf00      	nop
 8001580:	bf00      	nop
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000010 	.word	0x20000010

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	@ (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff47 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff5e 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff90 	bl	8001644 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5f 	bl	80015f0 <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ffb2 	bl	80016ac <SysTick_Config>
 8001748:	4603      	mov	r3, r0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001762:	e15a      	b.n	8001a1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	4013      	ands	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 814c 	beq.w	8001a14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 0303 	and.w	r3, r3, #3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d005      	beq.n	8001794 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001790:	2b02      	cmp	r3, #2
 8001792:	d130      	bne.n	80017f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ca:	2201      	movs	r2, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0201 	and.w	r2, r3, #1
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d123      	bne.n	8001886 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	08da      	lsrs	r2, r3, #3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3208      	adds	r2, #8
 8001880:	6939      	ldr	r1, [r7, #16]
 8001882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	2203      	movs	r2, #3
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0203 	and.w	r2, r3, #3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 80a6 	beq.w	8001a14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018cc:	4a5a      	ldr	r2, [pc, #360]	@ (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80018d4:	4b58      	ldr	r3, [pc, #352]	@ (8001a38 <HAL_GPIO_Init+0x2e4>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e0:	4a56      	ldr	r2, [pc, #344]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	089b      	lsrs	r3, r3, #2
 80018e6:	3302      	adds	r3, #2
 80018e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	220f      	movs	r2, #15
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800190a:	d01f      	beq.n	800194c <HAL_GPIO_Init+0x1f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x2ec>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d019      	beq.n	8001948 <HAL_GPIO_Init+0x1f4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4b      	ldr	r2, [pc, #300]	@ (8001a44 <HAL_GPIO_Init+0x2f0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d013      	beq.n	8001944 <HAL_GPIO_Init+0x1f0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a48 <HAL_GPIO_Init+0x2f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00d      	beq.n	8001940 <HAL_GPIO_Init+0x1ec>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a49      	ldr	r2, [pc, #292]	@ (8001a4c <HAL_GPIO_Init+0x2f8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <HAL_GPIO_Init+0x1e8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a48      	ldr	r2, [pc, #288]	@ (8001a50 <HAL_GPIO_Init+0x2fc>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d101      	bne.n	8001938 <HAL_GPIO_Init+0x1e4>
 8001934:	2305      	movs	r3, #5
 8001936:	e00a      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001938:	2306      	movs	r3, #6
 800193a:	e008      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 800193c:	2304      	movs	r3, #4
 800193e:	e006      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001940:	2303      	movs	r3, #3
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001944:	2302      	movs	r3, #2
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1fa>
 800194c:	2300      	movs	r3, #0
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800195e:	4937      	ldr	r1, [pc, #220]	@ (8001a3c <HAL_GPIO_Init+0x2e8>)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800196c:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4313      	orrs	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001990:	4a30      	ldr	r2, [pc, #192]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001996:	4b2f      	ldr	r3, [pc, #188]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ba:	4a26      	ldr	r2, [pc, #152]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019c0:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_GPIO_Init+0x300>)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f47f ae9d 	bne.w	8001764 <HAL_GPIO_Init+0x10>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	48000400 	.word	0x48000400
 8001a44:	48000800 	.word	0x48000800
 8001a48:	48000c00 	.word	0x48000c00
 8001a4c:	48001000 	.word	0x48001000
 8001a50:	48001400 	.word	0x48001400
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d141      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a96:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d131      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa4:	4b47      	ldr	r3, [pc, #284]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aaa:	4a46      	ldr	r2, [pc, #280]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ab0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab4:	4b43      	ldr	r3, [pc, #268]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001abc:	4a41      	ldr	r2, [pc, #260]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac4:	4b40      	ldr	r3, [pc, #256]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2232      	movs	r2, #50	@ 0x32
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	4a3f      	ldr	r2, [pc, #252]	@ (8001bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	0c9b      	lsrs	r3, r3, #18
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ada:	e002      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae2:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aee:	d102      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f2      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af6:	4b33      	ldr	r3, [pc, #204]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b02:	d158      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e057      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b08:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b18:	e04d      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b20:	d141      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b2e:	d131      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b30:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	4b20      	ldr	r3, [pc, #128]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b48:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2232      	movs	r2, #50	@ 0x32
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b66:	e002      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b7a:	d102      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f2      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b8e:	d112      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e011      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ba4:	e007      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bae:	4a05      	ldr	r2, [pc, #20]	@ (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	20000008 	.word	0x20000008
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	@ (8001bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bde:	6093      	str	r3, [r2, #8]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40007000 	.word	0x40007000

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e2fe      	b.n	8002200 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b97      	ldr	r3, [pc, #604]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b94      	ldr	r3, [pc, #592]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b0c      	cmp	r3, #12
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3e>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b8d      	ldr	r3, [pc, #564]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e2d9      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x74>
 8001c56:	4b85      	ldr	r3, [pc, #532]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a84      	ldr	r2, [pc, #528]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7b      	ldr	r2, [pc, #492]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c88:	4b78      	ldr	r3, [pc, #480]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a77      	ldr	r2, [pc, #476]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b75      	ldr	r3, [pc, #468]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a74      	ldr	r2, [pc, #464]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fc42 	bl	8001530 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fc3e 	bl	8001530 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	@ 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e29e      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fc2e 	bl	8001530 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fc2a 	bl	8001530 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	@ 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e28a      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cea:	4b60      	ldr	r3, [pc, #384]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	4b59      	ldr	r3, [pc, #356]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	4b56      	ldr	r3, [pc, #344]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x136>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_OscConfig+0x13c>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x154>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e25d      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b49      	ldr	r3, [pc, #292]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	4946      	ldr	r1, [pc, #280]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fb9b 	bl	8001498 <HAL_InitTick>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d043      	beq.n	8001df0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e249      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3c      	ldr	r2, [pc, #240]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fbd6 	bl	8001530 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff fbd2 	bl	8001530 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e232      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	061b      	lsls	r3, r3, #24
 8001db4:	492d      	ldr	r1, [pc, #180]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e01a      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fbb2 	bl	8001530 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fbae 	bl	8001530 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e20e      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de2:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1e0>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d041      	beq.n	8001e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e0c:	4a17      	ldr	r2, [pc, #92]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb8b 	bl	8001530 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fb87 	bl	8001530 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1e7      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e30:	4b0e      	ldr	r3, [pc, #56]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ef      	beq.n	8001e1e <HAL_RCC_OscConfig+0x22e>
 8001e3e:	e020      	b.n	8001e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e40:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e46:	4a09      	ldr	r2, [pc, #36]	@ (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fb6e 	bl	8001530 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e56:	e00d      	b.n	8001e74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fb6a 	bl	8001530 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d906      	bls.n	8001e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1ca      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	4b8c      	ldr	r3, [pc, #560]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ea      	bne.n	8001e58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80a6 	beq.w	8001fdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e94:	4b84      	ldr	r3, [pc, #528]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2b4>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	4a7e      	ldr	r2, [pc, #504]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec6:	4b79      	ldr	r3, [pc, #484]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed2:	4b76      	ldr	r3, [pc, #472]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fb27 	bl	8001530 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fb23 	bl	8001530 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e183      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	@ (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_RCC_OscConfig+0x32e>
 8001f0c:	4b66      	ldr	r3, [pc, #408]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f12:	4a65      	ldr	r2, [pc, #404]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f1c:	e024      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d110      	bne.n	8001f48 <HAL_RCC_OscConfig+0x358>
 8001f26:	4b60      	ldr	r3, [pc, #384]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2c:	4a5e      	ldr	r2, [pc, #376]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f36:	4b5c      	ldr	r3, [pc, #368]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f46:	e00f      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f48:	4b57      	ldr	r3, [pc, #348]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4e:	4a56      	ldr	r2, [pc, #344]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f58:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5e:	4a52      	ldr	r2, [pc, #328]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff fade 	bl	8001530 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff fada 	bl	8001530 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e138      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ed      	beq.n	8001f78 <HAL_RCC_OscConfig+0x388>
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fac7 	bl	8001530 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff fac3 	bl	8001530 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e121      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b35      	ldr	r3, [pc, #212]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd4:	4a34      	ldr	r2, [pc, #208]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03c      	beq.n	8002062 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01c      	beq.n	800202a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fa96 	bl	8001530 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002008:	f7ff fa92 	bl	8001530 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0f2      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800201a:	4b23      	ldr	r3, [pc, #140]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ef      	beq.n	8002008 <HAL_RCC_OscConfig+0x418>
 8002028:	e01b      	b.n	8002062 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800202a:	4b1f      	ldr	r3, [pc, #124]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002030:	4a1d      	ldr	r2, [pc, #116]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff fa79 	bl	8001530 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002042:	f7ff fa75 	bl	8001530 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0d5      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002054:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ef      	bne.n	8002042 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80c9 	beq.w	80021fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b0c      	cmp	r3, #12
 8002076:	f000 8083 	beq.w	8002180 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d15e      	bne.n	8002140 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a08      	ldr	r2, [pc, #32]	@ (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff fa4f 	bl	8001530 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	e00c      	b.n	80020b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff fa4b 	bl	8001530 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d905      	bls.n	80020b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0ab      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	4b55      	ldr	r3, [pc, #340]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b52      	ldr	r3, [pc, #328]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b52      	ldr	r3, [pc, #328]	@ (800220c <HAL_RCC_OscConfig+0x61c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6a11      	ldr	r1, [r2, #32]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020cc:	3a01      	subs	r2, #1
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80020d6:	0212      	lsls	r2, r2, #8
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020de:	0852      	lsrs	r2, r2, #1
 80020e0:	3a01      	subs	r2, #1
 80020e2:	0552      	lsls	r2, r2, #21
 80020e4:	4311      	orrs	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ea:	0852      	lsrs	r2, r2, #1
 80020ec:	3a01      	subs	r2, #1
 80020ee:	0652      	lsls	r2, r2, #25
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020f6:	06d2      	lsls	r2, r2, #27
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4943      	ldr	r1, [pc, #268]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a40      	ldr	r2, [pc, #256]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210c:	4b3e      	ldr	r3, [pc, #248]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a3d      	ldr	r2, [pc, #244]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002116:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff fa0a 	bl	8001530 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fa06 	bl	8001530 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e066      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b35      	ldr	r3, [pc, #212]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x530>
 800213e:	e05e      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a30      	ldr	r2, [pc, #192]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f9f0 	bl	8001530 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f9ec 	bl	8001530 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04c      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002166:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002172:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4924      	ldr	r1, [pc, #144]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_OscConfig+0x620>)
 800217a:	4013      	ands	r3, r2
 800217c:	60cb      	str	r3, [r1, #12]
 800217e:	e03e      	b.n	80021fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e039      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800218c:	4b1e      	ldr	r3, [pc, #120]	@ (8002208 <HAL_RCC_OscConfig+0x618>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	429a      	cmp	r2, r3
 800219e:	d12c      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021aa:	3b01      	subs	r3, #1
 80021ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d123      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d11b      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d113      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d109      	bne.n	80021fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f0:	085b      	lsrs	r3, r3, #1
 80021f2:	3b01      	subs	r3, #1
 80021f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3720      	adds	r7, #32
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	019f800c 	.word	0x019f800c
 8002210:	feeefffc 	.word	0xfeeefffc

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e11e      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b91      	ldr	r3, [pc, #580]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b8e      	ldr	r3, [pc, #568]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	498c      	ldr	r1, [pc, #560]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b8a      	ldr	r3, [pc, #552]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e106      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d073      	beq.n	8002350 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d129      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	4b81      	ldr	r3, [pc, #516]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0f4      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002280:	f000 f99e 	bl	80025c0 <RCC_GetSysClockFreqFromPLLSource>
 8002284:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4a7c      	ldr	r2, [pc, #496]	@ (800247c <HAL_RCC_ClockConfig+0x268>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d93f      	bls.n	800230e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800228e:	4b7a      	ldr	r3, [pc, #488]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d033      	beq.n	800230e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d12f      	bne.n	800230e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ae:	4b72      	ldr	r3, [pc, #456]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022b6:	4a70      	ldr	r2, [pc, #448]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e024      	b.n	800230e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0c6      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022dc:	4b66      	ldr	r3, [pc, #408]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0be      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022ec:	f000 f8ce 	bl	800248c <HAL_RCC_GetSysClockFreq>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4a61      	ldr	r2, [pc, #388]	@ (800247c <HAL_RCC_ClockConfig+0x268>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d909      	bls.n	800230e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002302:	4a5d      	ldr	r2, [pc, #372]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002304:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002308:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b5a      	ldr	r3, [pc, #360]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4957      	ldr	r1, [pc, #348]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800231c:	4313      	orrs	r3, r2
 800231e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7ff f906 	bl	8001530 <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff f902 	bl	8001530 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e095      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b4e      	ldr	r3, [pc, #312]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d023      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d005      	beq.n	8002374 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002368:	4b43      	ldr	r3, [pc, #268]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4a42      	ldr	r2, [pc, #264]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800236e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002372:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002388:	4a3b      	ldr	r2, [pc, #236]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800238a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800238e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b39      	ldr	r3, [pc, #228]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4936      	ldr	r1, [pc, #216]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2b80      	cmp	r3, #128	@ 0x80
 80023a8:	d105      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023aa:	4b33      	ldr	r3, [pc, #204]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	4a32      	ldr	r2, [pc, #200]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 80023b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d21d      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f023 020f 	bic.w	r2, r3, #15
 80023cc:	4929      	ldr	r1, [pc, #164]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d4:	f7ff f8ac 	bl	8001530 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7ff f8a8 	bl	8001530 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e03b      	b.n	800246a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	@ (8002474 <HAL_RCC_ClockConfig+0x260>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d1ed      	bne.n	80023dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b1a      	ldr	r3, [pc, #104]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4917      	ldr	r1, [pc, #92]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b13      	ldr	r3, [pc, #76]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490f      	ldr	r1, [pc, #60]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800243e:	f000 f825 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490c      	ldr	r1, [pc, #48]	@ (8002480 <HAL_RCC_ClockConfig+0x26c>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_RCC_ClockConfig+0x270>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_ClockConfig+0x274>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff f818 	bl	8001498 <HAL_InitTick>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	04c4b400 	.word	0x04c4b400
 8002480:	08004fec 	.word	0x08004fec
 8002484:	20000008 	.word	0x20000008
 8002488:	2000000c 	.word	0x2000000c

0800248c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	b087      	sub	sp, #28
 8002490:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002492:	4b2c      	ldr	r3, [pc, #176]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d102      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800249e:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	e047      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024a4:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b26      	ldr	r3, [pc, #152]	@ (800254c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e03e      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024b6:	4b23      	ldr	r3, [pc, #140]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d136      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024c2:	4b20      	ldr	r3, [pc, #128]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	3301      	adds	r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10c      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e0:	4a1a      	ldr	r2, [pc, #104]	@ (800254c <HAL_RCC_GetSysClockFreq+0xc0>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	68d2      	ldr	r2, [r2, #12]
 80024ec:	0a12      	lsrs	r2, r2, #8
 80024ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024f2:	fb02 f303 	mul.w	r3, r2, r3
 80024f6:	617b      	str	r3, [r7, #20]
      break;
 80024f8:	e00c      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024fa:	4a13      	ldr	r2, [pc, #76]	@ (8002548 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4a10      	ldr	r2, [pc, #64]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002504:	68d2      	ldr	r2, [r2, #12]
 8002506:	0a12      	lsrs	r2, r2, #8
 8002508:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	617b      	str	r3, [r7, #20]
      break;
 8002512:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002514:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0e5b      	lsrs	r3, r3, #25
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	3301      	adds	r3, #1
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	e001      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002534:	693b      	ldr	r3, [r7, #16]
}
 8002536:	4618      	mov	r0, r3
 8002538:	371c      	adds	r7, #28
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	40021000 	.word	0x40021000
 8002548:	00f42400 	.word	0x00f42400
 800254c:	016e3600 	.word	0x016e3600

08002550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x14>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000008 	.word	0x20000008

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800256c:	f7ff fff0 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b06      	ldr	r3, [pc, #24]	@ (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4904      	ldr	r1, [pc, #16]	@ (8002590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	08004ffc 	.word	0x08004ffc

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002598:	f7ff ffda 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0adb      	lsrs	r3, r3, #11
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4904      	ldr	r1, [pc, #16]	@ (80025bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000
 80025bc:	08004ffc 	.word	0x08004ffc

080025c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	3301      	adds	r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	d10c      	bne.n	80025fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e4:	4a17      	ldr	r2, [pc, #92]	@ (8002644 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ec:	4a14      	ldr	r2, [pc, #80]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025ee:	68d2      	ldr	r2, [r2, #12]
 80025f0:	0a12      	lsrs	r2, r2, #8
 80025f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	617b      	str	r3, [r7, #20]
    break;
 80025fc:	e00c      	b.n	8002618 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025fe:	4a12      	ldr	r2, [pc, #72]	@ (8002648 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	fbb2 f3f3 	udiv	r3, r2, r3
 8002606:	4a0e      	ldr	r2, [pc, #56]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002608:	68d2      	ldr	r2, [r2, #12]
 800260a:	0a12      	lsrs	r2, r2, #8
 800260c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    break;
 8002616:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002632:	687b      	ldr	r3, [r7, #4]
}
 8002634:	4618      	mov	r0, r3
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000
 8002644:	016e3600 	.word	0x016e3600
 8002648:	00f42400 	.word	0x00f42400

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002654:	2300      	movs	r3, #0
 8002656:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002658:	2300      	movs	r3, #0
 800265a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8098 	beq.w	800279a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800266a:	2300      	movs	r3, #0
 800266c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800266e:	4b43      	ldr	r3, [pc, #268]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002672:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b40      	ldr	r3, [pc, #256]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800267e:	4a3f      	ldr	r2, [pc, #252]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002684:	6593      	str	r3, [r2, #88]	@ 0x58
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002692:	2301      	movs	r3, #1
 8002694:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a39      	ldr	r2, [pc, #228]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a2:	f7fe ff45 	bl	8001530 <HAL_GetTick>
 80026a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026a8:	e009      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe ff41 	bl	8001530 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d902      	bls.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	74fb      	strb	r3, [r7, #19]
        break;
 80026bc:	e005      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026be:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026ca:	7cfb      	ldrb	r3, [r7, #19]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d159      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d0:	4b2a      	ldr	r3, [pc, #168]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d01e      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d019      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ec:	4b23      	ldr	r3, [pc, #140]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f8:	4b20      	ldr	r3, [pc, #128]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002708:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800270e:	4a1b      	ldr	r2, [pc, #108]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d016      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe ff01 	bl	8001530 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002730:	e00b      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fefd 	bl	8001530 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d902      	bls.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	74fb      	strb	r3, [r7, #19]
            break;
 8002748:	e006      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274a:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d0ec      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002758:	7cfb      	ldrb	r3, [r7, #19]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	4903      	ldr	r1, [pc, #12]	@ (800277c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002774:	e008      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	74bb      	strb	r3, [r7, #18]
 800277a:	e005      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002788:	7c7b      	ldrb	r3, [r7, #17]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4ba6      	ldr	r3, [pc, #664]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	4aa5      	ldr	r2, [pc, #660]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	499c      	ldr	r1, [pc, #624]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c8:	4b97      	ldr	r3, [pc, #604]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f023 020c 	bic.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	4994      	ldr	r1, [pc, #592]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	498b      	ldr	r1, [pc, #556]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800280c:	4b86      	ldr	r3, [pc, #536]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002812:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	4983      	ldr	r1, [pc, #524]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800282e:	4b7e      	ldr	r3, [pc, #504]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002834:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	497a      	ldr	r1, [pc, #488]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002850:	4b75      	ldr	r3, [pc, #468]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	4972      	ldr	r1, [pc, #456]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002872:	4b6d      	ldr	r3, [pc, #436]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002878:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	4969      	ldr	r1, [pc, #420]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002894:	4b64      	ldr	r3, [pc, #400]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4961      	ldr	r1, [pc, #388]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028b6:	4b5c      	ldr	r3, [pc, #368]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	4958      	ldr	r1, [pc, #352]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d8:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	4950      	ldr	r1, [pc, #320]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002910:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	4942      	ldr	r1, [pc, #264]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b3d      	ldr	r3, [pc, #244]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a3c      	ldr	r2, [pc, #240]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d015      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002948:	4b37      	ldr	r3, [pc, #220]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	4934      	ldr	r1, [pc, #208]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002962:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002966:	d105      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d015      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002980:	4b29      	ldr	r3, [pc, #164]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298e:	4926      	ldr	r1, [pc, #152]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800299e:	d105      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a0:	4b21      	ldr	r3, [pc, #132]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4a20      	ldr	r2, [pc, #128]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c6:	4918      	ldr	r1, [pc, #96]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029d6:	d105      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d8:	4b13      	ldr	r3, [pc, #76]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4a12      	ldr	r2, [pc, #72]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029fe:	490a      	ldr	r1, [pc, #40]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a0e:	d105      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a10:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000

08002a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e09d      	b.n	8002b7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a4e:	d009      	beq.n	8002a64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
 8002a56:	e005      	b.n	8002a64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d106      	bne.n	8002a84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7fe fc0c 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002aa4:	d902      	bls.n	8002aac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	e002      	b.n	8002ab2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002aac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002aba:	d007      	beq.n	8002acc <HAL_SPI_Init+0xa0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ac4:	d002      	beq.n	8002acc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a1b      	ldr	r3, [r3, #32]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	ea42 0103 	orr.w	r1, r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	f003 0204 	and.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002b48:	ea42 0103 	orr.w	r1, r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69da      	ldr	r2, [r3, #28]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b088      	sub	sp, #32
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b92:	f7fe fccd 	bl	8001530 <HAL_GetTick>
 8002b96:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d001      	beq.n	8002bac <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e15c      	b.n	8002e66 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_SPI_Transmit+0x36>
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e154      	b.n	8002e66 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_SPI_Transmit+0x48>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e14d      	b.n	8002e66 <HAL_SPI_Transmit+0x2e4>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2203      	movs	r2, #3
 8002bd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2200      	movs	r2, #0
 8002c12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c1c:	d10f      	bne.n	8002c3e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c48:	2b40      	cmp	r3, #64	@ 0x40
 8002c4a:	d007      	beq.n	8002c5c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c64:	d952      	bls.n	8002d0c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_SPI_Transmit+0xf2>
 8002c6e:	8b7b      	ldrh	r3, [r7, #26]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d145      	bne.n	8002d00 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	881a      	ldrh	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	1c9a      	adds	r2, r3, #2
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c98:	e032      	b.n	8002d00 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d112      	bne.n	8002cce <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cac:	881a      	ldrh	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	1c9a      	adds	r2, r3, #2
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ccc:	e018      	b.n	8002d00 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cce:	f7fe fc2f 	bl	8001530 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d803      	bhi.n	8002ce6 <HAL_SPI_Transmit+0x164>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_Transmit+0x16a>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e0b2      	b.n	8002e66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1c7      	bne.n	8002c9a <HAL_SPI_Transmit+0x118>
 8002d0a:	e083      	b.n	8002e14 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_SPI_Transmit+0x198>
 8002d14:	8b7b      	ldrh	r3, [r7, #26]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d177      	bne.n	8002e0a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d912      	bls.n	8002d4a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d28:	881a      	ldrh	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	1c9a      	adds	r2, r3, #2
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b02      	subs	r3, #2
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d48:	e05f      	b.n	8002e0a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	330c      	adds	r3, #12
 8002d54:	7812      	ldrb	r2, [r2, #0]
 8002d56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d70:	e04b      	b.n	8002e0a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d12b      	bne.n	8002dd8 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d912      	bls.n	8002db0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	881a      	ldrh	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9a:	1c9a      	adds	r2, r3, #2
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b02      	subs	r3, #2
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dae:	e02c      	b.n	8002e0a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	330c      	adds	r3, #12
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002dd6:	e018      	b.n	8002e0a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dd8:	f7fe fbaa 	bl	8001530 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d803      	bhi.n	8002df0 <HAL_SPI_Transmit+0x26e>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dee:	d102      	bne.n	8002df6 <HAL_SPI_Transmit+0x274>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d109      	bne.n	8002e0a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e02d      	b.n	8002e66 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ae      	bne.n	8002d72 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	6839      	ldr	r1, [r7, #0]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fcf5 	bl	8003808 <SPI_EndRxTxTransaction>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10a      	bne.n	8002e48 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
  }
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b088      	sub	sp, #32
 8002e72:	af02      	add	r7, sp, #8
 8002e74:	60f8      	str	r0, [r7, #12]
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d001      	beq.n	8002e8e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e123      	b.n	80030d6 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_SPI_Receive+0x2c>
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e11b      	b.n	80030d6 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ea6:	d112      	bne.n	8002ece <HAL_SPI_Receive+0x60>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10e      	bne.n	8002ece <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eb8:	88fa      	ldrh	r2, [r7, #6]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	68b9      	ldr	r1, [r7, #8]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f90a 	bl	80030de <HAL_SPI_TransmitReceive>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	e103      	b.n	80030d6 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ece:	f7fe fb2f 	bl	8001530 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_SPI_Receive+0x74>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0f9      	b.n	80030d6 <HAL_SPI_Receive+0x268>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2204      	movs	r2, #4
 8002eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	88fa      	ldrh	r2, [r7, #6]
 8002f0a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002f34:	d908      	bls.n	8002f48 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	e007      	b.n	8002f58 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f56:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f60:	d10f      	bne.n	8002f82 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8c:	2b40      	cmp	r3, #64	@ 0x40
 8002f8e:	d007      	beq.n	8002fa0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002fa8:	d875      	bhi.n	8003096 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002faa:	e037      	b.n	800301c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d117      	bne.n	8002fea <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f103 020c 	add.w	r2, r3, #12
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002fe8:	e018      	b.n	800301c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fea:	f7fe faa1 	bl	8001530 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d803      	bhi.n	8003002 <HAL_SPI_Receive+0x194>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d102      	bne.n	8003008 <HAL_SPI_Receive+0x19a>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e05c      	b.n	80030d6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c1      	bne.n	8002fac <HAL_SPI_Receive+0x13e>
 8003028:	e03b      	b.n	80030a2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d115      	bne.n	8003064 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	b292      	uxth	r2, r2
 8003044:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304a:	1c9a      	adds	r2, r3, #2
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003062:	e018      	b.n	8003096 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003064:	f7fe fa64 	bl	8001530 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d803      	bhi.n	800307c <HAL_SPI_Receive+0x20e>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d102      	bne.n	8003082 <HAL_SPI_Receive+0x214>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d109      	bne.n	8003096 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e01f      	b.n	80030d6 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1c3      	bne.n	800302a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb56 	bl	8003758 <SPI_EndRxTransaction>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b08a      	sub	sp, #40	@ 0x28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030ec:	2301      	movs	r3, #1
 80030ee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030f0:	f7fe fa1e 	bl	8001530 <HAL_GetTick>
 80030f4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030fc:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003108:	887b      	ldrh	r3, [r7, #2]
 800310a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800310c:	7ffb      	ldrb	r3, [r7, #31]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d00c      	beq.n	800312c <HAL_SPI_TransmitReceive+0x4e>
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003118:	d106      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x4a>
 8003122:	7ffb      	ldrb	r3, [r7, #31]
 8003124:	2b04      	cmp	r3, #4
 8003126:	d001      	beq.n	800312c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	e1f3      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d005      	beq.n	800313e <HAL_SPI_TransmitReceive+0x60>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d002      	beq.n	800313e <HAL_SPI_TransmitReceive+0x60>
 8003138:	887b      	ldrh	r3, [r7, #2]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1e8      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_SPI_TransmitReceive+0x72>
 800314c:	2302      	movs	r3, #2
 800314e:	e1e1      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b04      	cmp	r3, #4
 8003162:	d003      	beq.n	800316c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2205      	movs	r2, #5
 8003168:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	887a      	ldrh	r2, [r7, #2]
 8003184:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	887a      	ldrh	r2, [r7, #2]
 8003192:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	887a      	ldrh	r2, [r7, #2]
 8003198:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ae:	d802      	bhi.n	80031b6 <HAL_SPI_TransmitReceive+0xd8>
 80031b0:	8abb      	ldrh	r3, [r7, #20]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d908      	bls.n	80031c8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e007      	b.n	80031d8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e2:	2b40      	cmp	r3, #64	@ 0x40
 80031e4:	d007      	beq.n	80031f6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031fe:	f240 8083 	bls.w	8003308 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_SPI_TransmitReceive+0x132>
 800320a:	8afb      	ldrh	r3, [r7, #22]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d16f      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	1c9a      	adds	r2, r3, #2
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003234:	e05c      	b.n	80032f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b02      	cmp	r3, #2
 8003242:	d11b      	bne.n	800327c <HAL_SPI_TransmitReceive+0x19e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_SPI_TransmitReceive+0x19e>
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	2b01      	cmp	r3, #1
 8003252:	d113      	bne.n	800327c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	881a      	ldrh	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003264:	1c9a      	adds	r2, r3, #2
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	d11c      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x1e6>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	b292      	uxth	r2, r2
 80032a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	1c9a      	adds	r2, r3, #2
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032c0:	2301      	movs	r3, #1
 80032c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032c4:	f7fe f934 	bl	8001530 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d80d      	bhi.n	80032f0 <HAL_SPI_TransmitReceive+0x212>
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d009      	beq.n	80032f0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e111      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d19d      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x158>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d197      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x158>
 8003306:	e0e5      	b.n	80034d4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_SPI_TransmitReceive+0x23a>
 8003310:	8afb      	ldrh	r3, [r7, #22]
 8003312:	2b01      	cmp	r3, #1
 8003314:	f040 80d1 	bne.w	80034ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d912      	bls.n	8003348 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003326:	881a      	ldrh	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003332:	1c9a      	adds	r2, r3, #2
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b02      	subs	r3, #2
 8003340:	b29a      	uxth	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003346:	e0b8      	b.n	80034ba <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	330c      	adds	r3, #12
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335a:	1c5a      	adds	r2, r3, #1
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003364:	b29b      	uxth	r3, r3
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800336e:	e0a4      	b.n	80034ba <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d134      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x30a>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_SPI_TransmitReceive+0x30a>
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	2b01      	cmp	r3, #1
 800338c:	d12c      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d912      	bls.n	80033be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b02      	subs	r3, #2
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033bc:	e012      	b.n	80033e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330c      	adds	r3, #12
 80033c8:	7812      	ldrb	r2, [r2, #0]
 80033ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033e4:	2300      	movs	r3, #0
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d148      	bne.n	8003488 <HAL_SPI_TransmitReceive+0x3aa>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d042      	beq.n	8003488 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d923      	bls.n	8003456 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003418:	b292      	uxth	r2, r2
 800341a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	1c9a      	adds	r2, r3, #2
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b02      	subs	r3, #2
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d81f      	bhi.n	8003484 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	e016      	b.n	8003484 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f103 020c 	add.w	r2, r3, #12
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003462:	7812      	ldrb	r2, [r2, #0]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003484:	2301      	movs	r3, #1
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003488:	f7fe f852 	bl	8001530 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003494:	429a      	cmp	r2, r3
 8003496:	d803      	bhi.n	80034a0 <HAL_SPI_TransmitReceive+0x3c2>
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d102      	bne.n	80034a6 <HAL_SPI_TransmitReceive+0x3c8>
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e02c      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f47f af55 	bne.w	8003370 <HAL_SPI_TransmitReceive+0x292>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f47f af4e 	bne.w	8003370 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f995 	bl	8003808 <SPI_EndRxTxTransaction>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003512:	2300      	movs	r3, #0
  }
}
 8003514:	4618      	mov	r0, r3
 8003516:	3728      	adds	r7, #40	@ 0x28
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800352c:	f7fe f800 	bl	8001530 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4413      	add	r3, r2
 800353a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800353c:	f7fd fff8 	bl	8001530 <HAL_GetTick>
 8003540:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003542:	4b39      	ldr	r3, [pc, #228]	@ (8003628 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	015b      	lsls	r3, r3, #5
 8003548:	0d1b      	lsrs	r3, r3, #20
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003552:	e054      	b.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d050      	beq.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800355c:	f7fd ffe8 	bl	8001530 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	69fa      	ldr	r2, [r7, #28]
 8003568:	429a      	cmp	r2, r3
 800356a:	d902      	bls.n	8003572 <SPI_WaitFlagStateUntilTimeout+0x56>
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d13d      	bne.n	80035ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003580:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800358a:	d111      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003594:	d004      	beq.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800359e:	d107      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035b8:	d10f      	bne.n	80035da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e017      	b.n	800361e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4013      	ands	r3, r2
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	429a      	cmp	r2, r3
 800360c:	bf0c      	ite	eq
 800360e:	2301      	moveq	r3, #1
 8003610:	2300      	movne	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	429a      	cmp	r2, r3
 800361a:	d19b      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3720      	adds	r7, #32
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	20000008 	.word	0x20000008

0800362c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	@ 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800363e:	f7fd ff77 	bl	8001530 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4413      	add	r3, r2
 800364c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800364e:	f7fd ff6f 	bl	8001530 <HAL_GetTick>
 8003652:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800365c:	4b3d      	ldr	r3, [pc, #244]	@ (8003754 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	00da      	lsls	r2, r3, #3
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	0d1b      	lsrs	r3, r3, #20
 800366c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003674:	e060      	b.n	8003738 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800367c:	d107      	bne.n	800368e <SPI_WaitFifoStateUntilTimeout+0x62>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d104      	bne.n	800368e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800368c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d050      	beq.n	8003738 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003696:	f7fd ff4b 	bl	8001530 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d902      	bls.n	80036ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d13d      	bne.n	8003728 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80036ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c4:	d111      	bne.n	80036ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036ce:	d004      	beq.n	80036da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d8:	d107      	bne.n	80036ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f2:	d10f      	bne.n	8003714 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003712:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e010      	b.n	800374a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3b01      	subs	r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	4013      	ands	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d196      	bne.n	8003676 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3728      	adds	r7, #40	@ 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000008 	.word	0x20000008

08003758 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af02      	add	r7, sp, #8
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800376c:	d111      	bne.n	8003792 <SPI_EndRxTransaction+0x3a>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003776:	d004      	beq.n	8003782 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003780:	d107      	bne.n	8003792 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003790:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2200      	movs	r2, #0
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f7ff febd 	bl	800351c <SPI_WaitFlagStateUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e023      	b.n	8003800 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037c0:	d11d      	bne.n	80037fe <SPI_EndRxTransaction+0xa6>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037ca:	d004      	beq.n	80037d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037d4:	d113      	bne.n	80037fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2200      	movs	r2, #0
 80037de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f7ff ff22 	bl	800362c <SPI_WaitFifoStateUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f2:	f043 0220 	orr.w	r2, r3, #32
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e000      	b.n	8003800 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2200      	movs	r2, #0
 800381c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff ff03 	bl	800362c <SPI_WaitFifoStateUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d007      	beq.n	800383c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	f043 0220 	orr.w	r2, r3, #32
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e027      	b.n	800388c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	2180      	movs	r1, #128	@ 0x80
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f7ff fe68 	bl	800351c <SPI_WaitFlagStateUntilTimeout>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003856:	f043 0220 	orr.w	r2, r3, #32
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e014      	b.n	800388c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2200      	movs	r2, #0
 800386a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f7ff fedc 	bl	800362c <SPI_WaitFifoStateUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800387e:	f043 0220 	orr.w	r2, r3, #32
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e000      	b.n	800388c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e042      	b.n	800392c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fd fc97 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2224      	movs	r2, #36	@ 0x24
 80038c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fb82 	bl	8003fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8b3 	bl	8003a50 <UART_SetConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e01b      	b.n	800392c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003902:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003912:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fc01 	bl	800412c <UART_CheckIdleState>
 800392a:	4603      	mov	r3, r0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	2b20      	cmp	r3, #32
 800394c:	d17b      	bne.n	8003a46 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d002      	beq.n	800395a <HAL_UART_Transmit+0x26>
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e074      	b.n	8003a48 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2221      	movs	r2, #33	@ 0x21
 800396a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800396e:	f7fd fddf 	bl	8001530 <HAL_GetTick>
 8003972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	88fa      	ldrh	r2, [r7, #6]
 8003978:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398c:	d108      	bne.n	80039a0 <HAL_UART_Transmit+0x6c>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	e003      	b.n	80039a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039a8:	e030      	b.n	8003a0c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	2180      	movs	r1, #128	@ 0x80
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 fc63 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e03d      	b.n	8003a48 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3302      	adds	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e007      	b.n	80039fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1c8      	bne.n	80039aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	2140      	movs	r1, #64	@ 0x40
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fc2c 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e006      	b.n	8003a48 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
  }
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a54:	b08c      	sub	sp, #48	@ 0x30
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4bab      	ldr	r3, [pc, #684]	@ (8003d2c <UART_SetConfig+0x2dc>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4aa0      	ldr	r2, [pc, #640]	@ (8003d30 <UART_SetConfig+0x2e0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d004      	beq.n	8003abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003ac6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ada:	f023 010f 	bic.w	r1, r3, #15
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a91      	ldr	r2, [pc, #580]	@ (8003d34 <UART_SetConfig+0x2e4>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d125      	bne.n	8003b40 <UART_SetConfig+0xf0>
 8003af4:	4b90      	ldr	r3, [pc, #576]	@ (8003d38 <UART_SetConfig+0x2e8>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d81a      	bhi.n	8003b38 <UART_SetConfig+0xe8>
 8003b02:	a201      	add	r2, pc, #4	@ (adr r2, 8003b08 <UART_SetConfig+0xb8>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b29 	.word	0x08003b29
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	2301      	movs	r3, #1
 8003b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	e0d6      	b.n	8003cce <UART_SetConfig+0x27e>
 8003b20:	2302      	movs	r3, #2
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b26:	e0d2      	b.n	8003cce <UART_SetConfig+0x27e>
 8003b28:	2304      	movs	r3, #4
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b2e:	e0ce      	b.n	8003cce <UART_SetConfig+0x27e>
 8003b30:	2308      	movs	r3, #8
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b36:	e0ca      	b.n	8003cce <UART_SetConfig+0x27e>
 8003b38:	2310      	movs	r3, #16
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b3e:	e0c6      	b.n	8003cce <UART_SetConfig+0x27e>
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7d      	ldr	r2, [pc, #500]	@ (8003d3c <UART_SetConfig+0x2ec>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d138      	bne.n	8003bbc <UART_SetConfig+0x16c>
 8003b4a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d38 <UART_SetConfig+0x2e8>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d82d      	bhi.n	8003bb4 <UART_SetConfig+0x164>
 8003b58:	a201      	add	r2, pc, #4	@ (adr r2, 8003b60 <UART_SetConfig+0x110>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003b95 	.word	0x08003b95
 8003b64:	08003bb5 	.word	0x08003bb5
 8003b68:	08003bb5 	.word	0x08003bb5
 8003b6c:	08003bb5 	.word	0x08003bb5
 8003b70:	08003ba5 	.word	0x08003ba5
 8003b74:	08003bb5 	.word	0x08003bb5
 8003b78:	08003bb5 	.word	0x08003bb5
 8003b7c:	08003bb5 	.word	0x08003bb5
 8003b80:	08003b9d 	.word	0x08003b9d
 8003b84:	08003bb5 	.word	0x08003bb5
 8003b88:	08003bb5 	.word	0x08003bb5
 8003b8c:	08003bb5 	.word	0x08003bb5
 8003b90:	08003bad 	.word	0x08003bad
 8003b94:	2300      	movs	r3, #0
 8003b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b9a:	e098      	b.n	8003cce <UART_SetConfig+0x27e>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ba2:	e094      	b.n	8003cce <UART_SetConfig+0x27e>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003baa:	e090      	b.n	8003cce <UART_SetConfig+0x27e>
 8003bac:	2308      	movs	r3, #8
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bb2:	e08c      	b.n	8003cce <UART_SetConfig+0x27e>
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bba:	e088      	b.n	8003cce <UART_SetConfig+0x27e>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a5f      	ldr	r2, [pc, #380]	@ (8003d40 <UART_SetConfig+0x2f0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d125      	bne.n	8003c12 <UART_SetConfig+0x1c2>
 8003bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d38 <UART_SetConfig+0x2e8>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003bd0:	2b30      	cmp	r3, #48	@ 0x30
 8003bd2:	d016      	beq.n	8003c02 <UART_SetConfig+0x1b2>
 8003bd4:	2b30      	cmp	r3, #48	@ 0x30
 8003bd6:	d818      	bhi.n	8003c0a <UART_SetConfig+0x1ba>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d00a      	beq.n	8003bf2 <UART_SetConfig+0x1a2>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d814      	bhi.n	8003c0a <UART_SetConfig+0x1ba>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <UART_SetConfig+0x19a>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d008      	beq.n	8003bfa <UART_SetConfig+0x1aa>
 8003be8:	e00f      	b.n	8003c0a <UART_SetConfig+0x1ba>
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf0:	e06d      	b.n	8003cce <UART_SetConfig+0x27e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf8:	e069      	b.n	8003cce <UART_SetConfig+0x27e>
 8003bfa:	2304      	movs	r3, #4
 8003bfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c00:	e065      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c02:	2308      	movs	r3, #8
 8003c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c08:	e061      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c0a:	2310      	movs	r3, #16
 8003c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c10:	e05d      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a4b      	ldr	r2, [pc, #300]	@ (8003d44 <UART_SetConfig+0x2f4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d125      	bne.n	8003c68 <UART_SetConfig+0x218>
 8003c1c:	4b46      	ldr	r3, [pc, #280]	@ (8003d38 <UART_SetConfig+0x2e8>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c28:	d016      	beq.n	8003c58 <UART_SetConfig+0x208>
 8003c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c2c:	d818      	bhi.n	8003c60 <UART_SetConfig+0x210>
 8003c2e:	2b80      	cmp	r3, #128	@ 0x80
 8003c30:	d00a      	beq.n	8003c48 <UART_SetConfig+0x1f8>
 8003c32:	2b80      	cmp	r3, #128	@ 0x80
 8003c34:	d814      	bhi.n	8003c60 <UART_SetConfig+0x210>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <UART_SetConfig+0x1f0>
 8003c3a:	2b40      	cmp	r3, #64	@ 0x40
 8003c3c:	d008      	beq.n	8003c50 <UART_SetConfig+0x200>
 8003c3e:	e00f      	b.n	8003c60 <UART_SetConfig+0x210>
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c46:	e042      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4e:	e03e      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c50:	2304      	movs	r3, #4
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c56:	e03a      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c58:	2308      	movs	r3, #8
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5e:	e036      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c60:	2310      	movs	r3, #16
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c66:	e032      	b.n	8003cce <UART_SetConfig+0x27e>
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a30      	ldr	r2, [pc, #192]	@ (8003d30 <UART_SetConfig+0x2e0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d12a      	bne.n	8003cc8 <UART_SetConfig+0x278>
 8003c72:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <UART_SetConfig+0x2e8>)
 8003c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c78:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003c7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c80:	d01a      	beq.n	8003cb8 <UART_SetConfig+0x268>
 8003c82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003c86:	d81b      	bhi.n	8003cc0 <UART_SetConfig+0x270>
 8003c88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c8c:	d00c      	beq.n	8003ca8 <UART_SetConfig+0x258>
 8003c8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c92:	d815      	bhi.n	8003cc0 <UART_SetConfig+0x270>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <UART_SetConfig+0x250>
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9c:	d008      	beq.n	8003cb0 <UART_SetConfig+0x260>
 8003c9e:	e00f      	b.n	8003cc0 <UART_SetConfig+0x270>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca6:	e012      	b.n	8003cce <UART_SetConfig+0x27e>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cae:	e00e      	b.n	8003cce <UART_SetConfig+0x27e>
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb6:	e00a      	b.n	8003cce <UART_SetConfig+0x27e>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cbe:	e006      	b.n	8003cce <UART_SetConfig+0x27e>
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cc6:	e002      	b.n	8003cce <UART_SetConfig+0x27e>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <UART_SetConfig+0x2e0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	f040 80a8 	bne.w	8003e2a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d834      	bhi.n	8003d4c <UART_SetConfig+0x2fc>
 8003ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce8 <UART_SetConfig+0x298>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d4d 	.word	0x08003d4d
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d4d 	.word	0x08003d4d
 8003cf8:	08003d1b 	.word	0x08003d1b
 8003cfc:	08003d4d 	.word	0x08003d4d
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d4d 	.word	0x08003d4d
 8003d08:	08003d23 	.word	0x08003d23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7fe fc2c 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003d10:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d12:	e021      	b.n	8003d58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	@ (8003d48 <UART_SetConfig+0x2f8>)
 8003d16:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d18:	e01e      	b.n	8003d58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fbb7 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8003d1e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d20:	e01a      	b.n	8003d58 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d28:	e016      	b.n	8003d58 <UART_SetConfig+0x308>
 8003d2a:	bf00      	nop
 8003d2c:	cfff69f3 	.word	0xcfff69f3
 8003d30:	40008000 	.word	0x40008000
 8003d34:	40013800 	.word	0x40013800
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	40004400 	.word	0x40004400
 8003d40:	40004800 	.word	0x40004800
 8003d44:	40004c00 	.word	0x40004c00
 8003d48:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003d56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 812a 	beq.w	8003fb4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	4a9e      	ldr	r2, [pc, #632]	@ (8003fe0 <UART_SetConfig+0x590>)
 8003d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d305      	bcc.n	8003d90 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d903      	bls.n	8003d98 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d96:	e10d      	b.n	8003fb4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	60fa      	str	r2, [r7, #12]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	4a8e      	ldr	r2, [pc, #568]	@ (8003fe0 <UART_SetConfig+0x590>)
 8003da6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2200      	movs	r2, #0
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	607a      	str	r2, [r7, #4]
 8003db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003db6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dba:	f7fc fc45 	bl	8000648 <__aeabi_uldivmod>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	020b      	lsls	r3, r1, #8
 8003dd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dd4:	0202      	lsls	r2, r0, #8
 8003dd6:	6979      	ldr	r1, [r7, #20]
 8003dd8:	6849      	ldr	r1, [r1, #4]
 8003dda:	0849      	lsrs	r1, r1, #1
 8003ddc:	2000      	movs	r0, #0
 8003dde:	460c      	mov	r4, r1
 8003de0:	4605      	mov	r5, r0
 8003de2:	eb12 0804 	adds.w	r8, r2, r4
 8003de6:	eb43 0905 	adc.w	r9, r3, r5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	469a      	mov	sl, r3
 8003df2:	4693      	mov	fp, r2
 8003df4:	4652      	mov	r2, sl
 8003df6:	465b      	mov	r3, fp
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	f7fc fc24 	bl	8000648 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e0e:	d308      	bcc.n	8003e22 <UART_SetConfig+0x3d2>
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e16:	d204      	bcs.n	8003e22 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6a3a      	ldr	r2, [r7, #32]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e0c8      	b.n	8003fb4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e28:	e0c4      	b.n	8003fb4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	69db      	ldr	r3, [r3, #28]
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e32:	d167      	bne.n	8003f04 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003e34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d828      	bhi.n	8003e8e <UART_SetConfig+0x43e>
 8003e3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e44 <UART_SetConfig+0x3f4>)
 8003e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e42:	bf00      	nop
 8003e44:	08003e69 	.word	0x08003e69
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e8f 	.word	0x08003e8f
 8003e54:	08003e7f 	.word	0x08003e7f
 8003e58:	08003e8f 	.word	0x08003e8f
 8003e5c:	08003e8f 	.word	0x08003e8f
 8003e60:	08003e8f 	.word	0x08003e8f
 8003e64:	08003e87 	.word	0x08003e87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e68:	f7fe fb7e 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003e6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e6e:	e014      	b.n	8003e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e70:	f7fe fb90 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8003e74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e76:	e010      	b.n	8003e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e78:	4b5a      	ldr	r3, [pc, #360]	@ (8003fe4 <UART_SetConfig+0x594>)
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e7c:	e00d      	b.n	8003e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7e:	f7fe fb05 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8003e82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e84:	e009      	b.n	8003e9a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e8c:	e005      	b.n	8003e9a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8089 	beq.w	8003fb4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8003fe0 <UART_SetConfig+0x590>)
 8003ea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eac:	461a      	mov	r2, r3
 8003eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb4:	005a      	lsls	r2, r3, #1
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	441a      	add	r2, r3
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	2b0f      	cmp	r3, #15
 8003ecc:	d916      	bls.n	8003efc <UART_SetConfig+0x4ac>
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d212      	bcs.n	8003efc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	f023 030f 	bic.w	r3, r3, #15
 8003ede:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	8bfb      	ldrh	r3, [r7, #30]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	8bfa      	ldrh	r2, [r7, #30]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	e05b      	b.n	8003fb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f02:	e057      	b.n	8003fb4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f04:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d828      	bhi.n	8003f5e <UART_SetConfig+0x50e>
 8003f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <UART_SetConfig+0x4c4>)
 8003f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f12:	bf00      	nop
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08003f5f 	.word	0x08003f5f
 8003f24:	08003f4f 	.word	0x08003f4f
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f5f 	.word	0x08003f5f
 8003f34:	08003f57 	.word	0x08003f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe fb16 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f3e:	e014      	b.n	8003f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7fe fb28 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 8003f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f46:	e010      	b.n	8003f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f48:	4b26      	ldr	r3, [pc, #152]	@ (8003fe4 <UART_SetConfig+0x594>)
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f4c:	e00d      	b.n	8003f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7fe fa9d 	bl	800248c <HAL_RCC_GetSysClockFreq>
 8003f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f54:	e009      	b.n	8003f6a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003f5c:	e005      	b.n	8003f6a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003f68:	bf00      	nop
    }

    if (pclk != 0U)
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d021      	beq.n	8003fb4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	4a1a      	ldr	r2, [pc, #104]	@ (8003fe0 <UART_SetConfig+0x590>)
 8003f76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	085b      	lsrs	r3, r3, #1
 8003f88:	441a      	add	r2, r3
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	d909      	bls.n	8003fae <UART_SetConfig+0x55e>
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fa0:	d205      	bcs.n	8003fae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
 8003fac:	e002      	b.n	8003fb4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3730      	adds	r7, #48	@ 0x30
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fde:	bf00      	nop
 8003fe0:	08005004 	.word	0x08005004
 8003fe4:	00f42400 	.word	0x00f42400

08003fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409e:	f003 0320 	and.w	r3, r3, #32
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00a      	beq.n	80040bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01a      	beq.n	80040fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e6:	d10a      	bne.n	80040fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b098      	sub	sp, #96	@ 0x60
 8004130:	af02      	add	r7, sp, #8
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800413c:	f7fd f9f8 	bl	8001530 <HAL_GetTick>
 8004140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b08      	cmp	r3, #8
 800414e:	d12f      	bne.n	80041b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	2200      	movs	r2, #0
 800415a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f88e 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d022      	beq.n	80041b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800417a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004188:	647b      	str	r3, [r7, #68]	@ 0x44
 800418a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004190:	e841 2300 	strex	r3, r2, [r1]
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e6      	bne.n	800416a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e063      	b.n	8004278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d149      	bne.n	8004252 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c6:	2200      	movs	r2, #0
 80041c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f857 	bl	8004280 <UART_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d03c      	beq.n	8004252 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	623b      	str	r3, [r7, #32]
   return(result);
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e6      	bne.n	80041d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	3308      	adds	r3, #8
 8004210:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	e853 3f00 	ldrex	r3, [r3]
 8004218:	60fb      	str	r3, [r7, #12]
   return(result);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f023 0301 	bic.w	r3, r3, #1
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800422a:	61fa      	str	r2, [r7, #28]
 800422c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	69fa      	ldr	r2, [r7, #28]
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	617b      	str	r3, [r7, #20]
   return(result);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e5      	bne.n	800420a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e012      	b.n	8004278 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3758      	adds	r7, #88	@ 0x58
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	603b      	str	r3, [r7, #0]
 800428c:	4613      	mov	r3, r2
 800428e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004290:	e04f      	b.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004298:	d04b      	beq.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429a:	f7fd f949 	bl	8001530 <HAL_GetTick>
 800429e:	4602      	mov	r2, r0
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	1ad3      	subs	r3, r2, r3
 80042a4:	69ba      	ldr	r2, [r7, #24]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d302      	bcc.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e04e      	b.n	8004352 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0304 	and.w	r3, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d037      	beq.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b80      	cmp	r3, #128	@ 0x80
 80042c6:	d034      	beq.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b40      	cmp	r3, #64	@ 0x40
 80042cc:	d031      	beq.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d110      	bne.n	80042fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2208      	movs	r2, #8
 80042e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f838 	bl	800435a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2208      	movs	r2, #8
 80042ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e029      	b.n	8004352 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430c:	d111      	bne.n	8004332 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004316:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f81e 	bl	800435a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e00f      	b.n	8004352 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	69da      	ldr	r2, [r3, #28]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4013      	ands	r3, r2
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	429a      	cmp	r2, r3
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	429a      	cmp	r2, r3
 800434e:	d0a0      	beq.n	8004292 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800435a:	b480      	push	{r7}
 800435c:	b095      	sub	sp, #84	@ 0x54
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436a:	e853 3f00 	ldrex	r3, [r3]
 800436e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004380:	643b      	str	r3, [r7, #64]	@ 0x40
 8004382:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004386:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004388:	e841 2300 	strex	r3, r2, [r1]
 800438c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800438e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1e6      	bne.n	8004362 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3308      	adds	r3, #8
 800439a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e3      	bne.n	8004394 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d118      	bne.n	8004406 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	e853 3f00 	ldrex	r3, [r3]
 80043e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 0310 	bic.w	r3, r3, #16
 80043e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043f2:	61bb      	str	r3, [r7, #24]
 80043f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f6:	6979      	ldr	r1, [r7, #20]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	e841 2300 	strex	r3, r2, [r1]
 80043fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1e6      	bne.n	80043d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800441a:	bf00      	nop
 800441c:	3754      	adds	r7, #84	@ 0x54
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_UARTEx_DisableFifoMode+0x16>
 8004438:	2302      	movs	r3, #2
 800443a:	e027      	b.n	800448c <HAL_UARTEx_DisableFifoMode+0x66>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2224      	movs	r2, #36	@ 0x24
 8004448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800446a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e02d      	b.n	800450c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	@ 0x24
 80044bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f84f 	bl	8004590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2220      	movs	r2, #32
 80044fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004524:	2b01      	cmp	r3, #1
 8004526:	d101      	bne.n	800452c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004528:	2302      	movs	r3, #2
 800452a:	e02d      	b.n	8004588 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	@ 0x24
 8004538:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f811 	bl	8004590 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800459c:	2b00      	cmp	r3, #0
 800459e:	d108      	bne.n	80045b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045b0:	e031      	b.n	8004616 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045b2:	2308      	movs	r3, #8
 80045b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045b6:	2308      	movs	r3, #8
 80045b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	0e5b      	lsrs	r3, r3, #25
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	0f5b      	lsrs	r3, r3, #29
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045da:	7bbb      	ldrb	r3, [r7, #14]
 80045dc:	7b3a      	ldrb	r2, [r7, #12]
 80045de:	4911      	ldr	r1, [pc, #68]	@ (8004624 <UARTEx_SetNbDataToProcess+0x94>)
 80045e0:	5c8a      	ldrb	r2, [r1, r2]
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045e6:	7b3a      	ldrb	r2, [r7, #12]
 80045e8:	490f      	ldr	r1, [pc, #60]	@ (8004628 <UARTEx_SetNbDataToProcess+0x98>)
 80045ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	7b7a      	ldrb	r2, [r7, #13]
 80045fc:	4909      	ldr	r1, [pc, #36]	@ (8004624 <UARTEx_SetNbDataToProcess+0x94>)
 80045fe:	5c8a      	ldrb	r2, [r1, r2]
 8004600:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004604:	7b7a      	ldrb	r2, [r7, #13]
 8004606:	4908      	ldr	r1, [pc, #32]	@ (8004628 <UARTEx_SetNbDataToProcess+0x98>)
 8004608:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800460a:	fb93 f3f2 	sdiv	r3, r3, r2
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	0800501c 	.word	0x0800501c
 8004628:	08005024 	.word	0x08005024

0800462c <siprintf>:
 800462c:	b40e      	push	{r1, r2, r3}
 800462e:	b500      	push	{lr}
 8004630:	b09c      	sub	sp, #112	@ 0x70
 8004632:	ab1d      	add	r3, sp, #116	@ 0x74
 8004634:	9002      	str	r0, [sp, #8]
 8004636:	9006      	str	r0, [sp, #24]
 8004638:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800463c:	4809      	ldr	r0, [pc, #36]	@ (8004664 <siprintf+0x38>)
 800463e:	9107      	str	r1, [sp, #28]
 8004640:	9104      	str	r1, [sp, #16]
 8004642:	4909      	ldr	r1, [pc, #36]	@ (8004668 <siprintf+0x3c>)
 8004644:	f853 2b04 	ldr.w	r2, [r3], #4
 8004648:	9105      	str	r1, [sp, #20]
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	9301      	str	r3, [sp, #4]
 800464e:	a902      	add	r1, sp, #8
 8004650:	f000 f994 	bl	800497c <_svfiprintf_r>
 8004654:	9b02      	ldr	r3, [sp, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	b01c      	add	sp, #112	@ 0x70
 800465c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004660:	b003      	add	sp, #12
 8004662:	4770      	bx	lr
 8004664:	20000014 	.word	0x20000014
 8004668:	ffff0208 	.word	0xffff0208

0800466c <memset>:
 800466c:	4402      	add	r2, r0
 800466e:	4603      	mov	r3, r0
 8004670:	4293      	cmp	r3, r2
 8004672:	d100      	bne.n	8004676 <memset+0xa>
 8004674:	4770      	bx	lr
 8004676:	f803 1b01 	strb.w	r1, [r3], #1
 800467a:	e7f9      	b.n	8004670 <memset+0x4>

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	@ (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000014 	.word	0x20000014

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	@ (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	@ (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	@ (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	@ (80046cc <__libc_init_array+0x44>)
 800469c:	f000 fc66 	bl	8004f6c <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	08005068 	.word	0x08005068
 80046c4:	08005068 	.word	0x08005068
 80046c8:	08005068 	.word	0x08005068
 80046cc:	0800506c 	.word	0x0800506c

080046d0 <__retarget_lock_acquire_recursive>:
 80046d0:	4770      	bx	lr

080046d2 <__retarget_lock_release_recursive>:
 80046d2:	4770      	bx	lr

080046d4 <_free_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4605      	mov	r5, r0
 80046d8:	2900      	cmp	r1, #0
 80046da:	d041      	beq.n	8004760 <_free_r+0x8c>
 80046dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046e0:	1f0c      	subs	r4, r1, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bfb8      	it	lt
 80046e6:	18e4      	addlt	r4, r4, r3
 80046e8:	f000 f8e0 	bl	80048ac <__malloc_lock>
 80046ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004764 <_free_r+0x90>)
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	b933      	cbnz	r3, 8004700 <_free_r+0x2c>
 80046f2:	6063      	str	r3, [r4, #4]
 80046f4:	6014      	str	r4, [r2, #0]
 80046f6:	4628      	mov	r0, r5
 80046f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fc:	f000 b8dc 	b.w	80048b8 <__malloc_unlock>
 8004700:	42a3      	cmp	r3, r4
 8004702:	d908      	bls.n	8004716 <_free_r+0x42>
 8004704:	6820      	ldr	r0, [r4, #0]
 8004706:	1821      	adds	r1, r4, r0
 8004708:	428b      	cmp	r3, r1
 800470a:	bf01      	itttt	eq
 800470c:	6819      	ldreq	r1, [r3, #0]
 800470e:	685b      	ldreq	r3, [r3, #4]
 8004710:	1809      	addeq	r1, r1, r0
 8004712:	6021      	streq	r1, [r4, #0]
 8004714:	e7ed      	b.n	80046f2 <_free_r+0x1e>
 8004716:	461a      	mov	r2, r3
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	b10b      	cbz	r3, 8004720 <_free_r+0x4c>
 800471c:	42a3      	cmp	r3, r4
 800471e:	d9fa      	bls.n	8004716 <_free_r+0x42>
 8004720:	6811      	ldr	r1, [r2, #0]
 8004722:	1850      	adds	r0, r2, r1
 8004724:	42a0      	cmp	r0, r4
 8004726:	d10b      	bne.n	8004740 <_free_r+0x6c>
 8004728:	6820      	ldr	r0, [r4, #0]
 800472a:	4401      	add	r1, r0
 800472c:	1850      	adds	r0, r2, r1
 800472e:	4283      	cmp	r3, r0
 8004730:	6011      	str	r1, [r2, #0]
 8004732:	d1e0      	bne.n	80046f6 <_free_r+0x22>
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	6053      	str	r3, [r2, #4]
 800473a:	4408      	add	r0, r1
 800473c:	6010      	str	r0, [r2, #0]
 800473e:	e7da      	b.n	80046f6 <_free_r+0x22>
 8004740:	d902      	bls.n	8004748 <_free_r+0x74>
 8004742:	230c      	movs	r3, #12
 8004744:	602b      	str	r3, [r5, #0]
 8004746:	e7d6      	b.n	80046f6 <_free_r+0x22>
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	1821      	adds	r1, r4, r0
 800474c:	428b      	cmp	r3, r1
 800474e:	bf04      	itt	eq
 8004750:	6819      	ldreq	r1, [r3, #0]
 8004752:	685b      	ldreq	r3, [r3, #4]
 8004754:	6063      	str	r3, [r4, #4]
 8004756:	bf04      	itt	eq
 8004758:	1809      	addeq	r1, r1, r0
 800475a:	6021      	streq	r1, [r4, #0]
 800475c:	6054      	str	r4, [r2, #4]
 800475e:	e7ca      	b.n	80046f6 <_free_r+0x22>
 8004760:	bd38      	pop	{r3, r4, r5, pc}
 8004762:	bf00      	nop
 8004764:	200003a8 	.word	0x200003a8

08004768 <sbrk_aligned>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4e0f      	ldr	r6, [pc, #60]	@ (80047a8 <sbrk_aligned+0x40>)
 800476c:	460c      	mov	r4, r1
 800476e:	6831      	ldr	r1, [r6, #0]
 8004770:	4605      	mov	r5, r0
 8004772:	b911      	cbnz	r1, 800477a <sbrk_aligned+0x12>
 8004774:	f000 fba6 	bl	8004ec4 <_sbrk_r>
 8004778:	6030      	str	r0, [r6, #0]
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 fba1 	bl	8004ec4 <_sbrk_r>
 8004782:	1c43      	adds	r3, r0, #1
 8004784:	d103      	bne.n	800478e <sbrk_aligned+0x26>
 8004786:	f04f 34ff 	mov.w	r4, #4294967295
 800478a:	4620      	mov	r0, r4
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	1cc4      	adds	r4, r0, #3
 8004790:	f024 0403 	bic.w	r4, r4, #3
 8004794:	42a0      	cmp	r0, r4
 8004796:	d0f8      	beq.n	800478a <sbrk_aligned+0x22>
 8004798:	1a21      	subs	r1, r4, r0
 800479a:	4628      	mov	r0, r5
 800479c:	f000 fb92 	bl	8004ec4 <_sbrk_r>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d1f2      	bne.n	800478a <sbrk_aligned+0x22>
 80047a4:	e7ef      	b.n	8004786 <sbrk_aligned+0x1e>
 80047a6:	bf00      	nop
 80047a8:	200003a4 	.word	0x200003a4

080047ac <_malloc_r>:
 80047ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b0:	1ccd      	adds	r5, r1, #3
 80047b2:	f025 0503 	bic.w	r5, r5, #3
 80047b6:	3508      	adds	r5, #8
 80047b8:	2d0c      	cmp	r5, #12
 80047ba:	bf38      	it	cc
 80047bc:	250c      	movcc	r5, #12
 80047be:	2d00      	cmp	r5, #0
 80047c0:	4606      	mov	r6, r0
 80047c2:	db01      	blt.n	80047c8 <_malloc_r+0x1c>
 80047c4:	42a9      	cmp	r1, r5
 80047c6:	d904      	bls.n	80047d2 <_malloc_r+0x26>
 80047c8:	230c      	movs	r3, #12
 80047ca:	6033      	str	r3, [r6, #0]
 80047cc:	2000      	movs	r0, #0
 80047ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048a8 <_malloc_r+0xfc>
 80047d6:	f000 f869 	bl	80048ac <__malloc_lock>
 80047da:	f8d8 3000 	ldr.w	r3, [r8]
 80047de:	461c      	mov	r4, r3
 80047e0:	bb44      	cbnz	r4, 8004834 <_malloc_r+0x88>
 80047e2:	4629      	mov	r1, r5
 80047e4:	4630      	mov	r0, r6
 80047e6:	f7ff ffbf 	bl	8004768 <sbrk_aligned>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	4604      	mov	r4, r0
 80047ee:	d158      	bne.n	80048a2 <_malloc_r+0xf6>
 80047f0:	f8d8 4000 	ldr.w	r4, [r8]
 80047f4:	4627      	mov	r7, r4
 80047f6:	2f00      	cmp	r7, #0
 80047f8:	d143      	bne.n	8004882 <_malloc_r+0xd6>
 80047fa:	2c00      	cmp	r4, #0
 80047fc:	d04b      	beq.n	8004896 <_malloc_r+0xea>
 80047fe:	6823      	ldr	r3, [r4, #0]
 8004800:	4639      	mov	r1, r7
 8004802:	4630      	mov	r0, r6
 8004804:	eb04 0903 	add.w	r9, r4, r3
 8004808:	f000 fb5c 	bl	8004ec4 <_sbrk_r>
 800480c:	4581      	cmp	r9, r0
 800480e:	d142      	bne.n	8004896 <_malloc_r+0xea>
 8004810:	6821      	ldr	r1, [r4, #0]
 8004812:	1a6d      	subs	r5, r5, r1
 8004814:	4629      	mov	r1, r5
 8004816:	4630      	mov	r0, r6
 8004818:	f7ff ffa6 	bl	8004768 <sbrk_aligned>
 800481c:	3001      	adds	r0, #1
 800481e:	d03a      	beq.n	8004896 <_malloc_r+0xea>
 8004820:	6823      	ldr	r3, [r4, #0]
 8004822:	442b      	add	r3, r5
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	f8d8 3000 	ldr.w	r3, [r8]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	bb62      	cbnz	r2, 8004888 <_malloc_r+0xdc>
 800482e:	f8c8 7000 	str.w	r7, [r8]
 8004832:	e00f      	b.n	8004854 <_malloc_r+0xa8>
 8004834:	6822      	ldr	r2, [r4, #0]
 8004836:	1b52      	subs	r2, r2, r5
 8004838:	d420      	bmi.n	800487c <_malloc_r+0xd0>
 800483a:	2a0b      	cmp	r2, #11
 800483c:	d917      	bls.n	800486e <_malloc_r+0xc2>
 800483e:	1961      	adds	r1, r4, r5
 8004840:	42a3      	cmp	r3, r4
 8004842:	6025      	str	r5, [r4, #0]
 8004844:	bf18      	it	ne
 8004846:	6059      	strne	r1, [r3, #4]
 8004848:	6863      	ldr	r3, [r4, #4]
 800484a:	bf08      	it	eq
 800484c:	f8c8 1000 	streq.w	r1, [r8]
 8004850:	5162      	str	r2, [r4, r5]
 8004852:	604b      	str	r3, [r1, #4]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f82f 	bl	80048b8 <__malloc_unlock>
 800485a:	f104 000b 	add.w	r0, r4, #11
 800485e:	1d23      	adds	r3, r4, #4
 8004860:	f020 0007 	bic.w	r0, r0, #7
 8004864:	1ac2      	subs	r2, r0, r3
 8004866:	bf1c      	itt	ne
 8004868:	1a1b      	subne	r3, r3, r0
 800486a:	50a3      	strne	r3, [r4, r2]
 800486c:	e7af      	b.n	80047ce <_malloc_r+0x22>
 800486e:	6862      	ldr	r2, [r4, #4]
 8004870:	42a3      	cmp	r3, r4
 8004872:	bf0c      	ite	eq
 8004874:	f8c8 2000 	streq.w	r2, [r8]
 8004878:	605a      	strne	r2, [r3, #4]
 800487a:	e7eb      	b.n	8004854 <_malloc_r+0xa8>
 800487c:	4623      	mov	r3, r4
 800487e:	6864      	ldr	r4, [r4, #4]
 8004880:	e7ae      	b.n	80047e0 <_malloc_r+0x34>
 8004882:	463c      	mov	r4, r7
 8004884:	687f      	ldr	r7, [r7, #4]
 8004886:	e7b6      	b.n	80047f6 <_malloc_r+0x4a>
 8004888:	461a      	mov	r2, r3
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	d1fb      	bne.n	8004888 <_malloc_r+0xdc>
 8004890:	2300      	movs	r3, #0
 8004892:	6053      	str	r3, [r2, #4]
 8004894:	e7de      	b.n	8004854 <_malloc_r+0xa8>
 8004896:	230c      	movs	r3, #12
 8004898:	6033      	str	r3, [r6, #0]
 800489a:	4630      	mov	r0, r6
 800489c:	f000 f80c 	bl	80048b8 <__malloc_unlock>
 80048a0:	e794      	b.n	80047cc <_malloc_r+0x20>
 80048a2:	6005      	str	r5, [r0, #0]
 80048a4:	e7d6      	b.n	8004854 <_malloc_r+0xa8>
 80048a6:	bf00      	nop
 80048a8:	200003a8 	.word	0x200003a8

080048ac <__malloc_lock>:
 80048ac:	4801      	ldr	r0, [pc, #4]	@ (80048b4 <__malloc_lock+0x8>)
 80048ae:	f7ff bf0f 	b.w	80046d0 <__retarget_lock_acquire_recursive>
 80048b2:	bf00      	nop
 80048b4:	200003a0 	.word	0x200003a0

080048b8 <__malloc_unlock>:
 80048b8:	4801      	ldr	r0, [pc, #4]	@ (80048c0 <__malloc_unlock+0x8>)
 80048ba:	f7ff bf0a 	b.w	80046d2 <__retarget_lock_release_recursive>
 80048be:	bf00      	nop
 80048c0:	200003a0 	.word	0x200003a0

080048c4 <__ssputs_r>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	688e      	ldr	r6, [r1, #8]
 80048ca:	461f      	mov	r7, r3
 80048cc:	42be      	cmp	r6, r7
 80048ce:	680b      	ldr	r3, [r1, #0]
 80048d0:	4682      	mov	sl, r0
 80048d2:	460c      	mov	r4, r1
 80048d4:	4690      	mov	r8, r2
 80048d6:	d82d      	bhi.n	8004934 <__ssputs_r+0x70>
 80048d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048e0:	d026      	beq.n	8004930 <__ssputs_r+0x6c>
 80048e2:	6965      	ldr	r5, [r4, #20]
 80048e4:	6909      	ldr	r1, [r1, #16]
 80048e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048ea:	eba3 0901 	sub.w	r9, r3, r1
 80048ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048f2:	1c7b      	adds	r3, r7, #1
 80048f4:	444b      	add	r3, r9
 80048f6:	106d      	asrs	r5, r5, #1
 80048f8:	429d      	cmp	r5, r3
 80048fa:	bf38      	it	cc
 80048fc:	461d      	movcc	r5, r3
 80048fe:	0553      	lsls	r3, r2, #21
 8004900:	d527      	bpl.n	8004952 <__ssputs_r+0x8e>
 8004902:	4629      	mov	r1, r5
 8004904:	f7ff ff52 	bl	80047ac <_malloc_r>
 8004908:	4606      	mov	r6, r0
 800490a:	b360      	cbz	r0, 8004966 <__ssputs_r+0xa2>
 800490c:	6921      	ldr	r1, [r4, #16]
 800490e:	464a      	mov	r2, r9
 8004910:	f000 fae8 	bl	8004ee4 <memcpy>
 8004914:	89a3      	ldrh	r3, [r4, #12]
 8004916:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800491a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800491e:	81a3      	strh	r3, [r4, #12]
 8004920:	6126      	str	r6, [r4, #16]
 8004922:	6165      	str	r5, [r4, #20]
 8004924:	444e      	add	r6, r9
 8004926:	eba5 0509 	sub.w	r5, r5, r9
 800492a:	6026      	str	r6, [r4, #0]
 800492c:	60a5      	str	r5, [r4, #8]
 800492e:	463e      	mov	r6, r7
 8004930:	42be      	cmp	r6, r7
 8004932:	d900      	bls.n	8004936 <__ssputs_r+0x72>
 8004934:	463e      	mov	r6, r7
 8004936:	6820      	ldr	r0, [r4, #0]
 8004938:	4632      	mov	r2, r6
 800493a:	4641      	mov	r1, r8
 800493c:	f000 faa8 	bl	8004e90 <memmove>
 8004940:	68a3      	ldr	r3, [r4, #8]
 8004942:	1b9b      	subs	r3, r3, r6
 8004944:	60a3      	str	r3, [r4, #8]
 8004946:	6823      	ldr	r3, [r4, #0]
 8004948:	4433      	add	r3, r6
 800494a:	6023      	str	r3, [r4, #0]
 800494c:	2000      	movs	r0, #0
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004952:	462a      	mov	r2, r5
 8004954:	f000 fad4 	bl	8004f00 <_realloc_r>
 8004958:	4606      	mov	r6, r0
 800495a:	2800      	cmp	r0, #0
 800495c:	d1e0      	bne.n	8004920 <__ssputs_r+0x5c>
 800495e:	6921      	ldr	r1, [r4, #16]
 8004960:	4650      	mov	r0, sl
 8004962:	f7ff feb7 	bl	80046d4 <_free_r>
 8004966:	230c      	movs	r3, #12
 8004968:	f8ca 3000 	str.w	r3, [sl]
 800496c:	89a3      	ldrh	r3, [r4, #12]
 800496e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004972:	81a3      	strh	r3, [r4, #12]
 8004974:	f04f 30ff 	mov.w	r0, #4294967295
 8004978:	e7e9      	b.n	800494e <__ssputs_r+0x8a>
	...

0800497c <_svfiprintf_r>:
 800497c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	4698      	mov	r8, r3
 8004982:	898b      	ldrh	r3, [r1, #12]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	b09d      	sub	sp, #116	@ 0x74
 8004988:	4607      	mov	r7, r0
 800498a:	460d      	mov	r5, r1
 800498c:	4614      	mov	r4, r2
 800498e:	d510      	bpl.n	80049b2 <_svfiprintf_r+0x36>
 8004990:	690b      	ldr	r3, [r1, #16]
 8004992:	b973      	cbnz	r3, 80049b2 <_svfiprintf_r+0x36>
 8004994:	2140      	movs	r1, #64	@ 0x40
 8004996:	f7ff ff09 	bl	80047ac <_malloc_r>
 800499a:	6028      	str	r0, [r5, #0]
 800499c:	6128      	str	r0, [r5, #16]
 800499e:	b930      	cbnz	r0, 80049ae <_svfiprintf_r+0x32>
 80049a0:	230c      	movs	r3, #12
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	f04f 30ff 	mov.w	r0, #4294967295
 80049a8:	b01d      	add	sp, #116	@ 0x74
 80049aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ae:	2340      	movs	r3, #64	@ 0x40
 80049b0:	616b      	str	r3, [r5, #20]
 80049b2:	2300      	movs	r3, #0
 80049b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049b6:	2320      	movs	r3, #32
 80049b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80049c0:	2330      	movs	r3, #48	@ 0x30
 80049c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b60 <_svfiprintf_r+0x1e4>
 80049c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ca:	f04f 0901 	mov.w	r9, #1
 80049ce:	4623      	mov	r3, r4
 80049d0:	469a      	mov	sl, r3
 80049d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049d6:	b10a      	cbz	r2, 80049dc <_svfiprintf_r+0x60>
 80049d8:	2a25      	cmp	r2, #37	@ 0x25
 80049da:	d1f9      	bne.n	80049d0 <_svfiprintf_r+0x54>
 80049dc:	ebba 0b04 	subs.w	fp, sl, r4
 80049e0:	d00b      	beq.n	80049fa <_svfiprintf_r+0x7e>
 80049e2:	465b      	mov	r3, fp
 80049e4:	4622      	mov	r2, r4
 80049e6:	4629      	mov	r1, r5
 80049e8:	4638      	mov	r0, r7
 80049ea:	f7ff ff6b 	bl	80048c4 <__ssputs_r>
 80049ee:	3001      	adds	r0, #1
 80049f0:	f000 80a7 	beq.w	8004b42 <_svfiprintf_r+0x1c6>
 80049f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f6:	445a      	add	r2, fp
 80049f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80049fa:	f89a 3000 	ldrb.w	r3, [sl]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	f000 809f 	beq.w	8004b42 <_svfiprintf_r+0x1c6>
 8004a04:	2300      	movs	r3, #0
 8004a06:	f04f 32ff 	mov.w	r2, #4294967295
 8004a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a0e:	f10a 0a01 	add.w	sl, sl, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	9307      	str	r3, [sp, #28]
 8004a16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a1c:	4654      	mov	r4, sl
 8004a1e:	2205      	movs	r2, #5
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	484e      	ldr	r0, [pc, #312]	@ (8004b60 <_svfiprintf_r+0x1e4>)
 8004a26:	f7fb fc03 	bl	8000230 <memchr>
 8004a2a:	9a04      	ldr	r2, [sp, #16]
 8004a2c:	b9d8      	cbnz	r0, 8004a66 <_svfiprintf_r+0xea>
 8004a2e:	06d0      	lsls	r0, r2, #27
 8004a30:	bf44      	itt	mi
 8004a32:	2320      	movmi	r3, #32
 8004a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a38:	0711      	lsls	r1, r2, #28
 8004a3a:	bf44      	itt	mi
 8004a3c:	232b      	movmi	r3, #43	@ 0x2b
 8004a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a42:	f89a 3000 	ldrb.w	r3, [sl]
 8004a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a48:	d015      	beq.n	8004a76 <_svfiprintf_r+0xfa>
 8004a4a:	9a07      	ldr	r2, [sp, #28]
 8004a4c:	4654      	mov	r4, sl
 8004a4e:	2000      	movs	r0, #0
 8004a50:	f04f 0c0a 	mov.w	ip, #10
 8004a54:	4621      	mov	r1, r4
 8004a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5a:	3b30      	subs	r3, #48	@ 0x30
 8004a5c:	2b09      	cmp	r3, #9
 8004a5e:	d94b      	bls.n	8004af8 <_svfiprintf_r+0x17c>
 8004a60:	b1b0      	cbz	r0, 8004a90 <_svfiprintf_r+0x114>
 8004a62:	9207      	str	r2, [sp, #28]
 8004a64:	e014      	b.n	8004a90 <_svfiprintf_r+0x114>
 8004a66:	eba0 0308 	sub.w	r3, r0, r8
 8004a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	46a2      	mov	sl, r4
 8004a74:	e7d2      	b.n	8004a1c <_svfiprintf_r+0xa0>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	1d19      	adds	r1, r3, #4
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	9103      	str	r1, [sp, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfbb      	ittet	lt
 8004a82:	425b      	neglt	r3, r3
 8004a84:	f042 0202 	orrlt.w	r2, r2, #2
 8004a88:	9307      	strge	r3, [sp, #28]
 8004a8a:	9307      	strlt	r3, [sp, #28]
 8004a8c:	bfb8      	it	lt
 8004a8e:	9204      	strlt	r2, [sp, #16]
 8004a90:	7823      	ldrb	r3, [r4, #0]
 8004a92:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a94:	d10a      	bne.n	8004aac <_svfiprintf_r+0x130>
 8004a96:	7863      	ldrb	r3, [r4, #1]
 8004a98:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a9a:	d132      	bne.n	8004b02 <_svfiprintf_r+0x186>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	1d1a      	adds	r2, r3, #4
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	9203      	str	r2, [sp, #12]
 8004aa4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004aa8:	3402      	adds	r4, #2
 8004aaa:	9305      	str	r3, [sp, #20]
 8004aac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b70 <_svfiprintf_r+0x1f4>
 8004ab0:	7821      	ldrb	r1, [r4, #0]
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	4650      	mov	r0, sl
 8004ab6:	f7fb fbbb 	bl	8000230 <memchr>
 8004aba:	b138      	cbz	r0, 8004acc <_svfiprintf_r+0x150>
 8004abc:	9b04      	ldr	r3, [sp, #16]
 8004abe:	eba0 000a 	sub.w	r0, r0, sl
 8004ac2:	2240      	movs	r2, #64	@ 0x40
 8004ac4:	4082      	lsls	r2, r0
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	3401      	adds	r4, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	4824      	ldr	r0, [pc, #144]	@ (8004b64 <_svfiprintf_r+0x1e8>)
 8004ad2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ad6:	2206      	movs	r2, #6
 8004ad8:	f7fb fbaa 	bl	8000230 <memchr>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d036      	beq.n	8004b4e <_svfiprintf_r+0x1d2>
 8004ae0:	4b21      	ldr	r3, [pc, #132]	@ (8004b68 <_svfiprintf_r+0x1ec>)
 8004ae2:	bb1b      	cbnz	r3, 8004b2c <_svfiprintf_r+0x1b0>
 8004ae4:	9b03      	ldr	r3, [sp, #12]
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	3308      	adds	r3, #8
 8004aee:	9303      	str	r3, [sp, #12]
 8004af0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004af2:	4433      	add	r3, r6
 8004af4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004af6:	e76a      	b.n	80049ce <_svfiprintf_r+0x52>
 8004af8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004afc:	460c      	mov	r4, r1
 8004afe:	2001      	movs	r0, #1
 8004b00:	e7a8      	b.n	8004a54 <_svfiprintf_r+0xd8>
 8004b02:	2300      	movs	r3, #0
 8004b04:	3401      	adds	r4, #1
 8004b06:	9305      	str	r3, [sp, #20]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f04f 0c0a 	mov.w	ip, #10
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b14:	3a30      	subs	r2, #48	@ 0x30
 8004b16:	2a09      	cmp	r2, #9
 8004b18:	d903      	bls.n	8004b22 <_svfiprintf_r+0x1a6>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0c6      	beq.n	8004aac <_svfiprintf_r+0x130>
 8004b1e:	9105      	str	r1, [sp, #20]
 8004b20:	e7c4      	b.n	8004aac <_svfiprintf_r+0x130>
 8004b22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b26:	4604      	mov	r4, r0
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e7f0      	b.n	8004b0e <_svfiprintf_r+0x192>
 8004b2c:	ab03      	add	r3, sp, #12
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	462a      	mov	r2, r5
 8004b32:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <_svfiprintf_r+0x1f0>)
 8004b34:	a904      	add	r1, sp, #16
 8004b36:	4638      	mov	r0, r7
 8004b38:	f3af 8000 	nop.w
 8004b3c:	1c42      	adds	r2, r0, #1
 8004b3e:	4606      	mov	r6, r0
 8004b40:	d1d6      	bne.n	8004af0 <_svfiprintf_r+0x174>
 8004b42:	89ab      	ldrh	r3, [r5, #12]
 8004b44:	065b      	lsls	r3, r3, #25
 8004b46:	f53f af2d 	bmi.w	80049a4 <_svfiprintf_r+0x28>
 8004b4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b4c:	e72c      	b.n	80049a8 <_svfiprintf_r+0x2c>
 8004b4e:	ab03      	add	r3, sp, #12
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	462a      	mov	r2, r5
 8004b54:	4b05      	ldr	r3, [pc, #20]	@ (8004b6c <_svfiprintf_r+0x1f0>)
 8004b56:	a904      	add	r1, sp, #16
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f000 f879 	bl	8004c50 <_printf_i>
 8004b5e:	e7ed      	b.n	8004b3c <_svfiprintf_r+0x1c0>
 8004b60:	0800502c 	.word	0x0800502c
 8004b64:	08005036 	.word	0x08005036
 8004b68:	00000000 	.word	0x00000000
 8004b6c:	080048c5 	.word	0x080048c5
 8004b70:	08005032 	.word	0x08005032

08004b74 <_printf_common>:
 8004b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b78:	4616      	mov	r6, r2
 8004b7a:	4698      	mov	r8, r3
 8004b7c:	688a      	ldr	r2, [r1, #8]
 8004b7e:	690b      	ldr	r3, [r1, #16]
 8004b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bfb8      	it	lt
 8004b88:	4613      	movlt	r3, r2
 8004b8a:	6033      	str	r3, [r6, #0]
 8004b8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b90:	4607      	mov	r7, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	b10a      	cbz	r2, 8004b9a <_printf_common+0x26>
 8004b96:	3301      	adds	r3, #1
 8004b98:	6033      	str	r3, [r6, #0]
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	0699      	lsls	r1, r3, #26
 8004b9e:	bf42      	ittt	mi
 8004ba0:	6833      	ldrmi	r3, [r6, #0]
 8004ba2:	3302      	addmi	r3, #2
 8004ba4:	6033      	strmi	r3, [r6, #0]
 8004ba6:	6825      	ldr	r5, [r4, #0]
 8004ba8:	f015 0506 	ands.w	r5, r5, #6
 8004bac:	d106      	bne.n	8004bbc <_printf_common+0x48>
 8004bae:	f104 0a19 	add.w	sl, r4, #25
 8004bb2:	68e3      	ldr	r3, [r4, #12]
 8004bb4:	6832      	ldr	r2, [r6, #0]
 8004bb6:	1a9b      	subs	r3, r3, r2
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	dc26      	bgt.n	8004c0a <_printf_common+0x96>
 8004bbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bc0:	6822      	ldr	r2, [r4, #0]
 8004bc2:	3b00      	subs	r3, #0
 8004bc4:	bf18      	it	ne
 8004bc6:	2301      	movne	r3, #1
 8004bc8:	0692      	lsls	r2, r2, #26
 8004bca:	d42b      	bmi.n	8004c24 <_printf_common+0xb0>
 8004bcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	4638      	mov	r0, r7
 8004bd4:	47c8      	blx	r9
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d01e      	beq.n	8004c18 <_printf_common+0xa4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	6922      	ldr	r2, [r4, #16]
 8004bde:	f003 0306 	and.w	r3, r3, #6
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	bf02      	ittt	eq
 8004be6:	68e5      	ldreq	r5, [r4, #12]
 8004be8:	6833      	ldreq	r3, [r6, #0]
 8004bea:	1aed      	subeq	r5, r5, r3
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	bf0c      	ite	eq
 8004bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bf4:	2500      	movne	r5, #0
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	bfc4      	itt	gt
 8004bfa:	1a9b      	subgt	r3, r3, r2
 8004bfc:	18ed      	addgt	r5, r5, r3
 8004bfe:	2600      	movs	r6, #0
 8004c00:	341a      	adds	r4, #26
 8004c02:	42b5      	cmp	r5, r6
 8004c04:	d11a      	bne.n	8004c3c <_printf_common+0xc8>
 8004c06:	2000      	movs	r0, #0
 8004c08:	e008      	b.n	8004c1c <_printf_common+0xa8>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4641      	mov	r1, r8
 8004c10:	4638      	mov	r0, r7
 8004c12:	47c8      	blx	r9
 8004c14:	3001      	adds	r0, #1
 8004c16:	d103      	bne.n	8004c20 <_printf_common+0xac>
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c20:	3501      	adds	r5, #1
 8004c22:	e7c6      	b.n	8004bb2 <_printf_common+0x3e>
 8004c24:	18e1      	adds	r1, r4, r3
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	2030      	movs	r0, #48	@ 0x30
 8004c2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c2e:	4422      	add	r2, r4
 8004c30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c38:	3302      	adds	r3, #2
 8004c3a:	e7c7      	b.n	8004bcc <_printf_common+0x58>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	4622      	mov	r2, r4
 8004c40:	4641      	mov	r1, r8
 8004c42:	4638      	mov	r0, r7
 8004c44:	47c8      	blx	r9
 8004c46:	3001      	adds	r0, #1
 8004c48:	d0e6      	beq.n	8004c18 <_printf_common+0xa4>
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7d9      	b.n	8004c02 <_printf_common+0x8e>
	...

08004c50 <_printf_i>:
 8004c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c54:	7e0f      	ldrb	r7, [r1, #24]
 8004c56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c58:	2f78      	cmp	r7, #120	@ 0x78
 8004c5a:	4691      	mov	r9, r2
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	469a      	mov	sl, r3
 8004c62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c66:	d807      	bhi.n	8004c78 <_printf_i+0x28>
 8004c68:	2f62      	cmp	r7, #98	@ 0x62
 8004c6a:	d80a      	bhi.n	8004c82 <_printf_i+0x32>
 8004c6c:	2f00      	cmp	r7, #0
 8004c6e:	f000 80d2 	beq.w	8004e16 <_printf_i+0x1c6>
 8004c72:	2f58      	cmp	r7, #88	@ 0x58
 8004c74:	f000 80b9 	beq.w	8004dea <_printf_i+0x19a>
 8004c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c80:	e03a      	b.n	8004cf8 <_printf_i+0xa8>
 8004c82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c86:	2b15      	cmp	r3, #21
 8004c88:	d8f6      	bhi.n	8004c78 <_printf_i+0x28>
 8004c8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004c90 <_printf_i+0x40>)
 8004c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c90:	08004ce9 	.word	0x08004ce9
 8004c94:	08004cfd 	.word	0x08004cfd
 8004c98:	08004c79 	.word	0x08004c79
 8004c9c:	08004c79 	.word	0x08004c79
 8004ca0:	08004c79 	.word	0x08004c79
 8004ca4:	08004c79 	.word	0x08004c79
 8004ca8:	08004cfd 	.word	0x08004cfd
 8004cac:	08004c79 	.word	0x08004c79
 8004cb0:	08004c79 	.word	0x08004c79
 8004cb4:	08004c79 	.word	0x08004c79
 8004cb8:	08004c79 	.word	0x08004c79
 8004cbc:	08004dfd 	.word	0x08004dfd
 8004cc0:	08004d27 	.word	0x08004d27
 8004cc4:	08004db7 	.word	0x08004db7
 8004cc8:	08004c79 	.word	0x08004c79
 8004ccc:	08004c79 	.word	0x08004c79
 8004cd0:	08004e1f 	.word	0x08004e1f
 8004cd4:	08004c79 	.word	0x08004c79
 8004cd8:	08004d27 	.word	0x08004d27
 8004cdc:	08004c79 	.word	0x08004c79
 8004ce0:	08004c79 	.word	0x08004c79
 8004ce4:	08004dbf 	.word	0x08004dbf
 8004ce8:	6833      	ldr	r3, [r6, #0]
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6032      	str	r2, [r6, #0]
 8004cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e09d      	b.n	8004e38 <_printf_i+0x1e8>
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	1d19      	adds	r1, r3, #4
 8004d02:	6031      	str	r1, [r6, #0]
 8004d04:	0606      	lsls	r6, r0, #24
 8004d06:	d501      	bpl.n	8004d0c <_printf_i+0xbc>
 8004d08:	681d      	ldr	r5, [r3, #0]
 8004d0a:	e003      	b.n	8004d14 <_printf_i+0xc4>
 8004d0c:	0645      	lsls	r5, r0, #25
 8004d0e:	d5fb      	bpl.n	8004d08 <_printf_i+0xb8>
 8004d10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	da03      	bge.n	8004d20 <_printf_i+0xd0>
 8004d18:	232d      	movs	r3, #45	@ 0x2d
 8004d1a:	426d      	negs	r5, r5
 8004d1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d20:	4859      	ldr	r0, [pc, #356]	@ (8004e88 <_printf_i+0x238>)
 8004d22:	230a      	movs	r3, #10
 8004d24:	e011      	b.n	8004d4a <_printf_i+0xfa>
 8004d26:	6821      	ldr	r1, [r4, #0]
 8004d28:	6833      	ldr	r3, [r6, #0]
 8004d2a:	0608      	lsls	r0, r1, #24
 8004d2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d30:	d402      	bmi.n	8004d38 <_printf_i+0xe8>
 8004d32:	0649      	lsls	r1, r1, #25
 8004d34:	bf48      	it	mi
 8004d36:	b2ad      	uxthmi	r5, r5
 8004d38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d3a:	4853      	ldr	r0, [pc, #332]	@ (8004e88 <_printf_i+0x238>)
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	bf14      	ite	ne
 8004d40:	230a      	movne	r3, #10
 8004d42:	2308      	moveq	r3, #8
 8004d44:	2100      	movs	r1, #0
 8004d46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d4a:	6866      	ldr	r6, [r4, #4]
 8004d4c:	60a6      	str	r6, [r4, #8]
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	bfa2      	ittt	ge
 8004d52:	6821      	ldrge	r1, [r4, #0]
 8004d54:	f021 0104 	bicge.w	r1, r1, #4
 8004d58:	6021      	strge	r1, [r4, #0]
 8004d5a:	b90d      	cbnz	r5, 8004d60 <_printf_i+0x110>
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	d04b      	beq.n	8004df8 <_printf_i+0x1a8>
 8004d60:	4616      	mov	r6, r2
 8004d62:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d66:	fb03 5711 	mls	r7, r3, r1, r5
 8004d6a:	5dc7      	ldrb	r7, [r0, r7]
 8004d6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d70:	462f      	mov	r7, r5
 8004d72:	42bb      	cmp	r3, r7
 8004d74:	460d      	mov	r5, r1
 8004d76:	d9f4      	bls.n	8004d62 <_printf_i+0x112>
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d10b      	bne.n	8004d94 <_printf_i+0x144>
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	07df      	lsls	r7, r3, #31
 8004d80:	d508      	bpl.n	8004d94 <_printf_i+0x144>
 8004d82:	6923      	ldr	r3, [r4, #16]
 8004d84:	6861      	ldr	r1, [r4, #4]
 8004d86:	4299      	cmp	r1, r3
 8004d88:	bfde      	ittt	le
 8004d8a:	2330      	movle	r3, #48	@ 0x30
 8004d8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d94:	1b92      	subs	r2, r2, r6
 8004d96:	6122      	str	r2, [r4, #16]
 8004d98:	f8cd a000 	str.w	sl, [sp]
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	aa03      	add	r2, sp, #12
 8004da0:	4621      	mov	r1, r4
 8004da2:	4640      	mov	r0, r8
 8004da4:	f7ff fee6 	bl	8004b74 <_printf_common>
 8004da8:	3001      	adds	r0, #1
 8004daa:	d14a      	bne.n	8004e42 <_printf_i+0x1f2>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	b004      	add	sp, #16
 8004db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	f043 0320 	orr.w	r3, r3, #32
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	4833      	ldr	r0, [pc, #204]	@ (8004e8c <_printf_i+0x23c>)
 8004dc0:	2778      	movs	r7, #120	@ 0x78
 8004dc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	6831      	ldr	r1, [r6, #0]
 8004dca:	061f      	lsls	r7, r3, #24
 8004dcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dd0:	d402      	bmi.n	8004dd8 <_printf_i+0x188>
 8004dd2:	065f      	lsls	r7, r3, #25
 8004dd4:	bf48      	it	mi
 8004dd6:	b2ad      	uxthmi	r5, r5
 8004dd8:	6031      	str	r1, [r6, #0]
 8004dda:	07d9      	lsls	r1, r3, #31
 8004ddc:	bf44      	itt	mi
 8004dde:	f043 0320 	orrmi.w	r3, r3, #32
 8004de2:	6023      	strmi	r3, [r4, #0]
 8004de4:	b11d      	cbz	r5, 8004dee <_printf_i+0x19e>
 8004de6:	2310      	movs	r3, #16
 8004de8:	e7ac      	b.n	8004d44 <_printf_i+0xf4>
 8004dea:	4827      	ldr	r0, [pc, #156]	@ (8004e88 <_printf_i+0x238>)
 8004dec:	e7e9      	b.n	8004dc2 <_printf_i+0x172>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f023 0320 	bic.w	r3, r3, #32
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	e7f6      	b.n	8004de6 <_printf_i+0x196>
 8004df8:	4616      	mov	r6, r2
 8004dfa:	e7bd      	b.n	8004d78 <_printf_i+0x128>
 8004dfc:	6833      	ldr	r3, [r6, #0]
 8004dfe:	6825      	ldr	r5, [r4, #0]
 8004e00:	6961      	ldr	r1, [r4, #20]
 8004e02:	1d18      	adds	r0, r3, #4
 8004e04:	6030      	str	r0, [r6, #0]
 8004e06:	062e      	lsls	r6, r5, #24
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	d501      	bpl.n	8004e10 <_printf_i+0x1c0>
 8004e0c:	6019      	str	r1, [r3, #0]
 8004e0e:	e002      	b.n	8004e16 <_printf_i+0x1c6>
 8004e10:	0668      	lsls	r0, r5, #25
 8004e12:	d5fb      	bpl.n	8004e0c <_printf_i+0x1bc>
 8004e14:	8019      	strh	r1, [r3, #0]
 8004e16:	2300      	movs	r3, #0
 8004e18:	6123      	str	r3, [r4, #16]
 8004e1a:	4616      	mov	r6, r2
 8004e1c:	e7bc      	b.n	8004d98 <_printf_i+0x148>
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	1d1a      	adds	r2, r3, #4
 8004e22:	6032      	str	r2, [r6, #0]
 8004e24:	681e      	ldr	r6, [r3, #0]
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f7fb fa00 	bl	8000230 <memchr>
 8004e30:	b108      	cbz	r0, 8004e36 <_printf_i+0x1e6>
 8004e32:	1b80      	subs	r0, r0, r6
 8004e34:	6060      	str	r0, [r4, #4]
 8004e36:	6863      	ldr	r3, [r4, #4]
 8004e38:	6123      	str	r3, [r4, #16]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e40:	e7aa      	b.n	8004d98 <_printf_i+0x148>
 8004e42:	6923      	ldr	r3, [r4, #16]
 8004e44:	4632      	mov	r2, r6
 8004e46:	4649      	mov	r1, r9
 8004e48:	4640      	mov	r0, r8
 8004e4a:	47d0      	blx	sl
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d0ad      	beq.n	8004dac <_printf_i+0x15c>
 8004e50:	6823      	ldr	r3, [r4, #0]
 8004e52:	079b      	lsls	r3, r3, #30
 8004e54:	d413      	bmi.n	8004e7e <_printf_i+0x22e>
 8004e56:	68e0      	ldr	r0, [r4, #12]
 8004e58:	9b03      	ldr	r3, [sp, #12]
 8004e5a:	4298      	cmp	r0, r3
 8004e5c:	bfb8      	it	lt
 8004e5e:	4618      	movlt	r0, r3
 8004e60:	e7a6      	b.n	8004db0 <_printf_i+0x160>
 8004e62:	2301      	movs	r3, #1
 8004e64:	4632      	mov	r2, r6
 8004e66:	4649      	mov	r1, r9
 8004e68:	4640      	mov	r0, r8
 8004e6a:	47d0      	blx	sl
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	d09d      	beq.n	8004dac <_printf_i+0x15c>
 8004e70:	3501      	adds	r5, #1
 8004e72:	68e3      	ldr	r3, [r4, #12]
 8004e74:	9903      	ldr	r1, [sp, #12]
 8004e76:	1a5b      	subs	r3, r3, r1
 8004e78:	42ab      	cmp	r3, r5
 8004e7a:	dcf2      	bgt.n	8004e62 <_printf_i+0x212>
 8004e7c:	e7eb      	b.n	8004e56 <_printf_i+0x206>
 8004e7e:	2500      	movs	r5, #0
 8004e80:	f104 0619 	add.w	r6, r4, #25
 8004e84:	e7f5      	b.n	8004e72 <_printf_i+0x222>
 8004e86:	bf00      	nop
 8004e88:	0800503d 	.word	0x0800503d
 8004e8c:	0800504e 	.word	0x0800504e

08004e90 <memmove>:
 8004e90:	4288      	cmp	r0, r1
 8004e92:	b510      	push	{r4, lr}
 8004e94:	eb01 0402 	add.w	r4, r1, r2
 8004e98:	d902      	bls.n	8004ea0 <memmove+0x10>
 8004e9a:	4284      	cmp	r4, r0
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	d807      	bhi.n	8004eb0 <memmove+0x20>
 8004ea0:	1e43      	subs	r3, r0, #1
 8004ea2:	42a1      	cmp	r1, r4
 8004ea4:	d008      	beq.n	8004eb8 <memmove+0x28>
 8004ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eae:	e7f8      	b.n	8004ea2 <memmove+0x12>
 8004eb0:	4402      	add	r2, r0
 8004eb2:	4601      	mov	r1, r0
 8004eb4:	428a      	cmp	r2, r1
 8004eb6:	d100      	bne.n	8004eba <memmove+0x2a>
 8004eb8:	bd10      	pop	{r4, pc}
 8004eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ec2:	e7f7      	b.n	8004eb4 <memmove+0x24>

08004ec4 <_sbrk_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4d06      	ldr	r5, [pc, #24]	@ (8004ee0 <_sbrk_r+0x1c>)
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4604      	mov	r4, r0
 8004ecc:	4608      	mov	r0, r1
 8004ece:	602b      	str	r3, [r5, #0]
 8004ed0:	f7fc fa58 	bl	8001384 <_sbrk>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	d102      	bne.n	8004ede <_sbrk_r+0x1a>
 8004ed8:	682b      	ldr	r3, [r5, #0]
 8004eda:	b103      	cbz	r3, 8004ede <_sbrk_r+0x1a>
 8004edc:	6023      	str	r3, [r4, #0]
 8004ede:	bd38      	pop	{r3, r4, r5, pc}
 8004ee0:	2000039c 	.word	0x2000039c

08004ee4 <memcpy>:
 8004ee4:	440a      	add	r2, r1
 8004ee6:	4291      	cmp	r1, r2
 8004ee8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eec:	d100      	bne.n	8004ef0 <memcpy+0xc>
 8004eee:	4770      	bx	lr
 8004ef0:	b510      	push	{r4, lr}
 8004ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004efa:	4291      	cmp	r1, r2
 8004efc:	d1f9      	bne.n	8004ef2 <memcpy+0xe>
 8004efe:	bd10      	pop	{r4, pc}

08004f00 <_realloc_r>:
 8004f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f04:	4680      	mov	r8, r0
 8004f06:	4615      	mov	r5, r2
 8004f08:	460c      	mov	r4, r1
 8004f0a:	b921      	cbnz	r1, 8004f16 <_realloc_r+0x16>
 8004f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f10:	4611      	mov	r1, r2
 8004f12:	f7ff bc4b 	b.w	80047ac <_malloc_r>
 8004f16:	b92a      	cbnz	r2, 8004f24 <_realloc_r+0x24>
 8004f18:	f7ff fbdc 	bl	80046d4 <_free_r>
 8004f1c:	2400      	movs	r4, #0
 8004f1e:	4620      	mov	r0, r4
 8004f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f24:	f000 f81a 	bl	8004f5c <_malloc_usable_size_r>
 8004f28:	4285      	cmp	r5, r0
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	d802      	bhi.n	8004f34 <_realloc_r+0x34>
 8004f2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f32:	d8f4      	bhi.n	8004f1e <_realloc_r+0x1e>
 8004f34:	4629      	mov	r1, r5
 8004f36:	4640      	mov	r0, r8
 8004f38:	f7ff fc38 	bl	80047ac <_malloc_r>
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d0ec      	beq.n	8004f1c <_realloc_r+0x1c>
 8004f42:	42b5      	cmp	r5, r6
 8004f44:	462a      	mov	r2, r5
 8004f46:	4621      	mov	r1, r4
 8004f48:	bf28      	it	cs
 8004f4a:	4632      	movcs	r2, r6
 8004f4c:	f7ff ffca 	bl	8004ee4 <memcpy>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fbbe 	bl	80046d4 <_free_r>
 8004f58:	463c      	mov	r4, r7
 8004f5a:	e7e0      	b.n	8004f1e <_realloc_r+0x1e>

08004f5c <_malloc_usable_size_r>:
 8004f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f60:	1f18      	subs	r0, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	bfbc      	itt	lt
 8004f66:	580b      	ldrlt	r3, [r1, r0]
 8004f68:	18c0      	addlt	r0, r0, r3
 8004f6a:	4770      	bx	lr

08004f6c <_init>:
 8004f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6e:	bf00      	nop
 8004f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f72:	bc08      	pop	{r3}
 8004f74:	469e      	mov	lr, r3
 8004f76:	4770      	bx	lr

08004f78 <_fini>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr
