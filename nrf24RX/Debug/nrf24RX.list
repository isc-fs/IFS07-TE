
nrf24RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00005f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00005f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f38  08004f38  00005f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004f3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000064  08004fa0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08004fa0  00006348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5ae  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206a  00000000  00000000  00014642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  000166b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000947  00000000  00000000  000172c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db2a  00000000  00000000  00017c07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef3d  00000000  00000000  00035731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9af9  00000000  00000000  0004466e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe167  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c8  00000000  00000000  000fe1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00101874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e80 	.word	0x08004e80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08004e80 	.word	0x08004e80

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96a 	b.w	8000934 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	460c      	mov	r4, r1
 8000680:	2b00      	cmp	r3, #0
 8000682:	d14e      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000684:	4694      	mov	ip, r2
 8000686:	458c      	cmp	ip, r1
 8000688:	4686      	mov	lr, r0
 800068a:	fab2 f282 	clz	r2, r2
 800068e:	d962      	bls.n	8000756 <__udivmoddi4+0xde>
 8000690:	b14a      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000692:	f1c2 0320 	rsb	r3, r2, #32
 8000696:	4091      	lsls	r1, r2
 8000698:	fa20 f303 	lsr.w	r3, r0, r3
 800069c:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a0:	4319      	orrs	r1, r3
 80006a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006aa:	fa1f f68c 	uxth.w	r6, ip
 80006ae:	fbb1 f4f7 	udiv	r4, r1, r7
 80006b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006b6:	fb07 1114 	mls	r1, r7, r4, r1
 80006ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006be:	fb04 f106 	mul.w	r1, r4, r6
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80006ce:	f080 8112 	bcs.w	80008f6 <__udivmoddi4+0x27e>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 810f 	bls.w	80008f6 <__udivmoddi4+0x27e>
 80006d8:	3c02      	subs	r4, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a59      	subs	r1, r3, r1
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb1 f0f7 	udiv	r0, r1, r7
 80006e6:	fb07 1110 	mls	r1, r7, r0, r1
 80006ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006ee:	fb00 f606 	mul.w	r6, r0, r6
 80006f2:	429e      	cmp	r6, r3
 80006f4:	d90a      	bls.n	800070c <__udivmoddi4+0x94>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80006fe:	f080 80fc 	bcs.w	80008fa <__udivmoddi4+0x282>
 8000702:	429e      	cmp	r6, r3
 8000704:	f240 80f9 	bls.w	80008fa <__udivmoddi4+0x282>
 8000708:	4463      	add	r3, ip
 800070a:	3802      	subs	r0, #2
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000712:	2100      	movs	r1, #0
 8000714:	b11d      	cbz	r5, 800071e <__udivmoddi4+0xa6>
 8000716:	40d3      	lsrs	r3, r2
 8000718:	2200      	movs	r2, #0
 800071a:	e9c5 3200 	strd	r3, r2, [r5]
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d905      	bls.n	8000732 <__udivmoddi4+0xba>
 8000726:	b10d      	cbz	r5, 800072c <__udivmoddi4+0xb4>
 8000728:	e9c5 0100 	strd	r0, r1, [r5]
 800072c:	2100      	movs	r1, #0
 800072e:	4608      	mov	r0, r1
 8000730:	e7f5      	b.n	800071e <__udivmoddi4+0xa6>
 8000732:	fab3 f183 	clz	r1, r3
 8000736:	2900      	cmp	r1, #0
 8000738:	d146      	bne.n	80007c8 <__udivmoddi4+0x150>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d302      	bcc.n	8000744 <__udivmoddi4+0xcc>
 800073e:	4290      	cmp	r0, r2
 8000740:	f0c0 80f0 	bcc.w	8000924 <__udivmoddi4+0x2ac>
 8000744:	1a86      	subs	r6, r0, r2
 8000746:	eb64 0303 	sbc.w	r3, r4, r3
 800074a:	2001      	movs	r0, #1
 800074c:	2d00      	cmp	r5, #0
 800074e:	d0e6      	beq.n	800071e <__udivmoddi4+0xa6>
 8000750:	e9c5 6300 	strd	r6, r3, [r5]
 8000754:	e7e3      	b.n	800071e <__udivmoddi4+0xa6>
 8000756:	2a00      	cmp	r2, #0
 8000758:	f040 8090 	bne.w	800087c <__udivmoddi4+0x204>
 800075c:	eba1 040c 	sub.w	r4, r1, ip
 8000760:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000764:	fa1f f78c 	uxth.w	r7, ip
 8000768:	2101      	movs	r1, #1
 800076a:	fbb4 f6f8 	udiv	r6, r4, r8
 800076e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000772:	fb08 4416 	mls	r4, r8, r6, r4
 8000776:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800077a:	fb07 f006 	mul.w	r0, r7, r6
 800077e:	4298      	cmp	r0, r3
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0x11c>
 8000782:	eb1c 0303 	adds.w	r3, ip, r3
 8000786:	f106 34ff 	add.w	r4, r6, #4294967295
 800078a:	d202      	bcs.n	8000792 <__udivmoddi4+0x11a>
 800078c:	4298      	cmp	r0, r3
 800078e:	f200 80cd 	bhi.w	800092c <__udivmoddi4+0x2b4>
 8000792:	4626      	mov	r6, r4
 8000794:	1a1c      	subs	r4, r3, r0
 8000796:	fa1f f38e 	uxth.w	r3, lr
 800079a:	fbb4 f0f8 	udiv	r0, r4, r8
 800079e:	fb08 4410 	mls	r4, r8, r0, r4
 80007a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80007a6:	fb00 f707 	mul.w	r7, r0, r7
 80007aa:	429f      	cmp	r7, r3
 80007ac:	d908      	bls.n	80007c0 <__udivmoddi4+0x148>
 80007ae:	eb1c 0303 	adds.w	r3, ip, r3
 80007b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80007b6:	d202      	bcs.n	80007be <__udivmoddi4+0x146>
 80007b8:	429f      	cmp	r7, r3
 80007ba:	f200 80b0 	bhi.w	800091e <__udivmoddi4+0x2a6>
 80007be:	4620      	mov	r0, r4
 80007c0:	1bdb      	subs	r3, r3, r7
 80007c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c6:	e7a5      	b.n	8000714 <__udivmoddi4+0x9c>
 80007c8:	f1c1 0620 	rsb	r6, r1, #32
 80007cc:	408b      	lsls	r3, r1
 80007ce:	fa22 f706 	lsr.w	r7, r2, r6
 80007d2:	431f      	orrs	r7, r3
 80007d4:	fa20 fc06 	lsr.w	ip, r0, r6
 80007d8:	fa04 f301 	lsl.w	r3, r4, r1
 80007dc:	ea43 030c 	orr.w	r3, r3, ip
 80007e0:	40f4      	lsrs	r4, r6
 80007e2:	fa00 f801 	lsl.w	r8, r0, r1
 80007e6:	0c38      	lsrs	r0, r7, #16
 80007e8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80007ec:	fbb4 fef0 	udiv	lr, r4, r0
 80007f0:	fa1f fc87 	uxth.w	ip, r7
 80007f4:	fb00 441e 	mls	r4, r0, lr, r4
 80007f8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80007fc:	fb0e f90c 	mul.w	r9, lr, ip
 8000800:	45a1      	cmp	r9, r4
 8000802:	fa02 f201 	lsl.w	r2, r2, r1
 8000806:	d90a      	bls.n	800081e <__udivmoddi4+0x1a6>
 8000808:	193c      	adds	r4, r7, r4
 800080a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800080e:	f080 8084 	bcs.w	800091a <__udivmoddi4+0x2a2>
 8000812:	45a1      	cmp	r9, r4
 8000814:	f240 8081 	bls.w	800091a <__udivmoddi4+0x2a2>
 8000818:	f1ae 0e02 	sub.w	lr, lr, #2
 800081c:	443c      	add	r4, r7
 800081e:	eba4 0409 	sub.w	r4, r4, r9
 8000822:	fa1f f983 	uxth.w	r9, r3
 8000826:	fbb4 f3f0 	udiv	r3, r4, r0
 800082a:	fb00 4413 	mls	r4, r0, r3, r4
 800082e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000832:	fb03 fc0c 	mul.w	ip, r3, ip
 8000836:	45a4      	cmp	ip, r4
 8000838:	d907      	bls.n	800084a <__udivmoddi4+0x1d2>
 800083a:	193c      	adds	r4, r7, r4
 800083c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000840:	d267      	bcs.n	8000912 <__udivmoddi4+0x29a>
 8000842:	45a4      	cmp	ip, r4
 8000844:	d965      	bls.n	8000912 <__udivmoddi4+0x29a>
 8000846:	3b02      	subs	r3, #2
 8000848:	443c      	add	r4, r7
 800084a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800084e:	fba0 9302 	umull	r9, r3, r0, r2
 8000852:	eba4 040c 	sub.w	r4, r4, ip
 8000856:	429c      	cmp	r4, r3
 8000858:	46ce      	mov	lr, r9
 800085a:	469c      	mov	ip, r3
 800085c:	d351      	bcc.n	8000902 <__udivmoddi4+0x28a>
 800085e:	d04e      	beq.n	80008fe <__udivmoddi4+0x286>
 8000860:	b155      	cbz	r5, 8000878 <__udivmoddi4+0x200>
 8000862:	ebb8 030e 	subs.w	r3, r8, lr
 8000866:	eb64 040c 	sbc.w	r4, r4, ip
 800086a:	fa04 f606 	lsl.w	r6, r4, r6
 800086e:	40cb      	lsrs	r3, r1
 8000870:	431e      	orrs	r6, r3
 8000872:	40cc      	lsrs	r4, r1
 8000874:	e9c5 6400 	strd	r6, r4, [r5]
 8000878:	2100      	movs	r1, #0
 800087a:	e750      	b.n	800071e <__udivmoddi4+0xa6>
 800087c:	f1c2 0320 	rsb	r3, r2, #32
 8000880:	fa20 f103 	lsr.w	r1, r0, r3
 8000884:	fa0c fc02 	lsl.w	ip, ip, r2
 8000888:	fa24 f303 	lsr.w	r3, r4, r3
 800088c:	4094      	lsls	r4, r2
 800088e:	430c      	orrs	r4, r1
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa00 fe02 	lsl.w	lr, r0, r2
 8000898:	fa1f f78c 	uxth.w	r7, ip
 800089c:	fbb3 f0f8 	udiv	r0, r3, r8
 80008a0:	fb08 3110 	mls	r1, r8, r0, r3
 80008a4:	0c23      	lsrs	r3, r4, #16
 80008a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008aa:	fb00 f107 	mul.w	r1, r0, r7
 80008ae:	4299      	cmp	r1, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x24c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f100 36ff 	add.w	r6, r0, #4294967295
 80008ba:	d22c      	bcs.n	8000916 <__udivmoddi4+0x29e>
 80008bc:	4299      	cmp	r1, r3
 80008be:	d92a      	bls.n	8000916 <__udivmoddi4+0x29e>
 80008c0:	3802      	subs	r0, #2
 80008c2:	4463      	add	r3, ip
 80008c4:	1a5b      	subs	r3, r3, r1
 80008c6:	b2a4      	uxth	r4, r4
 80008c8:	fbb3 f1f8 	udiv	r1, r3, r8
 80008cc:	fb08 3311 	mls	r3, r8, r1, r3
 80008d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008d4:	fb01 f307 	mul.w	r3, r1, r7
 80008d8:	42a3      	cmp	r3, r4
 80008da:	d908      	bls.n	80008ee <__udivmoddi4+0x276>
 80008dc:	eb1c 0404 	adds.w	r4, ip, r4
 80008e0:	f101 36ff 	add.w	r6, r1, #4294967295
 80008e4:	d213      	bcs.n	800090e <__udivmoddi4+0x296>
 80008e6:	42a3      	cmp	r3, r4
 80008e8:	d911      	bls.n	800090e <__udivmoddi4+0x296>
 80008ea:	3902      	subs	r1, #2
 80008ec:	4464      	add	r4, ip
 80008ee:	1ae4      	subs	r4, r4, r3
 80008f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80008f4:	e739      	b.n	800076a <__udivmoddi4+0xf2>
 80008f6:	4604      	mov	r4, r0
 80008f8:	e6f0      	b.n	80006dc <__udivmoddi4+0x64>
 80008fa:	4608      	mov	r0, r1
 80008fc:	e706      	b.n	800070c <__udivmoddi4+0x94>
 80008fe:	45c8      	cmp	r8, r9
 8000900:	d2ae      	bcs.n	8000860 <__udivmoddi4+0x1e8>
 8000902:	ebb9 0e02 	subs.w	lr, r9, r2
 8000906:	eb63 0c07 	sbc.w	ip, r3, r7
 800090a:	3801      	subs	r0, #1
 800090c:	e7a8      	b.n	8000860 <__udivmoddi4+0x1e8>
 800090e:	4631      	mov	r1, r6
 8000910:	e7ed      	b.n	80008ee <__udivmoddi4+0x276>
 8000912:	4603      	mov	r3, r0
 8000914:	e799      	b.n	800084a <__udivmoddi4+0x1d2>
 8000916:	4630      	mov	r0, r6
 8000918:	e7d4      	b.n	80008c4 <__udivmoddi4+0x24c>
 800091a:	46d6      	mov	lr, sl
 800091c:	e77f      	b.n	800081e <__udivmoddi4+0x1a6>
 800091e:	4463      	add	r3, ip
 8000920:	3802      	subs	r0, #2
 8000922:	e74d      	b.n	80007c0 <__udivmoddi4+0x148>
 8000924:	4606      	mov	r6, r0
 8000926:	4623      	mov	r3, r4
 8000928:	4608      	mov	r0, r1
 800092a:	e70f      	b.n	800074c <__udivmoddi4+0xd4>
 800092c:	3e02      	subs	r6, #2
 800092e:	4463      	add	r3, ip
 8000930:	e730      	b.n	8000794 <__udivmoddi4+0x11c>
 8000932:	bf00      	nop

08000934 <__aeabi_idiv0>:
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b090      	sub	sp, #64	@ 0x40
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 fd1c 	bl	800137a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 f845 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f000 f917 	bl	8000b78 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800094a:	f000 f88d 	bl	8000a68 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 800094e:	f000 f8d5 	bl	8000afc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000952:	f000 faf1 	bl	8000f38 <NRF24_Init>
  NRF24_RxMode(RxAddress, 100);
 8000956:	2164      	movs	r1, #100	@ 0x64
 8000958:	4819      	ldr	r0, [pc, #100]	@ (80009c0 <main+0x88>)
 800095a:	f000 fb24 	bl	8000fa6 <NRF24_RxMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (isDataAvailable(0)) {
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fb60 	bl	8001024 <isDataAvailable>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d0f9      	beq.n	800095e <main+0x26>
	              NRF24_Receive((uint8_t*)receivedData);  // Cast to uint8_t* for compatibility
 800096a:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <main+0x8c>)
 800096c:	f000 fb7a 	bl	8001064 <NRF24_Receive>

	              // Print received float values
	              for (int i = 0; i < 8; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
 8000974:	e01f      	b.n	80009b6 <main+0x7e>
	                  char msg[50];
	                  sprintf(msg, "Data[%d]: %.2f\n", i, receivedData[i]); // @suppress("Float formatting support")
 8000976:	4a13      	ldr	r2, [pc, #76]	@ (80009c4 <main+0x8c>)
 8000978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fe09 	bl	8000598 <__aeabi_f2d>
 8000986:	4602      	mov	r2, r0
 8000988:	460b      	mov	r3, r1
 800098a:	4638      	mov	r0, r7
 800098c:	e9cd 2300 	strd	r2, r3, [sp]
 8000990:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000992:	490d      	ldr	r1, [pc, #52]	@ (80009c8 <main+0x90>)
 8000994:	f003 fdd4 	bl	8004540 <siprintf>
	                  HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000998:	463b      	mov	r3, r7
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fc40 	bl	8000220 <strlen>
 80009a0:	4603      	mov	r3, r0
 80009a2:	b29a      	uxth	r2, r3
 80009a4:	4639      	mov	r1, r7
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	4808      	ldr	r0, [pc, #32]	@ (80009cc <main+0x94>)
 80009ac:	f002 ff4c 	bl	8003848 <HAL_UART_Transmit>
	              for (int i = 0; i < 8; i++) {
 80009b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b2:	3301      	adds	r3, #1
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80009b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	dddc      	ble.n	8000976 <main+0x3e>
	  if (isDataAvailable(0)) {
 80009bc:	e7cf      	b.n	800095e <main+0x26>
 80009be:	bf00      	nop
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000178 	.word	0x20000178
 80009c8:	08004e98 	.word	0x08004e98
 80009cc:	20000080 	.word	0x20000080

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	@ 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0318 	add.w	r3, r7, #24
 80009da:	2238      	movs	r2, #56	@ 0x38
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 fdce 	bl	8004580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009f6:	f000 ffd1 	bl	800199c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a04:	2340      	movs	r3, #64	@ 0x40
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000a14:	2310      	movs	r3, #16
 8000a16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0318 	add.w	r3, r7, #24
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f001 f86b 	bl	8001b04 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000a34:	f000 f926 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2104      	movs	r1, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 fb69 	bl	8002128 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a5c:	f000 f912 	bl	8000c84 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3750      	adds	r7, #80	@ 0x50
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a6e:	4a22      	ldr	r2, [pc, #136]	@ (8000af8 <MX_LPUART1_UART_Init+0x90>)
 8000a70:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a72:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000aaa:	4812      	ldr	r0, [pc, #72]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000aac:	f002 fe7c 	bl	80037a8 <HAL_UART_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ab6:	f000 f8e5 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aba:	2100      	movs	r1, #0
 8000abc:	480d      	ldr	r0, [pc, #52]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000abe:	f003 fc75 	bl	80043ac <HAL_UARTEx_SetTxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ac8:	f000 f8dc 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000acc:	2100      	movs	r1, #0
 8000ace:	4809      	ldr	r0, [pc, #36]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000ad0:	f003 fcaa 	bl	8004428 <HAL_UARTEx_SetRxFifoThreshold>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000ada:	f000 f8d3 	bl	8000c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <MX_LPUART1_UART_Init+0x8c>)
 8000ae0:	f003 fc2b 	bl	800433a <HAL_UARTEx_DisableFifoMode>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000aea:	f000 f8cb 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000080 	.word	0x20000080
 8000af8:	40008000 	.word	0x40008000

08000afc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	@ (8000b74 <MX_SPI2_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b16:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b32:	2218      	movs	r2, #24
 8000b34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b48:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <MX_SPI2_Init+0x74>)
 8000b5c:	f001 fef0 	bl	8002940 <HAL_SPI_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f000 f88d 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000114 	.word	0x20000114
 8000b74:	40003800 	.word	0x40003800

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a3a      	ldr	r2, [pc, #232]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba6:	4b35      	ldr	r3, [pc, #212]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a34      	ldr	r2, [pc, #208]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bac:	f043 0320 	orr.w	r3, r3, #32
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b32      	ldr	r3, [pc, #200]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0320 	and.w	r3, r3, #32
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bca:	4b2c      	ldr	r3, [pc, #176]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b29      	ldr	r3, [pc, #164]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bda:	4a28      	ldr	r2, [pc, #160]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be2:	4b26      	ldr	r3, [pc, #152]	@ (8000c7c <MX_GPIO_Init+0x104>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	210c      	movs	r1, #12
 8000bf2:	4823      	ldr	r0, [pc, #140]	@ (8000c80 <MX_GPIO_Init+0x108>)
 8000bf4:	f000 feba 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c00:	f000 feb4 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <MX_GPIO_Init+0x108>)
 8000c1c:	f000 fd24 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRF_IRQ_Pin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000c20:	2301      	movs	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c24:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <MX_GPIO_Init+0x108>)
 8000c36:	f000 fd17 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <MX_GPIO_Init+0x108>)
 8000c52:	f000 fd09 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c56:	2320      	movs	r3, #32
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c70:	f000 fcfa 	bl	8001668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	@ 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	48000800 	.word	0x48000800

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <CS_Select>:
#define NRF24_CSN_PORT   GPIOC
#define NRF24_CSN_PIN    GPIO_PIN_2


void CS_Select (void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	4802      	ldr	r0, [pc, #8]	@ (8000ca4 <CS_Select+0x14>)
 8000c9a:	f000 fe67 	bl	800196c <HAL_GPIO_WritePin>
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <CS_UnSelect>:

void CS_UnSelect (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <CS_UnSelect+0x14>)
 8000cb2:	f000 fe5b 	bl	800196c <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	48000800 	.word	0x48000800

08000cc0 <CE_Enable>:


void CE_Enable (void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	4802      	ldr	r0, [pc, #8]	@ (8000cd4 <CE_Enable+0x14>)
 8000cca:	f000 fe4f 	bl	800196c <HAL_GPIO_WritePin>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <CE_Disable>:

void CE_Disable (void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2108      	movs	r1, #8
 8000ce0:	4802      	ldr	r0, [pc, #8]	@ (8000cec <CE_Disable+0x14>)
 8000ce2:	f000 fe43 	bl	800196c <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	48000800 	.word	0x48000800

08000cf0 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	460a      	mov	r2, r1
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000d0e:	f7ff ffbf 	bl	8000c90 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 8000d12:	f107 010c 	add.w	r1, r7, #12
 8000d16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d1a:	2202      	movs	r2, #2
 8000d1c:	4804      	ldr	r0, [pc, #16]	@ (8000d30 <nrf24_WriteReg+0x40>)
 8000d1e:	f001 feba 	bl	8002a96 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000d22:	f7ff ffc1 	bl	8000ca8 <CS_UnSelect>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000114 	.word	0x20000114

08000d34 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
 8000d44:	f043 0320 	orr.w	r3, r3, #32
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000d4c:	f7ff ffa0 	bl	8000c90 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 8000d50:	f107 0114 	add.w	r1, r7, #20
 8000d54:	2364      	movs	r3, #100	@ 0x64
 8000d56:	2201      	movs	r2, #1
 8000d58:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <nrf24_WriteRegMulti+0x48>)
 8000d5a:	f001 fe9c 	bl	8002a96 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <nrf24_WriteRegMulti+0x48>)
 8000d6a:	f001 fe94 	bl	8002a96 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000d6e:	f7ff ff9b 	bl	8000ca8 <CS_UnSelect>
}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000114 	.word	0x20000114

08000d80 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000d8e:	f7ff ff7f 	bl	8000c90 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000d92:	1df9      	adds	r1, r7, #7
 8000d94:	2364      	movs	r3, #100	@ 0x64
 8000d96:	2201      	movs	r2, #1
 8000d98:	4808      	ldr	r0, [pc, #32]	@ (8000dbc <nrf24_ReadReg+0x3c>)
 8000d9a:	f001 fe7c 	bl	8002a96 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 8000d9e:	f107 010f 	add.w	r1, r7, #15
 8000da2:	2364      	movs	r3, #100	@ 0x64
 8000da4:	2201      	movs	r2, #1
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <nrf24_ReadReg+0x3c>)
 8000da8:	f001 ffeb 	bl	8002d82 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000dac:	f7ff ff7c 	bl	8000ca8 <CS_UnSelect>

	return data;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000114 	.word	0x20000114

08000dc0 <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000dca:	f7ff ff61 	bl	8000c90 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 8000dce:	1df9      	adds	r1, r7, #7
 8000dd0:	2364      	movs	r3, #100	@ 0x64
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4804      	ldr	r0, [pc, #16]	@ (8000de8 <nrfsendCmd+0x28>)
 8000dd6:	f001 fe5e 	bl	8002a96 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000dda:	f7ff ff65 	bl	8000ca8 <CS_UnSelect>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000114 	.word	0x20000114

08000dec <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	2b07      	cmp	r3, #7
 8000dfa:	d104      	bne.n	8000e06 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2007      	movs	r0, #7
 8000e00:	f7ff ff76 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000e04:	e090      	b.n	8000f28 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b17      	cmp	r3, #23
 8000e0a:	d104      	bne.n	8000e16 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000e0c:	2111      	movs	r1, #17
 8000e0e:	2017      	movs	r0, #23
 8000e10:	f7ff ff6e 	bl	8000cf0 <nrf24_WriteReg>
}
 8000e14:	e088      	b.n	8000f28 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000e16:	2108      	movs	r1, #8
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff69 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000e1e:	213f      	movs	r1, #63	@ 0x3f
 8000e20:	2001      	movs	r0, #1
 8000e22:	f7ff ff65 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000e26:	2103      	movs	r1, #3
 8000e28:	2002      	movs	r0, #2
 8000e2a:	f7ff ff61 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000e2e:	2103      	movs	r1, #3
 8000e30:	2003      	movs	r0, #3
 8000e32:	f7ff ff5d 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000e36:	2103      	movs	r1, #3
 8000e38:	2004      	movs	r0, #4
 8000e3a:	f7ff ff59 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000e3e:	2102      	movs	r1, #2
 8000e40:	2005      	movs	r0, #5
 8000e42:	f7ff ff55 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000e46:	210e      	movs	r1, #14
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f7ff ff51 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);// este
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2007      	movs	r0, #7
 8000e52:	f7ff ff4d 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000e56:	2100      	movs	r1, #0
 8000e58:	2008      	movs	r0, #8
 8000e5a:	f7ff ff49 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);// este
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2009      	movs	r0, #9
 8000e62:	f7ff ff45 	bl	8000cf0 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000e66:	4a32      	ldr	r2, [pc, #200]	@ (8000f30 <nrf24_reset+0x144>)
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e70:	6018      	str	r0, [r3, #0]
 8000e72:	3304      	adds	r3, #4
 8000e74:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f7ff ff58 	bl	8000d34 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};// este
 8000e84:	4a2b      	ldr	r2, [pc, #172]	@ (8000f34 <nrf24_reset+0x148>)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e8e:	6018      	str	r0, [r3, #0]
 8000e90:	3304      	adds	r3, #4
 8000e92:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	2205      	movs	r2, #5
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	200b      	movs	r0, #11
 8000e9e:	f7ff ff49 	bl	8000d34 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 8000ea2:	21c3      	movs	r1, #195	@ 0xc3
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	f7ff ff23 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000eaa:	21c4      	movs	r1, #196	@ 0xc4
 8000eac:	200d      	movs	r0, #13
 8000eae:	f7ff ff1f 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 8000eb2:	21c5      	movs	r1, #197	@ 0xc5
 8000eb4:	200e      	movs	r0, #14
 8000eb6:	f7ff ff1b 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000eba:	21c6      	movs	r1, #198	@ 0xc6
 8000ebc:	200f      	movs	r0, #15
 8000ebe:	f7ff ff17 	bl	8000cf0 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8000f30 <nrf24_reset+0x144>)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ecc:	6018      	str	r0, [r3, #0]
 8000ece:	3304      	adds	r3, #4
 8000ed0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	4619      	mov	r1, r3
 8000eda:	2010      	movs	r0, #16
 8000edc:	f7ff ff2a 	bl	8000d34 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f7ff ff04 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2012      	movs	r0, #18
 8000eec:	f7ff ff00 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	2013      	movs	r0, #19
 8000ef4:	f7ff fefc 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2014      	movs	r0, #20
 8000efc:	f7ff fef8 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000f00:	2100      	movs	r1, #0
 8000f02:	2015      	movs	r0, #21
 8000f04:	f7ff fef4 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2016      	movs	r0, #22
 8000f0c:	f7ff fef0 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000f10:	2111      	movs	r1, #17
 8000f12:	2017      	movs	r0, #23
 8000f14:	f7ff feec 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	201c      	movs	r0, #28
 8000f1c:	f7ff fee8 	bl	8000cf0 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	201d      	movs	r0, #29
 8000f24:	f7ff fee4 	bl	8000cf0 <nrf24_WriteReg>
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08004ea8 	.word	0x08004ea8
 8000f34:	08004eb0 	.word	0x08004eb0

08000f38 <NRF24_Init>:




void NRF24_Init (void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000f3c:	f7ff fecc 	bl	8000cd8 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff ff53 	bl	8000dec <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000f46:	2100      	movs	r1, #0
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fed1 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0x3F);  // No Auto ACK 0011 1111
 8000f4e:	213f      	movs	r1, #63	@ 0x3f
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fecd 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0x03);  // P0:on P1:on P2:off P3:off P4:off P5:off
 8000f56:	2103      	movs	r1, #3
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f7ff fec9 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000f5e:	2103      	movs	r1, #3
 8000f60:	2003      	movs	r0, #3
 8000f62:	f7ff fec5 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0x1F);   // retry delay 500 us, retries 15
 8000f66:	211f      	movs	r1, #31
 8000f68:	2004      	movs	r0, #4
 8000f6a:	f7ff fec1 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2005      	movs	r0, #5
 8000f72:	f7ff febd 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x09);   // no continuous carrier, no force PLL lock, 2 Mbps, -18 dBm Él último es un don t care pero quien sabe...
 8000f76:	2109      	movs	r1, #9
 8000f78:	2006      	movs	r0, #6
 8000f7a:	f7ff feb9 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (FIFO_STATUS, 0x11);
 8000f7e:	2111      	movs	r1, #17
 8000f80:	2017      	movs	r0, #23
 8000f82:	f7ff feb5 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (STATUS, 0x70); // no RX data, no TX, TX retries ok, no pipe data, TX FIFO not full
 8000f86:	2170      	movs	r1, #112	@ 0x70
 8000f88:	2007      	movs	r0, #7
 8000f8a:	f7ff feb1 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg(DYNPD, 0x03); //P0:off P1:on P2:off P3:off P4:off P5:off estaba solo dos
 8000f8e:	2103      	movs	r1, #3
 8000f90:	201c      	movs	r0, #28
 8000f92:	f7ff fead 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg(FEATURE, 0x04);
 8000f96:	2104      	movs	r1, #4
 8000f98:	201d      	movs	r0, #29
 8000f9a:	f7ff fea9 	bl	8000cf0 <nrf24_WriteReg>


	// Enable the chip after configuring the device
	CE_Enable();
 8000f9e:	f7ff fe8f 	bl	8000cc0 <CE_Enable>

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <NRF24_RxMode>:
	return 0;
}


void NRF24_RxMode (uint8_t *Address, uint8_t channel)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 8000fb2:	f7ff fe91 	bl	8000cd8 <CE_Disable>

	nrf24_reset (STATUS);
 8000fb6:	2007      	movs	r0, #7
 8000fb8:	f7ff ff18 	bl	8000dec <nrf24_reset>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000fbc:	78fb      	ldrb	r3, [r7, #3]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f7ff fe95 	bl	8000cf0 <nrf24_WriteReg>

	// select data pipe 2
	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f7ff feda 	bl	8000d80 <nrf24_ReadReg>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr | (1<<2);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg (EN_RXADDR, en_rxaddr);
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fe87 	bl	8000cf0 <nrf24_WriteReg>
	 * Pipe 1 ADDR = 0xAABBCCDD11
	 * Pipe 2 ADDR = 0xAABBCCDD22
	 * Pipe 3 ADDR = 0xAABBCCDD33
	 *
	 */
	nrf24_WriteRegMulti(RX_ADDR_P1, Address, 5);  // Write the Pipe1 address
 8000fe2:	2205      	movs	r2, #5
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	200b      	movs	r0, #11
 8000fe8:	f7ff fea4 	bl	8000d34 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xEE);  // Write the Pipe2 LSB address
 8000fec:	21ee      	movs	r1, #238	@ 0xee
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f7ff fe7e 	bl	8000cf0 <nrf24_WriteReg>

	nrf24_WriteReg (RX_PW_P2, 32);   // 32 bit payload size for pipe 2
 8000ff4:	2120      	movs	r1, #32
 8000ff6:	2013      	movs	r0, #19
 8000ff8:	f7ff fe7a 	bl	8000cf0 <nrf24_WriteReg>


	// power up the device in Rx mode
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff febf 	bl	8000d80 <nrf24_ReadReg>
 8001002:	4603      	mov	r3, r0
 8001004:	73bb      	strb	r3, [r7, #14]
	config = config | (1<<1) | (1<<0);
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	f043 0303 	orr.w	r3, r3, #3
 800100c:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg (CONFIG, config);
 800100e:	7bbb      	ldrb	r3, [r7, #14]
 8001010:	4619      	mov	r1, r3
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fe6c 	bl	8000cf0 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8001018:	f7ff fe52 	bl	8000cc0 <CE_Enable>
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <isDataAvailable>:


uint8_t isDataAvailable (int pipenum)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 800102c:	2007      	movs	r0, #7
 800102e:	f7ff fea7 	bl	8000d80 <nrf24_ReadReg>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800103c:	2b00      	cmp	r3, #0
 800103e:	d00b      	beq.n	8001058 <isDataAvailable+0x34>
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4013      	ands	r3, r2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d005      	beq.n	8001058 <isDataAvailable+0x34>
	{

		nrf24_WriteReg(STATUS, (1<<6));
 800104c:	2140      	movs	r1, #64	@ 0x40
 800104e:	2007      	movs	r0, #7
 8001050:	f7ff fe4e 	bl	8000cf0 <nrf24_WriteReg>

		return 1;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <isDataAvailable+0x36>
	}

	return 0;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <NRF24_Receive>:


void NRF24_Receive (uint8_t *data)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	73fb      	strb	r3, [r7, #15]

	// select the device
	CS_Select();
 8001070:	f7ff fe0e 	bl	8000c90 <CS_Select>

	// payload command
	cmdtosend = R_RX_PAYLOAD;
 8001074:	2361      	movs	r3, #97	@ 0x61
 8001076:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8001078:	f107 010f 	add.w	r1, r7, #15
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	2201      	movs	r2, #1
 8001080:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <NRF24_Receive+0x50>)
 8001082:	f001 fd08 	bl	8002a96 <HAL_SPI_Transmit>

	// Receive the payload
	HAL_SPI_Receive(NRF24_SPI, data, 32, 1000);
 8001086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108a:	2220      	movs	r2, #32
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4809      	ldr	r0, [pc, #36]	@ (80010b4 <NRF24_Receive+0x50>)
 8001090:	f001 fe77 	bl	8002d82 <HAL_SPI_Receive>

	// Unselect the device
	CS_UnSelect();
 8001094:	f7ff fe08 	bl	8000ca8 <CS_UnSelect>

	HAL_Delay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f000 f9df 	bl	800145c <HAL_Delay>

	cmdtosend = FLUSH_RX;
 800109e:	23e2      	movs	r3, #226	@ 0xe2
 80010a0:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe8b 	bl	8000dc0 <nrfsendCmd>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000114 	.word	0x20000114

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_MspInit+0x44>)
 80010c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c2:	4a0e      	ldr	r2, [pc, #56]	@ (80010fc <HAL_MspInit+0x44>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ca:	4b0c      	ldr	r3, [pc, #48]	@ (80010fc <HAL_MspInit+0x44>)
 80010cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <HAL_MspInit+0x44>)
 80010d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <HAL_MspInit+0x44>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_MspInit+0x44>)
 80010e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010ee:	f000 fcf9 	bl	8001ae4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b09a      	sub	sp, #104	@ 0x68
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	2244      	movs	r2, #68	@ 0x44
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fa2d 	bl	8004580 <memset>
  if(huart->Instance==LPUART1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a1f      	ldr	r2, [pc, #124]	@ (80011a8 <HAL_UART_MspInit+0xa8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d136      	bne.n	800119e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001130:	2320      	movs	r3, #32
 8001132:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f001 fa0f 	bl	8002560 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001148:	f7ff fd9c 	bl	8000c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <HAL_UART_MspInit+0xac>)
 800114e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001150:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <HAL_UART_MspInit+0xac>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <HAL_UART_MspInit+0xac>)
 800115a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_UART_MspInit+0xac>)
 8001166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001168:	4a10      	ldr	r2, [pc, #64]	@ (80011ac <HAL_UART_MspInit+0xac>)
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001170:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <HAL_UART_MspInit+0xac>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800117c:	230c      	movs	r3, #12
 800117e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800118c:	230c      	movs	r3, #12
 800118e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119a:	f000 fa65 	bl	8001668 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800119e:	bf00      	nop
 80011a0:	3768      	adds	r7, #104	@ 0x68
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40008000 	.word	0x40008000
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a17      	ldr	r2, [pc, #92]	@ (800122c <HAL_SPI_MspInit+0x7c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d128      	bne.n	8001224 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_SPI_MspInit+0x80>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001202:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001214:	2305      	movs	r3, #5
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_SPI_MspInit+0x84>)
 8001220:	f000 fa22 	bl	8001668 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40003800 	.word	0x40003800
 8001230:	40021000 	.word	0x40021000
 8001234:	48000400 	.word	0x48000400

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <UsageFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f8c7 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	@ (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	@ (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	@ (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d207      	bcs.n	80012d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c8:	f003 f962 	bl	8004590 <__errno>
 80012cc:	4603      	mov	r3, r0
 80012ce:	220c      	movs	r2, #12
 80012d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
 80012d6:	e009      	b.n	80012ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d8:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	4a05      	ldr	r2, [pc, #20]	@ (80012fc <_sbrk+0x64>)
 80012e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ea:	68fb      	ldr	r3, [r7, #12]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20008000 	.word	0x20008000
 80012f8:	00000400 	.word	0x00000400
 80012fc:	200001f8 	.word	0x200001f8
 8001300:	20000348 	.word	0x20000348

08001304 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <SystemInit+0x20>)
 800130a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <SystemInit+0x20>)
 8001310:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001314:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001328:	480d      	ldr	r0, [pc, #52]	@ (8001360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800132c:	f7ff ffea 	bl	8001304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <LoopForever+0x6>)
  ldr r1, =_edata
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001334:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <LoopForever+0xe>)
  movs r3, #0
 8001336:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001338:	e002      	b.n	8001340 <LoopCopyDataInit>

0800133a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800133c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800133e:	3304      	adds	r3, #4

08001340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001344:	d3f9      	bcc.n	800133a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001348:	4c0a      	ldr	r4, [pc, #40]	@ (8001374 <LoopForever+0x16>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800134c:	e001      	b.n	8001352 <LoopFillZerobss>

0800134e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800134e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001350:	3204      	adds	r2, #4

08001352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001354:	d3fb      	bcc.n	800134e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001356:	f003 f921 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800135a:	f7ff faed 	bl	8000938 <main>

0800135e <LoopForever>:

LoopForever:
    b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   r0, =_estack
 8001360:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800136c:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 8001370:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001374:	20000348 	.word	0x20000348

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>

0800137a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001384:	2003      	movs	r0, #3
 8001386:	f000 f93d 	bl	8001604 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f80e 	bl	80013ac <HAL_InitTick>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d002      	beq.n	800139c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e001      	b.n	80013a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800139c:	f7ff fe8c 	bl	80010b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013a0:	79fb      	ldrb	r3, [r7, #7]

}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b4:	2300      	movs	r3, #0
 80013b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013b8:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <HAL_InitTick+0x68>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d022      	beq.n	8001406 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_InitTick+0x6c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <HAL_InitTick+0x68>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f93a 	bl	800164e <HAL_SYSTICK_Config>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d10f      	bne.n	8001400 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b0f      	cmp	r3, #15
 80013e4:	d809      	bhi.n	80013fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e6:	2200      	movs	r2, #0
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	f04f 30ff 	mov.w	r0, #4294967295
 80013ee:	f000 f914 	bl	800161a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <HAL_InitTick+0x70>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e007      	b.n	800140a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e004      	b.n	800140a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	73fb      	strb	r3, [r7, #15]
 8001404:	e001      	b.n	800140a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800140a:	7bfb      	ldrb	r3, [r7, #15]
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000010 	.word	0x20000010
 8001418:	20000008 	.word	0x20000008
 800141c:	2000000c 	.word	0x2000000c

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <HAL_IncTick+0x1c>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_IncTick+0x20>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4413      	add	r3, r2
 800142e:	4a03      	ldr	r2, [pc, #12]	@ (800143c <HAL_IncTick+0x1c>)
 8001430:	6013      	str	r3, [r2, #0]
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	200001fc 	.word	0x200001fc
 8001440:	20000010 	.word	0x20000010

08001444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_GetTick+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	200001fc 	.word	0x200001fc

0800145c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff ffee 	bl	8001444 <HAL_GetTick>
 8001468:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001474:	d004      	beq.n	8001480 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <HAL_Delay+0x40>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	4413      	add	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001480:	bf00      	nop
 8001482:	f7ff ffdf 	bl	8001444 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	429a      	cmp	r2, r3
 8001490:	d8f7      	bhi.n	8001482 <HAL_Delay+0x26>
  {
  }
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000010 	.word	0x20000010

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	@ (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015d0:	d301      	bcc.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e00f      	b.n	80015f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <SysTick_Config+0x40>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	210f      	movs	r1, #15
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f7ff ff8e 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	4b05      	ldr	r3, [pc, #20]	@ (8001600 <SysTick_Config+0x40>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <SysTick_Config+0x40>)
 80015f0:	2207      	movs	r2, #7
 80015f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	e000e010 	.word	0xe000e010

08001604 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff ff47 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	4603      	mov	r3, r0
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
 8001626:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff5e 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffb2 	bl	80015c0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001676:	e15a      	b.n	800192e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 814c 	beq.w	8001928 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d005      	beq.n	80016a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d130      	bne.n	800170a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016de:	2201      	movs	r2, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f003 0201 	and.w	r2, r3, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b03      	cmp	r3, #3
 8001714:	d017      	beq.n	8001746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d123      	bne.n	800179a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0203 	and.w	r2, r3, #3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a6 	beq.w	8001928 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017dc:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_GPIO_Init+0x2e4>)
 80017de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e0:	4a5a      	ldr	r2, [pc, #360]	@ (800194c <HAL_GPIO_Init+0x2e4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e8:	4b58      	ldr	r3, [pc, #352]	@ (800194c <HAL_GPIO_Init+0x2e4>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f4:	4a56      	ldr	r2, [pc, #344]	@ (8001950 <HAL_GPIO_Init+0x2e8>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800181e:	d01f      	beq.n	8001860 <HAL_GPIO_Init+0x1f8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4c      	ldr	r2, [pc, #304]	@ (8001954 <HAL_GPIO_Init+0x2ec>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d019      	beq.n	800185c <HAL_GPIO_Init+0x1f4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4b      	ldr	r2, [pc, #300]	@ (8001958 <HAL_GPIO_Init+0x2f0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1f0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a4a      	ldr	r2, [pc, #296]	@ (800195c <HAL_GPIO_Init+0x2f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a49      	ldr	r2, [pc, #292]	@ (8001960 <HAL_GPIO_Init+0x2f8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a48      	ldr	r2, [pc, #288]	@ (8001964 <HAL_GPIO_Init+0x2fc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e4>
 8001848:	2305      	movs	r3, #5
 800184a:	e00a      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 800184c:	2306      	movs	r3, #6
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001850:	2304      	movs	r3, #4
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	@ (8001950 <HAL_GPIO_Init+0x2e8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <HAL_GPIO_Init+0x300>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a4:	4a30      	ldr	r2, [pc, #192]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018d4:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001968 <HAL_GPIO_Init+0x300>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <HAL_GPIO_Init+0x300>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a11      	ldr	r2, [pc, #68]	@ (8001968 <HAL_GPIO_Init+0x300>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f ae9d 	bne.w	8001678 <HAL_GPIO_Init+0x10>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	48001000 	.word	0x48001000
 8001964:	48001400 	.word	0x48001400
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001988:	e002      	b.n	8001990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d141      	bne.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019aa:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b6:	d131      	bne.n	8001a1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b8:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019be:	4a46      	ldr	r2, [pc, #280]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	4b43      	ldr	r3, [pc, #268]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019d0:	4a41      	ldr	r2, [pc, #260]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2232      	movs	r2, #50	@ 0x32
 80019de:	fb02 f303 	mul.w	r3, r2, r3
 80019e2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9b      	lsrs	r3, r3, #18
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ee:	e002      	b.n	80019f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f6:	4b38      	ldr	r3, [pc, #224]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a02:	d102      	bne.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f2      	bne.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a0a:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a16:	d158      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e057      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a22:	4a2d      	ldr	r2, [pc, #180]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a2c:	e04d      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a34:	d141      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a36:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a42:	d131      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a44:	4b24      	ldr	r3, [pc, #144]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a54:	4b20      	ldr	r3, [pc, #128]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2232      	movs	r2, #50	@ 0x32
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a70:	fba2 2303 	umull	r2, r3, r2, r3
 8001a74:	0c9b      	lsrs	r3, r3, #18
 8001a76:	3301      	adds	r3, #1
 8001a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a7a:	e002      	b.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a8e:	d102      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f2      	bne.n	8001a7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a96:	4b10      	ldr	r3, [pc, #64]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa2:	d112      	bne.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e011      	b.n	8001acc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ab8:	e007      	b.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac2:	4a05      	ldr	r2, [pc, #20]	@ (8001ad8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40007000 	.word	0x40007000
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	431bde83 	.word	0x431bde83

08001ae4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001aee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af2:	6093      	str	r3, [r2, #8]
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40007000 	.word	0x40007000

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e2fe      	b.n	8002114 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d075      	beq.n	8001c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b97      	ldr	r3, [pc, #604]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b94      	ldr	r3, [pc, #592]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d102      	bne.n	8001b42 <HAL_RCC_OscConfig+0x3e>
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d002      	beq.n	8001b48 <HAL_RCC_OscConfig+0x44>
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d10b      	bne.n	8001b60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b48:	4b8d      	ldr	r3, [pc, #564]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05b      	beq.n	8001c0c <HAL_RCC_OscConfig+0x108>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d157      	bne.n	8001c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e2d9      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x74>
 8001b6a:	4b85      	ldr	r3, [pc, #532]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a84      	ldr	r2, [pc, #528]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7f      	ldr	r3, [pc, #508]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7e      	ldr	r2, [pc, #504]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a7b      	ldr	r2, [pc, #492]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xb0>
 8001b9c:	4b78      	ldr	r3, [pc, #480]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a77      	ldr	r2, [pc, #476]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b75      	ldr	r3, [pc, #468]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a74      	ldr	r2, [pc, #464]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc42 	bl	8001444 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fc3e 	bl	8001444 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	@ 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e29e      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xc0>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fc2e 	bl	8001444 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fc2a 	bl	8001444 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e28a      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfe:	4b60      	ldr	r3, [pc, #384]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0xe8>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d075      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c1a:	4b59      	ldr	r3, [pc, #356]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c24:	4b56      	ldr	r3, [pc, #344]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_OscConfig+0x136>
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_OscConfig+0x13c>
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	2b04      	cmp	r3, #4
 8001c3e:	d11f      	bne.n	8001c80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c40:	4b4f      	ldr	r3, [pc, #316]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_OscConfig+0x154>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e25d      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c58:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	4946      	ldr	r1, [pc, #280]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c6c:	4b45      	ldr	r3, [pc, #276]	@ (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fb9b 	bl	80013ac <HAL_InitTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d043      	beq.n	8001d04 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e249      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d023      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c88:	4b3d      	ldr	r3, [pc, #244]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fbd6 	bl	8001444 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fbd2 	bl	8001444 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e232      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cae:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cba:	4b31      	ldr	r3, [pc, #196]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	492d      	ldr	r1, [pc, #180]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
 8001cce:	e01a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fbb2 	bl	8001444 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fbae 	bl	8001444 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e20e      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cf6:	4b22      	ldr	r3, [pc, #136]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d041      	beq.n	8001d96 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b19      	ldr	r3, [pc, #100]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d20:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	f043 0301 	orr.w	r3, r3, #1
 8001d26:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fb8b 	bl	8001444 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d32:	f7ff fb87 	bl	8001444 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1e7      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d44:	4b0e      	ldr	r3, [pc, #56]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ef      	beq.n	8001d32 <HAL_RCC_OscConfig+0x22e>
 8001d52:	e020      	b.n	8001d96 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d54:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d5a:	4a09      	ldr	r2, [pc, #36]	@ (8001d80 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d64:	f7ff fb6e 	bl	8001444 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6a:	e00d      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6c:	f7ff fb6a 	bl	8001444 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d906      	bls.n	8001d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e1ca      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
 8001d7e:	bf00      	nop
 8001d80:	40021000 	.word	0x40021000
 8001d84:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d88:	4b8c      	ldr	r3, [pc, #560]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ea      	bne.n	8001d6c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 80a6 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da4:	2300      	movs	r3, #0
 8001da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001da8:	4b84      	ldr	r3, [pc, #528]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d101      	bne.n	8001db8 <HAL_RCC_OscConfig+0x2b4>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_RCC_OscConfig+0x2b6>
 8001db8:	2300      	movs	r3, #0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00d      	beq.n	8001dda <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dca:	4b7c      	ldr	r3, [pc, #496]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dda:	4b79      	ldr	r3, [pc, #484]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de6:	4b76      	ldr	r3, [pc, #472]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a75      	ldr	r2, [pc, #468]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fb27 	bl	8001444 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fb23 	bl	8001444 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e183      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc0 <HAL_RCC_OscConfig+0x4bc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d108      	bne.n	8001e32 <HAL_RCC_OscConfig+0x32e>
 8001e20:	4b66      	ldr	r3, [pc, #408]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e26:	4a65      	ldr	r2, [pc, #404]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e30:	e024      	b.n	8001e7c <HAL_RCC_OscConfig+0x378>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d110      	bne.n	8001e5c <HAL_RCC_OscConfig+0x358>
 8001e3a:	4b60      	ldr	r3, [pc, #384]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e40:	4a5e      	ldr	r2, [pc, #376]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e50:	4a5a      	ldr	r2, [pc, #360]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e5a:	e00f      	b.n	8001e7c <HAL_RCC_OscConfig+0x378>
 8001e5c:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e62:	4a56      	ldr	r2, [pc, #344]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e6c:	4b53      	ldr	r3, [pc, #332]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e72:	4a52      	ldr	r2, [pc, #328]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d016      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7ff fade 	bl	8001444 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fada 	bl	8001444 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e138      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	4b46      	ldr	r3, [pc, #280]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0ed      	beq.n	8001e8c <HAL_RCC_OscConfig+0x388>
 8001eb0:	e015      	b.n	8001ede <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fac7 	bl	8001444 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fac3 	bl	8001444 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e121      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ed      	bne.n	8001eba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b35      	ldr	r3, [pc, #212]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	4a34      	ldr	r2, [pc, #208]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f04:	4b2d      	ldr	r3, [pc, #180]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f0a:	4a2c      	ldr	r2, [pc, #176]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f14:	f7ff fa96 	bl	8001444 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1c:	f7ff fa92 	bl	8001444 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0f2      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f2e:	4b23      	ldr	r3, [pc, #140]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCC_OscConfig+0x418>
 8001f3c:	e01b      	b.n	8001f76 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f46:	f023 0301 	bic.w	r3, r3, #1
 8001f4a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fa79 	bl	8001444 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f56:	f7ff fa75 	bl	8001444 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0d5      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f68:	4b14      	ldr	r3, [pc, #80]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ef      	bne.n	8001f56 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80c9 	beq.w	8002112 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 030c 	and.w	r3, r3, #12
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	f000 8083 	beq.w	8002094 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d15e      	bne.n	8002054 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_RCC_OscConfig+0x4b8>)
 8001f9c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7ff fa4f 	bl	8001444 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	e00c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7ff fa4b 	bl	8001444 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d905      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e0ab      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc4:	4b55      	ldr	r3, [pc, #340]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1ec      	bne.n	8001faa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fd0:	4b52      	ldr	r3, [pc, #328]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_RCC_OscConfig+0x61c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6a11      	ldr	r1, [r2, #32]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fe0:	3a01      	subs	r2, #1
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	4311      	orrs	r1, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001fea:	0212      	lsls	r2, r2, #8
 8001fec:	4311      	orrs	r1, r2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ff2:	0852      	lsrs	r2, r2, #1
 8001ff4:	3a01      	subs	r2, #1
 8001ff6:	0552      	lsls	r2, r2, #21
 8001ff8:	4311      	orrs	r1, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ffe:	0852      	lsrs	r2, r2, #1
 8002000:	3a01      	subs	r2, #1
 8002002:	0652      	lsls	r2, r2, #25
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800200a:	06d2      	lsls	r2, r2, #27
 800200c:	430a      	orrs	r2, r1
 800200e:	4943      	ldr	r1, [pc, #268]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b41      	ldr	r3, [pc, #260]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a40      	ldr	r2, [pc, #256]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800201a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800201e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002020:	4b3e      	ldr	r3, [pc, #248]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4a3d      	ldr	r2, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800202a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff fa0a 	bl	8001444 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff fa06 	bl	8001444 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e066      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002046:	4b35      	ldr	r3, [pc, #212]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x530>
 8002052:	e05e      	b.n	8002112 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a30      	ldr	r2, [pc, #192]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800205a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff f9f0 	bl	8001444 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff f9ec 	bl	8001444 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e04c      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207a:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002086:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 8002088:	68da      	ldr	r2, [r3, #12]
 800208a:	4924      	ldr	r1, [pc, #144]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <HAL_RCC_OscConfig+0x620>)
 800208e:	4013      	ands	r3, r2
 8002090:	60cb      	str	r3, [r1, #12]
 8002092:	e03e      	b.n	8002112 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e039      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	@ (800211c <HAL_RCC_OscConfig+0x618>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d12c      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020be:	3b01      	subs	r3, #1
 80020c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d123      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d11b      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d113      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	019f800c 	.word	0x019f800c
 8002124:	feeefffc 	.word	0xfeeefffc

08002128 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e11e      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002140:	4b91      	ldr	r3, [pc, #580]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d910      	bls.n	8002170 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214e:	4b8e      	ldr	r3, [pc, #568]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 020f 	bic.w	r2, r3, #15
 8002156:	498c      	ldr	r1, [pc, #560]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215e:	4b8a      	ldr	r3, [pc, #552]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e106      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d073      	beq.n	8002264 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d129      	bne.n	80021d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002184:	4b81      	ldr	r3, [pc, #516]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0f4      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002194:	f000 f99e 	bl	80024d4 <RCC_GetSysClockFreqFromPLLSource>
 8002198:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4a7c      	ldr	r2, [pc, #496]	@ (8002390 <HAL_RCC_ClockConfig+0x268>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d93f      	bls.n	8002222 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021a2:	4b7a      	ldr	r3, [pc, #488]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d033      	beq.n	8002222 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d12f      	bne.n	8002222 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021c2:	4b72      	ldr	r3, [pc, #456]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021ca:	4a70      	ldr	r2, [pc, #448]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	e024      	b.n	8002222 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021e0:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0c6      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021f0:	4b66      	ldr	r3, [pc, #408]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0be      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002200:	f000 f8ce 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002204:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4a61      	ldr	r2, [pc, #388]	@ (8002390 <HAL_RCC_ClockConfig+0x268>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d909      	bls.n	8002222 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800220e:	4b5f      	ldr	r3, [pc, #380]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002216:	4a5d      	ldr	r2, [pc, #372]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002218:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800221c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b5a      	ldr	r3, [pc, #360]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4957      	ldr	r1, [pc, #348]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002234:	f7ff f906 	bl	8001444 <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7ff f902 	bl	8001444 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e095      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b4e      	ldr	r3, [pc, #312]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d023      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800227c:	4b43      	ldr	r3, [pc, #268]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a42      	ldr	r2, [pc, #264]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002282:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002286:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d007      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002294:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800229c:	4a3b      	ldr	r2, [pc, #236]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800229e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022a4:	4b39      	ldr	r3, [pc, #228]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	4936      	ldr	r1, [pc, #216]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
 80022b6:	e008      	b.n	80022ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	2b80      	cmp	r3, #128	@ 0x80
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4a32      	ldr	r2, [pc, #200]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 80022c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d21d      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 020f 	bic.w	r2, r3, #15
 80022e0:	4929      	ldr	r1, [pc, #164]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e8:	f7ff f8ac 	bl	8001444 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f8a8 	bl	8001444 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e03b      	b.n	800237e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d1ed      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4917      	ldr	r1, [pc, #92]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b13      	ldr	r3, [pc, #76]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490f      	ldr	r1, [pc, #60]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002352:	f000 f825 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <HAL_RCC_ClockConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490c      	ldr	r1, [pc, #48]	@ (8002394 <HAL_RCC_ClockConfig+0x26c>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	f003 031f 	and.w	r3, r3, #31
 800236a:	fa22 f303 	lsr.w	r3, r2, r3
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <HAL_RCC_ClockConfig+0x270>)
 8002370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_RCC_ClockConfig+0x274>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff f818 	bl	80013ac <HAL_InitTick>
 800237c:	4603      	mov	r3, r0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40022000 	.word	0x40022000
 800238c:	40021000 	.word	0x40021000
 8002390:	04c4b400 	.word	0x04c4b400
 8002394:	08004eb8 	.word	0x08004eb8
 8002398:	20000008 	.word	0x20000008
 800239c:	2000000c 	.word	0x2000000c

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d102      	bne.n	80023b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_RCC_GetSysClockFreq+0xbc>)
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	e047      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d102      	bne.n	80023ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023c4:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	e03e      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023ca:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b0c      	cmp	r3, #12
 80023d4:	d136      	bne.n	8002444 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023d6:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3301      	adds	r3, #1
 80023ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d10c      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002460 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	4a16      	ldr	r2, [pc, #88]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fe:	68d2      	ldr	r2, [r2, #12]
 8002400:	0a12      	lsrs	r2, r2, #8
 8002402:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
      break;
 800240c:	e00c      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4a10      	ldr	r2, [pc, #64]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	0a12      	lsrs	r2, r2, #8
 800241c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002420:	fb02 f303 	mul.w	r3, r2, r3
 8002424:	617b      	str	r3, [r7, #20]
      break;
 8002426:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0e5b      	lsrs	r3, r3, #25
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	3301      	adds	r3, #1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002438:	697a      	ldr	r2, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e001      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002448:	693b      	ldr	r3, [r7, #16]
}
 800244a:	4618      	mov	r0, r3
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	00f42400 	.word	0x00f42400
 8002460:	016e3600 	.word	0x016e3600

08002464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002468:	4b03      	ldr	r3, [pc, #12]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x14>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008

0800247c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002480:	f7ff fff0 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 8002484:	4602      	mov	r2, r0
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	0a1b      	lsrs	r3, r3, #8
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	4904      	ldr	r1, [pc, #16]	@ (80024a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002492:	5ccb      	ldrb	r3, [r1, r3]
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08004ec8 	.word	0x08004ec8

080024a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024ac:	f7ff ffda 	bl	8002464 <HAL_RCC_GetHCLKFreq>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	0adb      	lsrs	r3, r3, #11
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	4904      	ldr	r1, [pc, #16]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024be:	5ccb      	ldrb	r3, [r1, r3]
 80024c0:	f003 031f 	and.w	r3, r3, #31
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	08004ec8 	.word	0x08004ec8

080024d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024da:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	3301      	adds	r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d10c      	bne.n	8002512 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024f8:	4a17      	ldr	r2, [pc, #92]	@ (8002558 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	4a14      	ldr	r2, [pc, #80]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002502:	68d2      	ldr	r2, [r2, #12]
 8002504:	0a12      	lsrs	r2, r2, #8
 8002506:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
    break;
 8002510:	e00c      	b.n	800252c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002512:	4a12      	ldr	r2, [pc, #72]	@ (800255c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4a0e      	ldr	r2, [pc, #56]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800251c:	68d2      	ldr	r2, [r2, #12]
 800251e:	0a12      	lsrs	r2, r2, #8
 8002520:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	617b      	str	r3, [r7, #20]
    break;
 800252a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002546:	687b      	ldr	r3, [r7, #4]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000
 8002558:	016e3600 	.word	0x016e3600
 800255c:	00f42400 	.word	0x00f42400

08002560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002568:	2300      	movs	r3, #0
 800256a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800256c:	2300      	movs	r3, #0
 800256e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8098 	beq.w	80026ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b43      	ldr	r3, [pc, #268]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4a3f      	ldr	r2, [pc, #252]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002598:	6593      	str	r3, [r2, #88]	@ 0x58
 800259a:	4b3d      	ldr	r3, [pc, #244]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025a6:	2301      	movs	r3, #1
 80025a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a39      	ldr	r2, [pc, #228]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025b6:	f7fe ff45 	bl	8001444 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025bc:	e009      	b.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025be:	f7fe ff41 	bl	8001444 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d902      	bls.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	74fb      	strb	r3, [r7, #19]
        break;
 80025d0:	e005      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025d2:	4b30      	ldr	r3, [pc, #192]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0ef      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d159      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d01e      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fa:	697a      	ldr	r2, [r7, #20]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d019      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800260a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800260c:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002614:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800261c:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800262c:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d016      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263e:	f7fe ff01 	bl	8001444 <HAL_GetTick>
 8002642:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002644:	e00b      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f7fe fefd 	bl	8001444 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d902      	bls.n	800265e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	74fb      	strb	r3, [r7, #19]
            break;
 800265c:	e006      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265e:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ec      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800266c:	7cfb      	ldrb	r3, [r7, #19]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10b      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002672:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002678:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	4903      	ldr	r1, [pc, #12]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002688:	e008      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	74bb      	strb	r3, [r7, #18]
 800268e:	e005      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800269c:	7c7b      	ldrb	r3, [r7, #17]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d105      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a2:	4ba6      	ldr	r3, [pc, #664]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4aa5      	ldr	r2, [pc, #660]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ba:	4ba0      	ldr	r3, [pc, #640]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c0:	f023 0203 	bic.w	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	499c      	ldr	r1, [pc, #624]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026dc:	4b97      	ldr	r3, [pc, #604]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e2:	f023 020c 	bic.w	r2, r3, #12
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4994      	ldr	r1, [pc, #592]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026fe:	4b8f      	ldr	r3, [pc, #572]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002704:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	498b      	ldr	r1, [pc, #556]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002720:	4b86      	ldr	r3, [pc, #536]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4983      	ldr	r1, [pc, #524]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002742:	4b7e      	ldr	r3, [pc, #504]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002748:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	497a      	ldr	r1, [pc, #488]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002764:	4b75      	ldr	r3, [pc, #468]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	4972      	ldr	r1, [pc, #456]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4969      	ldr	r1, [pc, #420]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027a8:	4b64      	ldr	r3, [pc, #400]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ae:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	4961      	ldr	r1, [pc, #388]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ca:	4b5c      	ldr	r3, [pc, #368]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d8:	4958      	ldr	r1, [pc, #352]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027ec:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	4950      	ldr	r1, [pc, #320]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800280a:	d105      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280c:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a4a      	ldr	r2, [pc, #296]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002816:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002820:	2b00      	cmp	r3, #0
 8002822:	d015      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002824:	4b45      	ldr	r3, [pc, #276]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800282a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002832:	4942      	ldr	r1, [pc, #264]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002842:	d105      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002844:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	4a3c      	ldr	r2, [pc, #240]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800284e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d015      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800285c:	4b37      	ldr	r3, [pc, #220]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	4934      	ldr	r1, [pc, #208]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800287a:	d105      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800287c:	4b2f      	ldr	r3, [pc, #188]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a2e      	ldr	r2, [pc, #184]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002886:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d015      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002894:	4b29      	ldr	r3, [pc, #164]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800289a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a2:	4926      	ldr	r1, [pc, #152]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028b2:	d105      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028b4:	4b21      	ldr	r3, [pc, #132]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a20      	ldr	r2, [pc, #128]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d015      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028cc:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	4918      	ldr	r1, [pc, #96]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028ea:	d105      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ec:	4b13      	ldr	r3, [pc, #76]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a12      	ldr	r2, [pc, #72]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002904:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002912:	490a      	ldr	r1, [pc, #40]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002922:	d105      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a04      	ldr	r2, [pc, #16]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002930:	7cbb      	ldrb	r3, [r7, #18]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000

08002940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e09d      	b.n	8002a8e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d108      	bne.n	800296c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002962:	d009      	beq.n	8002978 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
 800296a:	e005      	b.n	8002978 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d106      	bne.n	8002998 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe fc0c 	bl	80011b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029b8:	d902      	bls.n	80029c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e002      	b.n	80029c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029ce:	d007      	beq.n	80029e0 <HAL_SPI_Init+0xa0>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029d8:	d002      	beq.n	80029e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	ea42 0103 	orr.w	r1, r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	0c1b      	lsrs	r3, r3, #16
 8002a3c:	f003 0204 	and.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	f003 0310 	and.w	r3, r3, #16
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a5c:	ea42 0103 	orr.w	r1, r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b088      	sub	sp, #32
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	603b      	str	r3, [r7, #0]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa6:	f7fe fccd 	bl	8001444 <HAL_GetTick>
 8002aaa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	e15c      	b.n	8002d7a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_SPI_Transmit+0x36>
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e154      	b.n	8002d7a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d101      	bne.n	8002ade <HAL_SPI_Transmit+0x48>
 8002ada:	2302      	movs	r3, #2
 8002adc:	e14d      	b.n	8002d7a <HAL_SPI_Transmit+0x2e4>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b30:	d10f      	bne.n	8002b52 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d007      	beq.n	8002b70 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b78:	d952      	bls.n	8002c20 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_SPI_Transmit+0xf2>
 8002b82:	8b7b      	ldrh	r3, [r7, #26]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d145      	bne.n	8002c14 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8c:	881a      	ldrh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	1c9a      	adds	r2, r3, #2
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002bac:	e032      	b.n	8002c14 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d112      	bne.n	8002be2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	1c9a      	adds	r2, r3, #2
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002be0:	e018      	b.n	8002c14 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002be2:	f7fe fc2f 	bl	8001444 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d803      	bhi.n	8002bfa <HAL_SPI_Transmit+0x164>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d102      	bne.n	8002c00 <HAL_SPI_Transmit+0x16a>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d109      	bne.n	8002c14 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0b2      	b.n	8002d7a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1c7      	bne.n	8002bae <HAL_SPI_Transmit+0x118>
 8002c1e:	e083      	b.n	8002d28 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_SPI_Transmit+0x198>
 8002c28:	8b7b      	ldrh	r3, [r7, #26]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d177      	bne.n	8002d1e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d912      	bls.n	8002c5e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	881a      	ldrh	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	1c9a      	adds	r2, r3, #2
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b02      	subs	r3, #2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c5c:	e05f      	b.n	8002d1e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	330c      	adds	r3, #12
 8002c68:	7812      	ldrb	r2, [r2, #0]
 8002c6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c84:	e04b      	b.n	8002d1e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d12b      	bne.n	8002cec <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d912      	bls.n	8002cc4 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	881a      	ldrh	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cae:	1c9a      	adds	r2, r3, #2
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b02      	subs	r3, #2
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cc2:	e02c      	b.n	8002d1e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	330c      	adds	r3, #12
 8002cce:	7812      	ldrb	r2, [r2, #0]
 8002cd0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	1c5a      	adds	r2, r3, #1
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002cea:	e018      	b.n	8002d1e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cec:	f7fe fbaa 	bl	8001444 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d803      	bhi.n	8002d04 <HAL_SPI_Transmit+0x26e>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Transmit+0x274>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e02d      	b.n	8002d7a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ae      	bne.n	8002c86 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	6839      	ldr	r1, [r7, #0]
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fcf5 	bl	800371c <SPI_EndRxTxTransaction>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d002      	beq.n	8002d3e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10a      	bne.n	8002d5c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d46:	2300      	movs	r3, #0
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b088      	sub	sp, #32
 8002d86:	af02      	add	r7, sp, #8
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e123      	b.n	8002fea <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_SPI_Receive+0x2c>
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e11b      	b.n	8002fea <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dba:	d112      	bne.n	8002de2 <HAL_SPI_Receive+0x60>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10e      	bne.n	8002de2 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f90a 	bl	8002ff2 <HAL_SPI_TransmitReceive>
 8002dde:	4603      	mov	r3, r0
 8002de0:	e103      	b.n	8002fea <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de2:	f7fe fb2f 	bl	8001444 <HAL_GetTick>
 8002de6:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_SPI_Receive+0x74>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e0f9      	b.n	8002fea <HAL_SPI_Receive+0x268>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2204      	movs	r2, #4
 8002e02:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	88fa      	ldrh	r2, [r7, #6]
 8002e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e48:	d908      	bls.n	8002e5c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	e007      	b.n	8002e6c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e74:	d10f      	bne.n	8002e96 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea0:	2b40      	cmp	r3, #64	@ 0x40
 8002ea2:	d007      	beq.n	8002eb4 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ebc:	d875      	bhi.n	8002faa <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ebe:	e037      	b.n	8002f30 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d117      	bne.n	8002efe <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f103 020c 	add.w	r2, r3, #12
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002efc:	e018      	b.n	8002f30 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efe:	f7fe faa1 	bl	8001444 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d803      	bhi.n	8002f16 <HAL_SPI_Receive+0x194>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d102      	bne.n	8002f1c <HAL_SPI_Receive+0x19a>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e05c      	b.n	8002fea <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1c1      	bne.n	8002ec0 <HAL_SPI_Receive+0x13e>
 8002f3c:	e03b      	b.n	8002fb6 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0301 	and.w	r3, r3, #1
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d115      	bne.n	8002f78 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	b292      	uxth	r2, r2
 8002f58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	1c9a      	adds	r2, r3, #2
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002f76:	e018      	b.n	8002faa <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f78:	f7fe fa64 	bl	8001444 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d803      	bhi.n	8002f90 <HAL_SPI_Receive+0x20e>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d102      	bne.n	8002f96 <HAL_SPI_Receive+0x214>
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e01f      	b.n	8002fea <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1c3      	bne.n	8002f3e <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	6839      	ldr	r1, [r7, #0]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fb56 	bl	800366c <SPI_EndRxTransaction>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
  }
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b08a      	sub	sp, #40	@ 0x28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
 8002ffc:	607a      	str	r2, [r7, #4]
 8002ffe:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003000:	2301      	movs	r3, #1
 8003002:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003004:	f7fe fa1e 	bl	8001444 <HAL_GetTick>
 8003008:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003010:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800301c:	887b      	ldrh	r3, [r7, #2]
 800301e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003020:	7ffb      	ldrb	r3, [r7, #31]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d00c      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x4e>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800302c:	d106      	bne.n	800303c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d102      	bne.n	800303c <HAL_SPI_TransmitReceive+0x4a>
 8003036:	7ffb      	ldrb	r3, [r7, #31]
 8003038:	2b04      	cmp	r3, #4
 800303a:	d001      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
 800303e:	e1f3      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x60>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d002      	beq.n	8003052 <HAL_SPI_TransmitReceive+0x60>
 800304c:	887b      	ldrh	r3, [r7, #2]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1e8      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_SPI_TransmitReceive+0x72>
 8003060:	2302      	movs	r3, #2
 8003062:	e1e1      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b04      	cmp	r3, #4
 8003076:	d003      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2205      	movs	r2, #5
 800307c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	887a      	ldrh	r2, [r7, #2]
 8003090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	887a      	ldrh	r2, [r7, #2]
 8003098:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	887a      	ldrh	r2, [r7, #2]
 80030a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030c2:	d802      	bhi.n	80030ca <HAL_SPI_TransmitReceive+0xd8>
 80030c4:	8abb      	ldrh	r3, [r7, #20]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d908      	bls.n	80030dc <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030d8:	605a      	str	r2, [r3, #4]
 80030da:	e007      	b.n	80030ec <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030ea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f6:	2b40      	cmp	r3, #64	@ 0x40
 80030f8:	d007      	beq.n	800310a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003108:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003112:	f240 8083 	bls.w	800321c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x132>
 800311e:	8afb      	ldrh	r3, [r7, #22]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d16f      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	1c9a      	adds	r2, r3, #2
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800313e:	b29b      	uxth	r3, r3
 8003140:	3b01      	subs	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003148:	e05c      	b.n	8003204 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b02      	cmp	r3, #2
 8003156:	d11b      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x19e>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800315c:	b29b      	uxth	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d016      	beq.n	8003190 <HAL_SPI_TransmitReceive+0x19e>
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	2b01      	cmp	r3, #1
 8003166:	d113      	bne.n	8003190 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003178:	1c9a      	adds	r2, r3, #2
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003182:	b29b      	uxth	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	b29a      	uxth	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b01      	cmp	r3, #1
 800319c:	d11c      	bne.n	80031d8 <HAL_SPI_TransmitReceive+0x1e6>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d016      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	b292      	uxth	r2, r2
 80031b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d4:	2301      	movs	r3, #1
 80031d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031d8:	f7fe f934 	bl	8001444 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d80d      	bhi.n	8003204 <HAL_SPI_TransmitReceive+0x212>
 80031e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d009      	beq.n	8003204 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e111      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d19d      	bne.n	800314a <HAL_SPI_TransmitReceive+0x158>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d197      	bne.n	800314a <HAL_SPI_TransmitReceive+0x158>
 800321a:	e0e5      	b.n	80033e8 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_SPI_TransmitReceive+0x23a>
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	2b01      	cmp	r3, #1
 8003228:	f040 80d1 	bne.w	80033ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b01      	cmp	r3, #1
 8003234:	d912      	bls.n	800325c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b02      	subs	r3, #2
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800325a:	e0b8      	b.n	80033ce <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	330c      	adds	r3, #12
 8003266:	7812      	ldrb	r2, [r2, #0]
 8003268:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003282:	e0a4      	b.n	80033ce <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0302 	and.w	r3, r3, #2
 800328e:	2b02      	cmp	r3, #2
 8003290:	d134      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x30a>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02f      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x30a>
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d12c      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d912      	bls.n	80032d2 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b02      	subs	r3, #2
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80032d0:	e012      	b.n	80032f8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	330c      	adds	r3, #12
 80032dc:	7812      	ldrb	r2, [r2, #0]
 80032de:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d148      	bne.n	800339c <HAL_SPI_TransmitReceive+0x3aa>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d042      	beq.n	800339c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	d923      	bls.n	800336a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68da      	ldr	r2, [r3, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332c:	b292      	uxth	r2, r2
 800332e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003334:	1c9a      	adds	r2, r3, #2
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b02      	subs	r3, #2
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	d81f      	bhi.n	8003398 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	e016      	b.n	8003398 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f103 020c 	add.w	r2, r3, #12
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003398:	2301      	movs	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800339c:	f7fe f852 	bl	8001444 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d803      	bhi.n	80033b4 <HAL_SPI_TransmitReceive+0x3c2>
 80033ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	d102      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x3c8>
 80033b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e02c      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f47f af55 	bne.w	8003284 <HAL_SPI_TransmitReceive+0x292>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f47f af4e 	bne.w	8003284 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e8:	6a3a      	ldr	r2, [r7, #32]
 80033ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f995 	bl	800371c <SPI_EndRxTxTransaction>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00e      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
  }
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	@ 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003440:	f7fe f800 	bl	8001444 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	4413      	add	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003450:	f7fd fff8 	bl	8001444 <HAL_GetTick>
 8003454:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003456:	4b39      	ldr	r3, [pc, #228]	@ (800353c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	015b      	lsls	r3, r3, #5
 800345c:	0d1b      	lsrs	r3, r3, #20
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003466:	e054      	b.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346e:	d050      	beq.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003470:	f7fd ffe8 	bl	8001444 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	429a      	cmp	r2, r3
 800347e:	d902      	bls.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d13d      	bne.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003494:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349e:	d111      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a8:	d004      	beq.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034b2:	d107      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034cc:	d10f      	bne.n	80034ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e017      	b.n	8003532 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	3b01      	subs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4013      	ands	r3, r2
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	429a      	cmp	r2, r3
 8003520:	bf0c      	ite	eq
 8003522:	2301      	moveq	r3, #1
 8003524:	2300      	movne	r3, #0
 8003526:	b2db      	uxtb	r3, r3
 8003528:	461a      	mov	r2, r3
 800352a:	79fb      	ldrb	r3, [r7, #7]
 800352c:	429a      	cmp	r2, r3
 800352e:	d19b      	bne.n	8003468 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000008 	.word	0x20000008

08003540 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	@ 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003552:	f7fd ff77 	bl	8001444 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	4413      	add	r3, r2
 8003560:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003562:	f7fd ff6f 	bl	8001444 <HAL_GetTick>
 8003566:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003570:	4b3d      	ldr	r3, [pc, #244]	@ (8003668 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00da      	lsls	r2, r3, #3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	0d1b      	lsrs	r3, r3, #20
 8003580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003582:	fb02 f303 	mul.w	r3, r2, r3
 8003586:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003588:	e060      	b.n	800364c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003590:	d107      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	b2db      	uxtb	r3, r3
 800359e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d050      	beq.n	800364c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035aa:	f7fd ff4b 	bl	8001444 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d902      	bls.n	80035c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d13d      	bne.n	800363c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035d8:	d111      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035e2:	d004      	beq.n	80035ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ec:	d107      	bne.n	80035fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003606:	d10f      	bne.n	8003628 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003626:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e010      	b.n	800365e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	3b01      	subs	r3, #1
 800364a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	429a      	cmp	r2, r3
 800365a:	d196      	bne.n	800358a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3728      	adds	r7, #40	@ 0x28
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000008 	.word	0x20000008

0800366c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003680:	d111      	bne.n	80036a6 <SPI_EndRxTransaction+0x3a>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800368a:	d004      	beq.n	8003696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003694:	d107      	bne.n	80036a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2180      	movs	r1, #128	@ 0x80
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff febd 	bl	8003430 <SPI_WaitFlagStateUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e023      	b.n	8003714 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d4:	d11d      	bne.n	8003712 <SPI_EndRxTransaction+0xa6>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036de:	d004      	beq.n	80036ea <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036e8:	d113      	bne.n	8003712 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff ff22 	bl	8003540 <SPI_WaitFifoStateUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e000      	b.n	8003714 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2200      	movs	r2, #0
 8003730:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff ff03 	bl	8003540 <SPI_WaitFifoStateUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e027      	b.n	80037a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2200      	movs	r2, #0
 8003758:	2180      	movs	r1, #128	@ 0x80
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff fe68 	bl	8003430 <SPI_WaitFlagStateUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376a:	f043 0220 	orr.w	r2, r3, #32
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e014      	b.n	80037a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	2200      	movs	r2, #0
 800377e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff fedc 	bl	8003540 <SPI_WaitFifoStateUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e000      	b.n	80037a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e042      	b.n	8003840 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fd fc97 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2224      	movs	r2, #36	@ 0x24
 80037d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fb82 	bl	8003efc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f8b3 	bl	8003964 <UART_SetConfig>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e01b      	b.n	8003840 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685a      	ldr	r2, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689a      	ldr	r2, [r3, #8]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fc01 	bl	8004040 <UART_CheckIdleState>
 800383e:	4603      	mov	r3, r0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08a      	sub	sp, #40	@ 0x28
 800384c:	af02      	add	r7, sp, #8
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385e:	2b20      	cmp	r3, #32
 8003860:	d17b      	bne.n	800395a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_UART_Transmit+0x26>
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e074      	b.n	800395c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2221      	movs	r2, #33	@ 0x21
 800387e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003882:	f7fd fddf 	bl	8001444 <HAL_GetTick>
 8003886:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	88fa      	ldrh	r2, [r7, #6]
 8003894:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a0:	d108      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d104      	bne.n	80038b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	e003      	b.n	80038bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038b8:	2300      	movs	r3, #0
 80038ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038bc:	e030      	b.n	8003920 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	2180      	movs	r1, #128	@ 0x80
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 fc63 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e03d      	b.n	800395c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	3302      	adds	r3, #2
 80038fa:	61bb      	str	r3, [r7, #24]
 80038fc:	e007      	b.n	800390e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1c8      	bne.n	80038be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2200      	movs	r2, #0
 8003934:	2140      	movs	r1, #64	@ 0x40
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fc2c 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e006      	b.n	800395c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3720      	adds	r7, #32
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003968:	b08c      	sub	sp, #48	@ 0x30
 800396a:	af00      	add	r7, sp, #0
 800396c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	431a      	orrs	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	431a      	orrs	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4313      	orrs	r3, r2
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	4bab      	ldr	r3, [pc, #684]	@ (8003c40 <UART_SetConfig+0x2dc>)
 8003994:	4013      	ands	r3, r2
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800399c:	430b      	orrs	r3, r1
 800399e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4aa0      	ldr	r2, [pc, #640]	@ (8003c44 <UART_SetConfig+0x2e0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d004      	beq.n	80039d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039cc:	4313      	orrs	r3, r2
 80039ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80039da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	f023 010f 	bic.w	r1, r3, #15
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a91      	ldr	r2, [pc, #580]	@ (8003c48 <UART_SetConfig+0x2e4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d125      	bne.n	8003a54 <UART_SetConfig+0xf0>
 8003a08:	4b90      	ldr	r3, [pc, #576]	@ (8003c4c <UART_SetConfig+0x2e8>)
 8003a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d81a      	bhi.n	8003a4c <UART_SetConfig+0xe8>
 8003a16:	a201      	add	r2, pc, #4	@ (adr r2, 8003a1c <UART_SetConfig+0xb8>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a3d 	.word	0x08003a3d
 8003a24:	08003a35 	.word	0x08003a35
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a32:	e0d6      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003a34:	2302      	movs	r3, #2
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a3a:	e0d2      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003a3c:	2304      	movs	r3, #4
 8003a3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a42:	e0ce      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003a44:	2308      	movs	r3, #8
 8003a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a4a:	e0ca      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a52:	e0c6      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a7d      	ldr	r2, [pc, #500]	@ (8003c50 <UART_SetConfig+0x2ec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d138      	bne.n	8003ad0 <UART_SetConfig+0x16c>
 8003a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c4c <UART_SetConfig+0x2e8>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b0c      	cmp	r3, #12
 8003a6a:	d82d      	bhi.n	8003ac8 <UART_SetConfig+0x164>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0x110>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003aa9 	.word	0x08003aa9
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003ac9 	.word	0x08003ac9
 8003a80:	08003ac9 	.word	0x08003ac9
 8003a84:	08003ab9 	.word	0x08003ab9
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ac9 	.word	0x08003ac9
 8003a90:	08003ac9 	.word	0x08003ac9
 8003a94:	08003ab1 	.word	0x08003ab1
 8003a98:	08003ac9 	.word	0x08003ac9
 8003a9c:	08003ac9 	.word	0x08003ac9
 8003aa0:	08003ac9 	.word	0x08003ac9
 8003aa4:	08003ac1 	.word	0x08003ac1
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003aae:	e098      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ab6:	e094      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003ab8:	2304      	movs	r3, #4
 8003aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003abe:	e090      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ac6:	e08c      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ace:	e088      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5f      	ldr	r2, [pc, #380]	@ (8003c54 <UART_SetConfig+0x2f0>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d125      	bne.n	8003b26 <UART_SetConfig+0x1c2>
 8003ada:	4b5c      	ldr	r3, [pc, #368]	@ (8003c4c <UART_SetConfig+0x2e8>)
 8003adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ae0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ae4:	2b30      	cmp	r3, #48	@ 0x30
 8003ae6:	d016      	beq.n	8003b16 <UART_SetConfig+0x1b2>
 8003ae8:	2b30      	cmp	r3, #48	@ 0x30
 8003aea:	d818      	bhi.n	8003b1e <UART_SetConfig+0x1ba>
 8003aec:	2b20      	cmp	r3, #32
 8003aee:	d00a      	beq.n	8003b06 <UART_SetConfig+0x1a2>
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	d814      	bhi.n	8003b1e <UART_SetConfig+0x1ba>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <UART_SetConfig+0x19a>
 8003af8:	2b10      	cmp	r3, #16
 8003afa:	d008      	beq.n	8003b0e <UART_SetConfig+0x1aa>
 8003afc:	e00f      	b.n	8003b1e <UART_SetConfig+0x1ba>
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b04:	e06d      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b0c:	e069      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b14:	e065      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b16:	2308      	movs	r3, #8
 8003b18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b1c:	e061      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b1e:	2310      	movs	r3, #16
 8003b20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b24:	e05d      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8003c58 <UART_SetConfig+0x2f4>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d125      	bne.n	8003b7c <UART_SetConfig+0x218>
 8003b30:	4b46      	ldr	r3, [pc, #280]	@ (8003c4c <UART_SetConfig+0x2e8>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003b3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b3c:	d016      	beq.n	8003b6c <UART_SetConfig+0x208>
 8003b3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b40:	d818      	bhi.n	8003b74 <UART_SetConfig+0x210>
 8003b42:	2b80      	cmp	r3, #128	@ 0x80
 8003b44:	d00a      	beq.n	8003b5c <UART_SetConfig+0x1f8>
 8003b46:	2b80      	cmp	r3, #128	@ 0x80
 8003b48:	d814      	bhi.n	8003b74 <UART_SetConfig+0x210>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d002      	beq.n	8003b54 <UART_SetConfig+0x1f0>
 8003b4e:	2b40      	cmp	r3, #64	@ 0x40
 8003b50:	d008      	beq.n	8003b64 <UART_SetConfig+0x200>
 8003b52:	e00f      	b.n	8003b74 <UART_SetConfig+0x210>
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b5a:	e042      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b62:	e03e      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b64:	2304      	movs	r3, #4
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b6a:	e03a      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b6c:	2308      	movs	r3, #8
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e036      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e032      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a30      	ldr	r2, [pc, #192]	@ (8003c44 <UART_SetConfig+0x2e0>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d12a      	bne.n	8003bdc <UART_SetConfig+0x278>
 8003b86:	4b31      	ldr	r3, [pc, #196]	@ (8003c4c <UART_SetConfig+0x2e8>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003b90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b94:	d01a      	beq.n	8003bcc <UART_SetConfig+0x268>
 8003b96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003b9a:	d81b      	bhi.n	8003bd4 <UART_SetConfig+0x270>
 8003b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba0:	d00c      	beq.n	8003bbc <UART_SetConfig+0x258>
 8003ba2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ba6:	d815      	bhi.n	8003bd4 <UART_SetConfig+0x270>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <UART_SetConfig+0x250>
 8003bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb0:	d008      	beq.n	8003bc4 <UART_SetConfig+0x260>
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x270>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bba:	e012      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bc2:	e00e      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bca:	e00a      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003bcc:	2308      	movs	r3, #8
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	e006      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bda:	e002      	b.n	8003be2 <UART_SetConfig+0x27e>
 8003bdc:	2310      	movs	r3, #16
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a17      	ldr	r2, [pc, #92]	@ (8003c44 <UART_SetConfig+0x2e0>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	f040 80a8 	bne.w	8003d3e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d834      	bhi.n	8003c60 <UART_SetConfig+0x2fc>
 8003bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <UART_SetConfig+0x298>)
 8003bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfc:	08003c21 	.word	0x08003c21
 8003c00:	08003c61 	.word	0x08003c61
 8003c04:	08003c29 	.word	0x08003c29
 8003c08:	08003c61 	.word	0x08003c61
 8003c0c:	08003c2f 	.word	0x08003c2f
 8003c10:	08003c61 	.word	0x08003c61
 8003c14:	08003c61 	.word	0x08003c61
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c37 	.word	0x08003c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c20:	f7fe fc2c 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c26:	e021      	b.n	8003c6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	@ (8003c5c <UART_SetConfig+0x2f8>)
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c2c:	e01e      	b.n	8003c6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c2e:	f7fe fbb7 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c34:	e01a      	b.n	8003c6c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c3c:	e016      	b.n	8003c6c <UART_SetConfig+0x308>
 8003c3e:	bf00      	nop
 8003c40:	cfff69f3 	.word	0xcfff69f3
 8003c44:	40008000 	.word	0x40008000
 8003c48:	40013800 	.word	0x40013800
 8003c4c:	40021000 	.word	0x40021000
 8003c50:	40004400 	.word	0x40004400
 8003c54:	40004800 	.word	0x40004800
 8003c58:	40004c00 	.word	0x40004c00
 8003c5c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 812a 	beq.w	8003ec8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	4a9e      	ldr	r2, [pc, #632]	@ (8003ef4 <UART_SetConfig+0x590>)
 8003c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	4413      	add	r3, r2
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d305      	bcc.n	8003ca4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d903      	bls.n	8003cac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003caa:	e10d      	b.n	8003ec8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	2200      	movs	r2, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	4a8e      	ldr	r2, [pc, #568]	@ (8003ef4 <UART_SetConfig+0x590>)
 8003cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	607a      	str	r2, [r7, #4]
 8003cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003cce:	f7fc fcbb 	bl	8000648 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	020b      	lsls	r3, r1, #8
 8003ce4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ce8:	0202      	lsls	r2, r0, #8
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	6849      	ldr	r1, [r1, #4]
 8003cee:	0849      	lsrs	r1, r1, #1
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	460c      	mov	r4, r1
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	eb12 0804 	adds.w	r8, r2, r4
 8003cfa:	eb43 0905 	adc.w	r9, r3, r5
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	469a      	mov	sl, r3
 8003d06:	4693      	mov	fp, r2
 8003d08:	4652      	mov	r2, sl
 8003d0a:	465b      	mov	r3, fp
 8003d0c:	4640      	mov	r0, r8
 8003d0e:	4649      	mov	r1, r9
 8003d10:	f7fc fc9a 	bl	8000648 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4613      	mov	r3, r2
 8003d1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d22:	d308      	bcc.n	8003d36 <UART_SetConfig+0x3d2>
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d2a:	d204      	bcs.n	8003d36 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6a3a      	ldr	r2, [r7, #32]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	e0c8      	b.n	8003ec8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003d3c:	e0c4      	b.n	8003ec8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d46:	d167      	bne.n	8003e18 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003d48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d828      	bhi.n	8003da2 <UART_SetConfig+0x43e>
 8003d50:	a201      	add	r2, pc, #4	@ (adr r2, 8003d58 <UART_SetConfig+0x3f4>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	08003d85 	.word	0x08003d85
 8003d60:	08003d8d 	.word	0x08003d8d
 8003d64:	08003da3 	.word	0x08003da3
 8003d68:	08003d93 	.word	0x08003d93
 8003d6c:	08003da3 	.word	0x08003da3
 8003d70:	08003da3 	.word	0x08003da3
 8003d74:	08003da3 	.word	0x08003da3
 8003d78:	08003d9b 	.word	0x08003d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d7c:	f7fe fb7e 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003d80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d82:	e014      	b.n	8003dae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d84:	f7fe fb90 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003d88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d8a:	e010      	b.n	8003dae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef8 <UART_SetConfig+0x594>)
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d90:	e00d      	b.n	8003dae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d92:	f7fe fb05 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003d96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d98:	e009      	b.n	8003dae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003da0:	e005      	b.n	8003dae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8089 	beq.w	8003ec8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	4a4e      	ldr	r2, [pc, #312]	@ (8003ef4 <UART_SetConfig+0x590>)
 8003dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc8:	005a      	lsls	r2, r3, #1
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	441a      	add	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d916      	bls.n	8003e10 <UART_SetConfig+0x4ac>
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de8:	d212      	bcs.n	8003e10 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	f023 030f 	bic.w	r3, r3, #15
 8003df2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	8bfb      	ldrh	r3, [r7, #30]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	8bfa      	ldrh	r2, [r7, #30]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	e05b      	b.n	8003ec8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e16:	e057      	b.n	8003ec8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d828      	bhi.n	8003e72 <UART_SetConfig+0x50e>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <UART_SetConfig+0x4c4>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e4d 	.word	0x08003e4d
 8003e2c:	08003e55 	.word	0x08003e55
 8003e30:	08003e5d 	.word	0x08003e5d
 8003e34:	08003e73 	.word	0x08003e73
 8003e38:	08003e63 	.word	0x08003e63
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003e73 	.word	0x08003e73
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e6b 	.word	0x08003e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7fe fb16 	bl	800247c <HAL_RCC_GetPCLK1Freq>
 8003e50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e52:	e014      	b.n	8003e7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e54:	f7fe fb28 	bl	80024a8 <HAL_RCC_GetPCLK2Freq>
 8003e58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e5a:	e010      	b.n	8003e7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5c:	4b26      	ldr	r3, [pc, #152]	@ (8003ef8 <UART_SetConfig+0x594>)
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e60:	e00d      	b.n	8003e7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e62:	f7fe fa9d 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 8003e66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003e68:	e009      	b.n	8003e7e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003e70:	e005      	b.n	8003e7e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d021      	beq.n	8003ec8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef4 <UART_SetConfig+0x590>)
 8003e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2b0f      	cmp	r3, #15
 8003eac:	d909      	bls.n	8003ec2 <UART_SetConfig+0x55e>
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d205      	bcs.n	8003ec2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e002      	b.n	8003ec8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2200      	movs	r2, #0
 8003edc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003ee4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3730      	adds	r7, #48	@ 0x30
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	08004ed0 	.word	0x08004ed0
 8003ef8:	00f42400 	.word	0x00f42400

08003efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01a      	beq.n	8004012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffa:	d10a      	bne.n	8004012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004016:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	605a      	str	r2, [r3, #4]
  }
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b098      	sub	sp, #96	@ 0x60
 8004044:	af02      	add	r7, sp, #8
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004050:	f7fd f9f8 	bl	8001444 <HAL_GetTick>
 8004054:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b08      	cmp	r3, #8
 8004062:	d12f      	bne.n	80040c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004064:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004068:	9300      	str	r3, [sp, #0]
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	2200      	movs	r2, #0
 800406e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f88e 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d022      	beq.n	80040c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800408c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004092:	653b      	str	r3, [r7, #80]	@ 0x50
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800409c:	647b      	str	r3, [r7, #68]	@ 0x44
 800409e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e6      	bne.n	800407e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e063      	b.n	800418c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	d149      	bne.n	8004166 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040da:	2200      	movs	r2, #0
 80040dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f857 	bl	8004194 <UART_WaitOnFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03c      	beq.n	8004166 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	623b      	str	r3, [r7, #32]
   return(result);
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004100:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800410a:	633b      	str	r3, [r7, #48]	@ 0x30
 800410c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e6      	bne.n	80040ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	60fb      	str	r3, [r7, #12]
   return(result);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f023 0301 	bic.w	r3, r3, #1
 8004134:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413e:	61fa      	str	r2, [r7, #28]
 8004140:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	69b9      	ldr	r1, [r7, #24]
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	617b      	str	r3, [r7, #20]
   return(result);
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e012      	b.n	800418c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3758      	adds	r7, #88	@ 0x58
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041a4:	e04f      	b.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d04b      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fd f949 	bl	8001444 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e04e      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d037      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b80      	cmp	r3, #128	@ 0x80
 80041da:	d034      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b40      	cmp	r3, #64	@ 0x40
 80041e0:	d031      	beq.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d110      	bne.n	8004212 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f838 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2208      	movs	r2, #8
 8004202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e029      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d111      	bne.n	8004246 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800422a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f81e 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e00f      	b.n	8004266 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	4013      	ands	r3, r2
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	bf0c      	ite	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	2300      	movne	r3, #0
 800425a:	b2db      	uxtb	r3, r3
 800425c:	461a      	mov	r2, r3
 800425e:	79fb      	ldrb	r3, [r7, #7]
 8004260:	429a      	cmp	r2, r3
 8004262:	d0a0      	beq.n	80041a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b095      	sub	sp, #84	@ 0x54
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004294:	643b      	str	r3, [r7, #64]	@ 0x40
 8004296:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800429a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e3      	bne.n	80042a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d118      	bne.n	800431a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 0310 	bic.w	r3, r3, #16
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6979      	ldr	r1, [r7, #20]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	613b      	str	r3, [r7, #16]
   return(result);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e6      	bne.n	80042e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800432e:	bf00      	nop
 8004330:	3754      	adds	r7, #84	@ 0x54
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800433a:	b480      	push	{r7}
 800433c:	b085      	sub	sp, #20
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_UARTEx_DisableFifoMode+0x16>
 800434c:	2302      	movs	r3, #2
 800434e:	e027      	b.n	80043a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	@ 0x24
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800437e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e02d      	b.n	8004420 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2224      	movs	r2, #36	@ 0x24
 80043d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 0201 	bic.w	r2, r2, #1
 80043ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f84f 	bl	80044a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800443c:	2302      	movs	r3, #2
 800443e:	e02d      	b.n	800449c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2224      	movs	r2, #36	@ 0x24
 800444c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f811 	bl	80044a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2220      	movs	r2, #32
 800448e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d108      	bne.n	80044c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80044c4:	e031      	b.n	800452a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80044c6:	2308      	movs	r3, #8
 80044c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80044ca:	2308      	movs	r3, #8
 80044cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	0e5b      	lsrs	r3, r3, #25
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	0f5b      	lsrs	r3, r3, #29
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	7b3a      	ldrb	r2, [r7, #12]
 80044f2:	4911      	ldr	r1, [pc, #68]	@ (8004538 <UARTEx_SetNbDataToProcess+0x94>)
 80044f4:	5c8a      	ldrb	r2, [r1, r2]
 80044f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80044fa:	7b3a      	ldrb	r2, [r7, #12]
 80044fc:	490f      	ldr	r1, [pc, #60]	@ (800453c <UARTEx_SetNbDataToProcess+0x98>)
 80044fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004500:	fb93 f3f2 	sdiv	r3, r3, r2
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	7b7a      	ldrb	r2, [r7, #13]
 8004510:	4909      	ldr	r1, [pc, #36]	@ (8004538 <UARTEx_SetNbDataToProcess+0x94>)
 8004512:	5c8a      	ldrb	r2, [r1, r2]
 8004514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004518:	7b7a      	ldrb	r2, [r7, #13]
 800451a:	4908      	ldr	r1, [pc, #32]	@ (800453c <UARTEx_SetNbDataToProcess+0x98>)
 800451c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800451e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004522:	b29a      	uxth	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	08004ee8 	.word	0x08004ee8
 800453c:	08004ef0 	.word	0x08004ef0

08004540 <siprintf>:
 8004540:	b40e      	push	{r1, r2, r3}
 8004542:	b500      	push	{lr}
 8004544:	b09c      	sub	sp, #112	@ 0x70
 8004546:	ab1d      	add	r3, sp, #116	@ 0x74
 8004548:	9002      	str	r0, [sp, #8]
 800454a:	9006      	str	r0, [sp, #24]
 800454c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004550:	4809      	ldr	r0, [pc, #36]	@ (8004578 <siprintf+0x38>)
 8004552:	9107      	str	r1, [sp, #28]
 8004554:	9104      	str	r1, [sp, #16]
 8004556:	4909      	ldr	r1, [pc, #36]	@ (800457c <siprintf+0x3c>)
 8004558:	f853 2b04 	ldr.w	r2, [r3], #4
 800455c:	9105      	str	r1, [sp, #20]
 800455e:	6800      	ldr	r0, [r0, #0]
 8004560:	9301      	str	r3, [sp, #4]
 8004562:	a902      	add	r1, sp, #8
 8004564:	f000 f994 	bl	8004890 <_svfiprintf_r>
 8004568:	9b02      	ldr	r3, [sp, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	b01c      	add	sp, #112	@ 0x70
 8004570:	f85d eb04 	ldr.w	lr, [sp], #4
 8004574:	b003      	add	sp, #12
 8004576:	4770      	bx	lr
 8004578:	20000014 	.word	0x20000014
 800457c:	ffff0208 	.word	0xffff0208

08004580 <memset>:
 8004580:	4402      	add	r2, r0
 8004582:	4603      	mov	r3, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <__errno>:
 8004590:	4b01      	ldr	r3, [pc, #4]	@ (8004598 <__errno+0x8>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	20000014 	.word	0x20000014

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	@ (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	@ (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	@ (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	@ (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 fc66 	bl	8004e80 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	08004f34 	.word	0x08004f34
 80045d8:	08004f34 	.word	0x08004f34
 80045dc:	08004f34 	.word	0x08004f34
 80045e0:	08004f38 	.word	0x08004f38

080045e4 <__retarget_lock_acquire_recursive>:
 80045e4:	4770      	bx	lr

080045e6 <__retarget_lock_release_recursive>:
 80045e6:	4770      	bx	lr

080045e8 <_free_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4605      	mov	r5, r0
 80045ec:	2900      	cmp	r1, #0
 80045ee:	d041      	beq.n	8004674 <_free_r+0x8c>
 80045f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045f4:	1f0c      	subs	r4, r1, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bfb8      	it	lt
 80045fa:	18e4      	addlt	r4, r4, r3
 80045fc:	f000 f8e0 	bl	80047c0 <__malloc_lock>
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <_free_r+0x90>)
 8004602:	6813      	ldr	r3, [r2, #0]
 8004604:	b933      	cbnz	r3, 8004614 <_free_r+0x2c>
 8004606:	6063      	str	r3, [r4, #4]
 8004608:	6014      	str	r4, [r2, #0]
 800460a:	4628      	mov	r0, r5
 800460c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004610:	f000 b8dc 	b.w	80047cc <__malloc_unlock>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d908      	bls.n	800462a <_free_r+0x42>
 8004618:	6820      	ldr	r0, [r4, #0]
 800461a:	1821      	adds	r1, r4, r0
 800461c:	428b      	cmp	r3, r1
 800461e:	bf01      	itttt	eq
 8004620:	6819      	ldreq	r1, [r3, #0]
 8004622:	685b      	ldreq	r3, [r3, #4]
 8004624:	1809      	addeq	r1, r1, r0
 8004626:	6021      	streq	r1, [r4, #0]
 8004628:	e7ed      	b.n	8004606 <_free_r+0x1e>
 800462a:	461a      	mov	r2, r3
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	b10b      	cbz	r3, 8004634 <_free_r+0x4c>
 8004630:	42a3      	cmp	r3, r4
 8004632:	d9fa      	bls.n	800462a <_free_r+0x42>
 8004634:	6811      	ldr	r1, [r2, #0]
 8004636:	1850      	adds	r0, r2, r1
 8004638:	42a0      	cmp	r0, r4
 800463a:	d10b      	bne.n	8004654 <_free_r+0x6c>
 800463c:	6820      	ldr	r0, [r4, #0]
 800463e:	4401      	add	r1, r0
 8004640:	1850      	adds	r0, r2, r1
 8004642:	4283      	cmp	r3, r0
 8004644:	6011      	str	r1, [r2, #0]
 8004646:	d1e0      	bne.n	800460a <_free_r+0x22>
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	6053      	str	r3, [r2, #4]
 800464e:	4408      	add	r0, r1
 8004650:	6010      	str	r0, [r2, #0]
 8004652:	e7da      	b.n	800460a <_free_r+0x22>
 8004654:	d902      	bls.n	800465c <_free_r+0x74>
 8004656:	230c      	movs	r3, #12
 8004658:	602b      	str	r3, [r5, #0]
 800465a:	e7d6      	b.n	800460a <_free_r+0x22>
 800465c:	6820      	ldr	r0, [r4, #0]
 800465e:	1821      	adds	r1, r4, r0
 8004660:	428b      	cmp	r3, r1
 8004662:	bf04      	itt	eq
 8004664:	6819      	ldreq	r1, [r3, #0]
 8004666:	685b      	ldreq	r3, [r3, #4]
 8004668:	6063      	str	r3, [r4, #4]
 800466a:	bf04      	itt	eq
 800466c:	1809      	addeq	r1, r1, r0
 800466e:	6021      	streq	r1, [r4, #0]
 8004670:	6054      	str	r4, [r2, #4]
 8004672:	e7ca      	b.n	800460a <_free_r+0x22>
 8004674:	bd38      	pop	{r3, r4, r5, pc}
 8004676:	bf00      	nop
 8004678:	20000344 	.word	0x20000344

0800467c <sbrk_aligned>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4e0f      	ldr	r6, [pc, #60]	@ (80046bc <sbrk_aligned+0x40>)
 8004680:	460c      	mov	r4, r1
 8004682:	6831      	ldr	r1, [r6, #0]
 8004684:	4605      	mov	r5, r0
 8004686:	b911      	cbnz	r1, 800468e <sbrk_aligned+0x12>
 8004688:	f000 fba6 	bl	8004dd8 <_sbrk_r>
 800468c:	6030      	str	r0, [r6, #0]
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	f000 fba1 	bl	8004dd8 <_sbrk_r>
 8004696:	1c43      	adds	r3, r0, #1
 8004698:	d103      	bne.n	80046a2 <sbrk_aligned+0x26>
 800469a:	f04f 34ff 	mov.w	r4, #4294967295
 800469e:	4620      	mov	r0, r4
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	1cc4      	adds	r4, r0, #3
 80046a4:	f024 0403 	bic.w	r4, r4, #3
 80046a8:	42a0      	cmp	r0, r4
 80046aa:	d0f8      	beq.n	800469e <sbrk_aligned+0x22>
 80046ac:	1a21      	subs	r1, r4, r0
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 fb92 	bl	8004dd8 <_sbrk_r>
 80046b4:	3001      	adds	r0, #1
 80046b6:	d1f2      	bne.n	800469e <sbrk_aligned+0x22>
 80046b8:	e7ef      	b.n	800469a <sbrk_aligned+0x1e>
 80046ba:	bf00      	nop
 80046bc:	20000340 	.word	0x20000340

080046c0 <_malloc_r>:
 80046c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046c4:	1ccd      	adds	r5, r1, #3
 80046c6:	f025 0503 	bic.w	r5, r5, #3
 80046ca:	3508      	adds	r5, #8
 80046cc:	2d0c      	cmp	r5, #12
 80046ce:	bf38      	it	cc
 80046d0:	250c      	movcc	r5, #12
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	4606      	mov	r6, r0
 80046d6:	db01      	blt.n	80046dc <_malloc_r+0x1c>
 80046d8:	42a9      	cmp	r1, r5
 80046da:	d904      	bls.n	80046e6 <_malloc_r+0x26>
 80046dc:	230c      	movs	r3, #12
 80046de:	6033      	str	r3, [r6, #0]
 80046e0:	2000      	movs	r0, #0
 80046e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047bc <_malloc_r+0xfc>
 80046ea:	f000 f869 	bl	80047c0 <__malloc_lock>
 80046ee:	f8d8 3000 	ldr.w	r3, [r8]
 80046f2:	461c      	mov	r4, r3
 80046f4:	bb44      	cbnz	r4, 8004748 <_malloc_r+0x88>
 80046f6:	4629      	mov	r1, r5
 80046f8:	4630      	mov	r0, r6
 80046fa:	f7ff ffbf 	bl	800467c <sbrk_aligned>
 80046fe:	1c43      	adds	r3, r0, #1
 8004700:	4604      	mov	r4, r0
 8004702:	d158      	bne.n	80047b6 <_malloc_r+0xf6>
 8004704:	f8d8 4000 	ldr.w	r4, [r8]
 8004708:	4627      	mov	r7, r4
 800470a:	2f00      	cmp	r7, #0
 800470c:	d143      	bne.n	8004796 <_malloc_r+0xd6>
 800470e:	2c00      	cmp	r4, #0
 8004710:	d04b      	beq.n	80047aa <_malloc_r+0xea>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	4639      	mov	r1, r7
 8004716:	4630      	mov	r0, r6
 8004718:	eb04 0903 	add.w	r9, r4, r3
 800471c:	f000 fb5c 	bl	8004dd8 <_sbrk_r>
 8004720:	4581      	cmp	r9, r0
 8004722:	d142      	bne.n	80047aa <_malloc_r+0xea>
 8004724:	6821      	ldr	r1, [r4, #0]
 8004726:	1a6d      	subs	r5, r5, r1
 8004728:	4629      	mov	r1, r5
 800472a:	4630      	mov	r0, r6
 800472c:	f7ff ffa6 	bl	800467c <sbrk_aligned>
 8004730:	3001      	adds	r0, #1
 8004732:	d03a      	beq.n	80047aa <_malloc_r+0xea>
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	442b      	add	r3, r5
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	f8d8 3000 	ldr.w	r3, [r8]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	bb62      	cbnz	r2, 800479c <_malloc_r+0xdc>
 8004742:	f8c8 7000 	str.w	r7, [r8]
 8004746:	e00f      	b.n	8004768 <_malloc_r+0xa8>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	1b52      	subs	r2, r2, r5
 800474c:	d420      	bmi.n	8004790 <_malloc_r+0xd0>
 800474e:	2a0b      	cmp	r2, #11
 8004750:	d917      	bls.n	8004782 <_malloc_r+0xc2>
 8004752:	1961      	adds	r1, r4, r5
 8004754:	42a3      	cmp	r3, r4
 8004756:	6025      	str	r5, [r4, #0]
 8004758:	bf18      	it	ne
 800475a:	6059      	strne	r1, [r3, #4]
 800475c:	6863      	ldr	r3, [r4, #4]
 800475e:	bf08      	it	eq
 8004760:	f8c8 1000 	streq.w	r1, [r8]
 8004764:	5162      	str	r2, [r4, r5]
 8004766:	604b      	str	r3, [r1, #4]
 8004768:	4630      	mov	r0, r6
 800476a:	f000 f82f 	bl	80047cc <__malloc_unlock>
 800476e:	f104 000b 	add.w	r0, r4, #11
 8004772:	1d23      	adds	r3, r4, #4
 8004774:	f020 0007 	bic.w	r0, r0, #7
 8004778:	1ac2      	subs	r2, r0, r3
 800477a:	bf1c      	itt	ne
 800477c:	1a1b      	subne	r3, r3, r0
 800477e:	50a3      	strne	r3, [r4, r2]
 8004780:	e7af      	b.n	80046e2 <_malloc_r+0x22>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	42a3      	cmp	r3, r4
 8004786:	bf0c      	ite	eq
 8004788:	f8c8 2000 	streq.w	r2, [r8]
 800478c:	605a      	strne	r2, [r3, #4]
 800478e:	e7eb      	b.n	8004768 <_malloc_r+0xa8>
 8004790:	4623      	mov	r3, r4
 8004792:	6864      	ldr	r4, [r4, #4]
 8004794:	e7ae      	b.n	80046f4 <_malloc_r+0x34>
 8004796:	463c      	mov	r4, r7
 8004798:	687f      	ldr	r7, [r7, #4]
 800479a:	e7b6      	b.n	800470a <_malloc_r+0x4a>
 800479c:	461a      	mov	r2, r3
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	42a3      	cmp	r3, r4
 80047a2:	d1fb      	bne.n	800479c <_malloc_r+0xdc>
 80047a4:	2300      	movs	r3, #0
 80047a6:	6053      	str	r3, [r2, #4]
 80047a8:	e7de      	b.n	8004768 <_malloc_r+0xa8>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6033      	str	r3, [r6, #0]
 80047ae:	4630      	mov	r0, r6
 80047b0:	f000 f80c 	bl	80047cc <__malloc_unlock>
 80047b4:	e794      	b.n	80046e0 <_malloc_r+0x20>
 80047b6:	6005      	str	r5, [r0, #0]
 80047b8:	e7d6      	b.n	8004768 <_malloc_r+0xa8>
 80047ba:	bf00      	nop
 80047bc:	20000344 	.word	0x20000344

080047c0 <__malloc_lock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__malloc_lock+0x8>)
 80047c2:	f7ff bf0f 	b.w	80045e4 <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	2000033c 	.word	0x2000033c

080047cc <__malloc_unlock>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__malloc_unlock+0x8>)
 80047ce:	f7ff bf0a 	b.w	80045e6 <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	2000033c 	.word	0x2000033c

080047d8 <__ssputs_r>:
 80047d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	688e      	ldr	r6, [r1, #8]
 80047de:	461f      	mov	r7, r3
 80047e0:	42be      	cmp	r6, r7
 80047e2:	680b      	ldr	r3, [r1, #0]
 80047e4:	4682      	mov	sl, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	4690      	mov	r8, r2
 80047ea:	d82d      	bhi.n	8004848 <__ssputs_r+0x70>
 80047ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047f4:	d026      	beq.n	8004844 <__ssputs_r+0x6c>
 80047f6:	6965      	ldr	r5, [r4, #20]
 80047f8:	6909      	ldr	r1, [r1, #16]
 80047fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047fe:	eba3 0901 	sub.w	r9, r3, r1
 8004802:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004806:	1c7b      	adds	r3, r7, #1
 8004808:	444b      	add	r3, r9
 800480a:	106d      	asrs	r5, r5, #1
 800480c:	429d      	cmp	r5, r3
 800480e:	bf38      	it	cc
 8004810:	461d      	movcc	r5, r3
 8004812:	0553      	lsls	r3, r2, #21
 8004814:	d527      	bpl.n	8004866 <__ssputs_r+0x8e>
 8004816:	4629      	mov	r1, r5
 8004818:	f7ff ff52 	bl	80046c0 <_malloc_r>
 800481c:	4606      	mov	r6, r0
 800481e:	b360      	cbz	r0, 800487a <__ssputs_r+0xa2>
 8004820:	6921      	ldr	r1, [r4, #16]
 8004822:	464a      	mov	r2, r9
 8004824:	f000 fae8 	bl	8004df8 <memcpy>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800482e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004832:	81a3      	strh	r3, [r4, #12]
 8004834:	6126      	str	r6, [r4, #16]
 8004836:	6165      	str	r5, [r4, #20]
 8004838:	444e      	add	r6, r9
 800483a:	eba5 0509 	sub.w	r5, r5, r9
 800483e:	6026      	str	r6, [r4, #0]
 8004840:	60a5      	str	r5, [r4, #8]
 8004842:	463e      	mov	r6, r7
 8004844:	42be      	cmp	r6, r7
 8004846:	d900      	bls.n	800484a <__ssputs_r+0x72>
 8004848:	463e      	mov	r6, r7
 800484a:	6820      	ldr	r0, [r4, #0]
 800484c:	4632      	mov	r2, r6
 800484e:	4641      	mov	r1, r8
 8004850:	f000 faa8 	bl	8004da4 <memmove>
 8004854:	68a3      	ldr	r3, [r4, #8]
 8004856:	1b9b      	subs	r3, r3, r6
 8004858:	60a3      	str	r3, [r4, #8]
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	4433      	add	r3, r6
 800485e:	6023      	str	r3, [r4, #0]
 8004860:	2000      	movs	r0, #0
 8004862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004866:	462a      	mov	r2, r5
 8004868:	f000 fad4 	bl	8004e14 <_realloc_r>
 800486c:	4606      	mov	r6, r0
 800486e:	2800      	cmp	r0, #0
 8004870:	d1e0      	bne.n	8004834 <__ssputs_r+0x5c>
 8004872:	6921      	ldr	r1, [r4, #16]
 8004874:	4650      	mov	r0, sl
 8004876:	f7ff feb7 	bl	80045e8 <_free_r>
 800487a:	230c      	movs	r3, #12
 800487c:	f8ca 3000 	str.w	r3, [sl]
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004886:	81a3      	strh	r3, [r4, #12]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e7e9      	b.n	8004862 <__ssputs_r+0x8a>
	...

08004890 <_svfiprintf_r>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	4698      	mov	r8, r3
 8004896:	898b      	ldrh	r3, [r1, #12]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	b09d      	sub	sp, #116	@ 0x74
 800489c:	4607      	mov	r7, r0
 800489e:	460d      	mov	r5, r1
 80048a0:	4614      	mov	r4, r2
 80048a2:	d510      	bpl.n	80048c6 <_svfiprintf_r+0x36>
 80048a4:	690b      	ldr	r3, [r1, #16]
 80048a6:	b973      	cbnz	r3, 80048c6 <_svfiprintf_r+0x36>
 80048a8:	2140      	movs	r1, #64	@ 0x40
 80048aa:	f7ff ff09 	bl	80046c0 <_malloc_r>
 80048ae:	6028      	str	r0, [r5, #0]
 80048b0:	6128      	str	r0, [r5, #16]
 80048b2:	b930      	cbnz	r0, 80048c2 <_svfiprintf_r+0x32>
 80048b4:	230c      	movs	r3, #12
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295
 80048bc:	b01d      	add	sp, #116	@ 0x74
 80048be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048c2:	2340      	movs	r3, #64	@ 0x40
 80048c4:	616b      	str	r3, [r5, #20]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ca:	2320      	movs	r3, #32
 80048cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80048d4:	2330      	movs	r3, #48	@ 0x30
 80048d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a74 <_svfiprintf_r+0x1e4>
 80048da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048de:	f04f 0901 	mov.w	r9, #1
 80048e2:	4623      	mov	r3, r4
 80048e4:	469a      	mov	sl, r3
 80048e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048ea:	b10a      	cbz	r2, 80048f0 <_svfiprintf_r+0x60>
 80048ec:	2a25      	cmp	r2, #37	@ 0x25
 80048ee:	d1f9      	bne.n	80048e4 <_svfiprintf_r+0x54>
 80048f0:	ebba 0b04 	subs.w	fp, sl, r4
 80048f4:	d00b      	beq.n	800490e <_svfiprintf_r+0x7e>
 80048f6:	465b      	mov	r3, fp
 80048f8:	4622      	mov	r2, r4
 80048fa:	4629      	mov	r1, r5
 80048fc:	4638      	mov	r0, r7
 80048fe:	f7ff ff6b 	bl	80047d8 <__ssputs_r>
 8004902:	3001      	adds	r0, #1
 8004904:	f000 80a7 	beq.w	8004a56 <_svfiprintf_r+0x1c6>
 8004908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800490a:	445a      	add	r2, fp
 800490c:	9209      	str	r2, [sp, #36]	@ 0x24
 800490e:	f89a 3000 	ldrb.w	r3, [sl]
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 809f 	beq.w	8004a56 <_svfiprintf_r+0x1c6>
 8004918:	2300      	movs	r3, #0
 800491a:	f04f 32ff 	mov.w	r2, #4294967295
 800491e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004922:	f10a 0a01 	add.w	sl, sl, #1
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	9307      	str	r3, [sp, #28]
 800492a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800492e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004930:	4654      	mov	r4, sl
 8004932:	2205      	movs	r2, #5
 8004934:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004938:	484e      	ldr	r0, [pc, #312]	@ (8004a74 <_svfiprintf_r+0x1e4>)
 800493a:	f7fb fc79 	bl	8000230 <memchr>
 800493e:	9a04      	ldr	r2, [sp, #16]
 8004940:	b9d8      	cbnz	r0, 800497a <_svfiprintf_r+0xea>
 8004942:	06d0      	lsls	r0, r2, #27
 8004944:	bf44      	itt	mi
 8004946:	2320      	movmi	r3, #32
 8004948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800494c:	0711      	lsls	r1, r2, #28
 800494e:	bf44      	itt	mi
 8004950:	232b      	movmi	r3, #43	@ 0x2b
 8004952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004956:	f89a 3000 	ldrb.w	r3, [sl]
 800495a:	2b2a      	cmp	r3, #42	@ 0x2a
 800495c:	d015      	beq.n	800498a <_svfiprintf_r+0xfa>
 800495e:	9a07      	ldr	r2, [sp, #28]
 8004960:	4654      	mov	r4, sl
 8004962:	2000      	movs	r0, #0
 8004964:	f04f 0c0a 	mov.w	ip, #10
 8004968:	4621      	mov	r1, r4
 800496a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800496e:	3b30      	subs	r3, #48	@ 0x30
 8004970:	2b09      	cmp	r3, #9
 8004972:	d94b      	bls.n	8004a0c <_svfiprintf_r+0x17c>
 8004974:	b1b0      	cbz	r0, 80049a4 <_svfiprintf_r+0x114>
 8004976:	9207      	str	r2, [sp, #28]
 8004978:	e014      	b.n	80049a4 <_svfiprintf_r+0x114>
 800497a:	eba0 0308 	sub.w	r3, r0, r8
 800497e:	fa09 f303 	lsl.w	r3, r9, r3
 8004982:	4313      	orrs	r3, r2
 8004984:	9304      	str	r3, [sp, #16]
 8004986:	46a2      	mov	sl, r4
 8004988:	e7d2      	b.n	8004930 <_svfiprintf_r+0xa0>
 800498a:	9b03      	ldr	r3, [sp, #12]
 800498c:	1d19      	adds	r1, r3, #4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	9103      	str	r1, [sp, #12]
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfbb      	ittet	lt
 8004996:	425b      	neglt	r3, r3
 8004998:	f042 0202 	orrlt.w	r2, r2, #2
 800499c:	9307      	strge	r3, [sp, #28]
 800499e:	9307      	strlt	r3, [sp, #28]
 80049a0:	bfb8      	it	lt
 80049a2:	9204      	strlt	r2, [sp, #16]
 80049a4:	7823      	ldrb	r3, [r4, #0]
 80049a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80049a8:	d10a      	bne.n	80049c0 <_svfiprintf_r+0x130>
 80049aa:	7863      	ldrb	r3, [r4, #1]
 80049ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ae:	d132      	bne.n	8004a16 <_svfiprintf_r+0x186>
 80049b0:	9b03      	ldr	r3, [sp, #12]
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9203      	str	r2, [sp, #12]
 80049b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049bc:	3402      	adds	r4, #2
 80049be:	9305      	str	r3, [sp, #20]
 80049c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a84 <_svfiprintf_r+0x1f4>
 80049c4:	7821      	ldrb	r1, [r4, #0]
 80049c6:	2203      	movs	r2, #3
 80049c8:	4650      	mov	r0, sl
 80049ca:	f7fb fc31 	bl	8000230 <memchr>
 80049ce:	b138      	cbz	r0, 80049e0 <_svfiprintf_r+0x150>
 80049d0:	9b04      	ldr	r3, [sp, #16]
 80049d2:	eba0 000a 	sub.w	r0, r0, sl
 80049d6:	2240      	movs	r2, #64	@ 0x40
 80049d8:	4082      	lsls	r2, r0
 80049da:	4313      	orrs	r3, r2
 80049dc:	3401      	adds	r4, #1
 80049de:	9304      	str	r3, [sp, #16]
 80049e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e4:	4824      	ldr	r0, [pc, #144]	@ (8004a78 <_svfiprintf_r+0x1e8>)
 80049e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049ea:	2206      	movs	r2, #6
 80049ec:	f7fb fc20 	bl	8000230 <memchr>
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d036      	beq.n	8004a62 <_svfiprintf_r+0x1d2>
 80049f4:	4b21      	ldr	r3, [pc, #132]	@ (8004a7c <_svfiprintf_r+0x1ec>)
 80049f6:	bb1b      	cbnz	r3, 8004a40 <_svfiprintf_r+0x1b0>
 80049f8:	9b03      	ldr	r3, [sp, #12]
 80049fa:	3307      	adds	r3, #7
 80049fc:	f023 0307 	bic.w	r3, r3, #7
 8004a00:	3308      	adds	r3, #8
 8004a02:	9303      	str	r3, [sp, #12]
 8004a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a06:	4433      	add	r3, r6
 8004a08:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a0a:	e76a      	b.n	80048e2 <_svfiprintf_r+0x52>
 8004a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a10:	460c      	mov	r4, r1
 8004a12:	2001      	movs	r0, #1
 8004a14:	e7a8      	b.n	8004968 <_svfiprintf_r+0xd8>
 8004a16:	2300      	movs	r3, #0
 8004a18:	3401      	adds	r4, #1
 8004a1a:	9305      	str	r3, [sp, #20]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f04f 0c0a 	mov.w	ip, #10
 8004a22:	4620      	mov	r0, r4
 8004a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a28:	3a30      	subs	r2, #48	@ 0x30
 8004a2a:	2a09      	cmp	r2, #9
 8004a2c:	d903      	bls.n	8004a36 <_svfiprintf_r+0x1a6>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0c6      	beq.n	80049c0 <_svfiprintf_r+0x130>
 8004a32:	9105      	str	r1, [sp, #20]
 8004a34:	e7c4      	b.n	80049c0 <_svfiprintf_r+0x130>
 8004a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e7f0      	b.n	8004a22 <_svfiprintf_r+0x192>
 8004a40:	ab03      	add	r3, sp, #12
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	462a      	mov	r2, r5
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <_svfiprintf_r+0x1f0>)
 8004a48:	a904      	add	r1, sp, #16
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	f3af 8000 	nop.w
 8004a50:	1c42      	adds	r2, r0, #1
 8004a52:	4606      	mov	r6, r0
 8004a54:	d1d6      	bne.n	8004a04 <_svfiprintf_r+0x174>
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	065b      	lsls	r3, r3, #25
 8004a5a:	f53f af2d 	bmi.w	80048b8 <_svfiprintf_r+0x28>
 8004a5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a60:	e72c      	b.n	80048bc <_svfiprintf_r+0x2c>
 8004a62:	ab03      	add	r3, sp, #12
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	462a      	mov	r2, r5
 8004a68:	4b05      	ldr	r3, [pc, #20]	@ (8004a80 <_svfiprintf_r+0x1f0>)
 8004a6a:	a904      	add	r1, sp, #16
 8004a6c:	4638      	mov	r0, r7
 8004a6e:	f000 f879 	bl	8004b64 <_printf_i>
 8004a72:	e7ed      	b.n	8004a50 <_svfiprintf_r+0x1c0>
 8004a74:	08004ef8 	.word	0x08004ef8
 8004a78:	08004f02 	.word	0x08004f02
 8004a7c:	00000000 	.word	0x00000000
 8004a80:	080047d9 	.word	0x080047d9
 8004a84:	08004efe 	.word	0x08004efe

08004a88 <_printf_common>:
 8004a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a8c:	4616      	mov	r6, r2
 8004a8e:	4698      	mov	r8, r3
 8004a90:	688a      	ldr	r2, [r1, #8]
 8004a92:	690b      	ldr	r3, [r1, #16]
 8004a94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	bfb8      	it	lt
 8004a9c:	4613      	movlt	r3, r2
 8004a9e:	6033      	str	r3, [r6, #0]
 8004aa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	b10a      	cbz	r2, 8004aae <_printf_common+0x26>
 8004aaa:	3301      	adds	r3, #1
 8004aac:	6033      	str	r3, [r6, #0]
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	0699      	lsls	r1, r3, #26
 8004ab2:	bf42      	ittt	mi
 8004ab4:	6833      	ldrmi	r3, [r6, #0]
 8004ab6:	3302      	addmi	r3, #2
 8004ab8:	6033      	strmi	r3, [r6, #0]
 8004aba:	6825      	ldr	r5, [r4, #0]
 8004abc:	f015 0506 	ands.w	r5, r5, #6
 8004ac0:	d106      	bne.n	8004ad0 <_printf_common+0x48>
 8004ac2:	f104 0a19 	add.w	sl, r4, #25
 8004ac6:	68e3      	ldr	r3, [r4, #12]
 8004ac8:	6832      	ldr	r2, [r6, #0]
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	42ab      	cmp	r3, r5
 8004ace:	dc26      	bgt.n	8004b1e <_printf_common+0x96>
 8004ad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ad4:	6822      	ldr	r2, [r4, #0]
 8004ad6:	3b00      	subs	r3, #0
 8004ad8:	bf18      	it	ne
 8004ada:	2301      	movne	r3, #1
 8004adc:	0692      	lsls	r2, r2, #26
 8004ade:	d42b      	bmi.n	8004b38 <_printf_common+0xb0>
 8004ae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	47c8      	blx	r9
 8004aea:	3001      	adds	r0, #1
 8004aec:	d01e      	beq.n	8004b2c <_printf_common+0xa4>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	6922      	ldr	r2, [r4, #16]
 8004af2:	f003 0306 	and.w	r3, r3, #6
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	bf02      	ittt	eq
 8004afa:	68e5      	ldreq	r5, [r4, #12]
 8004afc:	6833      	ldreq	r3, [r6, #0]
 8004afe:	1aed      	subeq	r5, r5, r3
 8004b00:	68a3      	ldr	r3, [r4, #8]
 8004b02:	bf0c      	ite	eq
 8004b04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b08:	2500      	movne	r5, #0
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	bfc4      	itt	gt
 8004b0e:	1a9b      	subgt	r3, r3, r2
 8004b10:	18ed      	addgt	r5, r5, r3
 8004b12:	2600      	movs	r6, #0
 8004b14:	341a      	adds	r4, #26
 8004b16:	42b5      	cmp	r5, r6
 8004b18:	d11a      	bne.n	8004b50 <_printf_common+0xc8>
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	e008      	b.n	8004b30 <_printf_common+0xa8>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4652      	mov	r2, sl
 8004b22:	4641      	mov	r1, r8
 8004b24:	4638      	mov	r0, r7
 8004b26:	47c8      	blx	r9
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d103      	bne.n	8004b34 <_printf_common+0xac>
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b34:	3501      	adds	r5, #1
 8004b36:	e7c6      	b.n	8004ac6 <_printf_common+0x3e>
 8004b38:	18e1      	adds	r1, r4, r3
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	2030      	movs	r0, #48	@ 0x30
 8004b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b42:	4422      	add	r2, r4
 8004b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	e7c7      	b.n	8004ae0 <_printf_common+0x58>
 8004b50:	2301      	movs	r3, #1
 8004b52:	4622      	mov	r2, r4
 8004b54:	4641      	mov	r1, r8
 8004b56:	4638      	mov	r0, r7
 8004b58:	47c8      	blx	r9
 8004b5a:	3001      	adds	r0, #1
 8004b5c:	d0e6      	beq.n	8004b2c <_printf_common+0xa4>
 8004b5e:	3601      	adds	r6, #1
 8004b60:	e7d9      	b.n	8004b16 <_printf_common+0x8e>
	...

08004b64 <_printf_i>:
 8004b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b68:	7e0f      	ldrb	r7, [r1, #24]
 8004b6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b6c:	2f78      	cmp	r7, #120	@ 0x78
 8004b6e:	4691      	mov	r9, r2
 8004b70:	4680      	mov	r8, r0
 8004b72:	460c      	mov	r4, r1
 8004b74:	469a      	mov	sl, r3
 8004b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b7a:	d807      	bhi.n	8004b8c <_printf_i+0x28>
 8004b7c:	2f62      	cmp	r7, #98	@ 0x62
 8004b7e:	d80a      	bhi.n	8004b96 <_printf_i+0x32>
 8004b80:	2f00      	cmp	r7, #0
 8004b82:	f000 80d2 	beq.w	8004d2a <_printf_i+0x1c6>
 8004b86:	2f58      	cmp	r7, #88	@ 0x58
 8004b88:	f000 80b9 	beq.w	8004cfe <_printf_i+0x19a>
 8004b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b94:	e03a      	b.n	8004c0c <_printf_i+0xa8>
 8004b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b9a:	2b15      	cmp	r3, #21
 8004b9c:	d8f6      	bhi.n	8004b8c <_printf_i+0x28>
 8004b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8004ba4 <_printf_i+0x40>)
 8004ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ba4:	08004bfd 	.word	0x08004bfd
 8004ba8:	08004c11 	.word	0x08004c11
 8004bac:	08004b8d 	.word	0x08004b8d
 8004bb0:	08004b8d 	.word	0x08004b8d
 8004bb4:	08004b8d 	.word	0x08004b8d
 8004bb8:	08004b8d 	.word	0x08004b8d
 8004bbc:	08004c11 	.word	0x08004c11
 8004bc0:	08004b8d 	.word	0x08004b8d
 8004bc4:	08004b8d 	.word	0x08004b8d
 8004bc8:	08004b8d 	.word	0x08004b8d
 8004bcc:	08004b8d 	.word	0x08004b8d
 8004bd0:	08004d11 	.word	0x08004d11
 8004bd4:	08004c3b 	.word	0x08004c3b
 8004bd8:	08004ccb 	.word	0x08004ccb
 8004bdc:	08004b8d 	.word	0x08004b8d
 8004be0:	08004b8d 	.word	0x08004b8d
 8004be4:	08004d33 	.word	0x08004d33
 8004be8:	08004b8d 	.word	0x08004b8d
 8004bec:	08004c3b 	.word	0x08004c3b
 8004bf0:	08004b8d 	.word	0x08004b8d
 8004bf4:	08004b8d 	.word	0x08004b8d
 8004bf8:	08004cd3 	.word	0x08004cd3
 8004bfc:	6833      	ldr	r3, [r6, #0]
 8004bfe:	1d1a      	adds	r2, r3, #4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6032      	str	r2, [r6, #0]
 8004c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e09d      	b.n	8004d4c <_printf_i+0x1e8>
 8004c10:	6833      	ldr	r3, [r6, #0]
 8004c12:	6820      	ldr	r0, [r4, #0]
 8004c14:	1d19      	adds	r1, r3, #4
 8004c16:	6031      	str	r1, [r6, #0]
 8004c18:	0606      	lsls	r6, r0, #24
 8004c1a:	d501      	bpl.n	8004c20 <_printf_i+0xbc>
 8004c1c:	681d      	ldr	r5, [r3, #0]
 8004c1e:	e003      	b.n	8004c28 <_printf_i+0xc4>
 8004c20:	0645      	lsls	r5, r0, #25
 8004c22:	d5fb      	bpl.n	8004c1c <_printf_i+0xb8>
 8004c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	da03      	bge.n	8004c34 <_printf_i+0xd0>
 8004c2c:	232d      	movs	r3, #45	@ 0x2d
 8004c2e:	426d      	negs	r5, r5
 8004c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c34:	4859      	ldr	r0, [pc, #356]	@ (8004d9c <_printf_i+0x238>)
 8004c36:	230a      	movs	r3, #10
 8004c38:	e011      	b.n	8004c5e <_printf_i+0xfa>
 8004c3a:	6821      	ldr	r1, [r4, #0]
 8004c3c:	6833      	ldr	r3, [r6, #0]
 8004c3e:	0608      	lsls	r0, r1, #24
 8004c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c44:	d402      	bmi.n	8004c4c <_printf_i+0xe8>
 8004c46:	0649      	lsls	r1, r1, #25
 8004c48:	bf48      	it	mi
 8004c4a:	b2ad      	uxthmi	r5, r5
 8004c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c4e:	4853      	ldr	r0, [pc, #332]	@ (8004d9c <_printf_i+0x238>)
 8004c50:	6033      	str	r3, [r6, #0]
 8004c52:	bf14      	ite	ne
 8004c54:	230a      	movne	r3, #10
 8004c56:	2308      	moveq	r3, #8
 8004c58:	2100      	movs	r1, #0
 8004c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c5e:	6866      	ldr	r6, [r4, #4]
 8004c60:	60a6      	str	r6, [r4, #8]
 8004c62:	2e00      	cmp	r6, #0
 8004c64:	bfa2      	ittt	ge
 8004c66:	6821      	ldrge	r1, [r4, #0]
 8004c68:	f021 0104 	bicge.w	r1, r1, #4
 8004c6c:	6021      	strge	r1, [r4, #0]
 8004c6e:	b90d      	cbnz	r5, 8004c74 <_printf_i+0x110>
 8004c70:	2e00      	cmp	r6, #0
 8004c72:	d04b      	beq.n	8004d0c <_printf_i+0x1a8>
 8004c74:	4616      	mov	r6, r2
 8004c76:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c7a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c7e:	5dc7      	ldrb	r7, [r0, r7]
 8004c80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c84:	462f      	mov	r7, r5
 8004c86:	42bb      	cmp	r3, r7
 8004c88:	460d      	mov	r5, r1
 8004c8a:	d9f4      	bls.n	8004c76 <_printf_i+0x112>
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d10b      	bne.n	8004ca8 <_printf_i+0x144>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07df      	lsls	r7, r3, #31
 8004c94:	d508      	bpl.n	8004ca8 <_printf_i+0x144>
 8004c96:	6923      	ldr	r3, [r4, #16]
 8004c98:	6861      	ldr	r1, [r4, #4]
 8004c9a:	4299      	cmp	r1, r3
 8004c9c:	bfde      	ittt	le
 8004c9e:	2330      	movle	r3, #48	@ 0x30
 8004ca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ca8:	1b92      	subs	r2, r2, r6
 8004caa:	6122      	str	r2, [r4, #16]
 8004cac:	f8cd a000 	str.w	sl, [sp]
 8004cb0:	464b      	mov	r3, r9
 8004cb2:	aa03      	add	r2, sp, #12
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	f7ff fee6 	bl	8004a88 <_printf_common>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d14a      	bne.n	8004d56 <_printf_i+0x1f2>
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	b004      	add	sp, #16
 8004cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f043 0320 	orr.w	r3, r3, #32
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	4833      	ldr	r0, [pc, #204]	@ (8004da0 <_printf_i+0x23c>)
 8004cd4:	2778      	movs	r7, #120	@ 0x78
 8004cd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	6831      	ldr	r1, [r6, #0]
 8004cde:	061f      	lsls	r7, r3, #24
 8004ce0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ce4:	d402      	bmi.n	8004cec <_printf_i+0x188>
 8004ce6:	065f      	lsls	r7, r3, #25
 8004ce8:	bf48      	it	mi
 8004cea:	b2ad      	uxthmi	r5, r5
 8004cec:	6031      	str	r1, [r6, #0]
 8004cee:	07d9      	lsls	r1, r3, #31
 8004cf0:	bf44      	itt	mi
 8004cf2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cf6:	6023      	strmi	r3, [r4, #0]
 8004cf8:	b11d      	cbz	r5, 8004d02 <_printf_i+0x19e>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	e7ac      	b.n	8004c58 <_printf_i+0xf4>
 8004cfe:	4827      	ldr	r0, [pc, #156]	@ (8004d9c <_printf_i+0x238>)
 8004d00:	e7e9      	b.n	8004cd6 <_printf_i+0x172>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	f023 0320 	bic.w	r3, r3, #32
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	e7f6      	b.n	8004cfa <_printf_i+0x196>
 8004d0c:	4616      	mov	r6, r2
 8004d0e:	e7bd      	b.n	8004c8c <_printf_i+0x128>
 8004d10:	6833      	ldr	r3, [r6, #0]
 8004d12:	6825      	ldr	r5, [r4, #0]
 8004d14:	6961      	ldr	r1, [r4, #20]
 8004d16:	1d18      	adds	r0, r3, #4
 8004d18:	6030      	str	r0, [r6, #0]
 8004d1a:	062e      	lsls	r6, r5, #24
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	d501      	bpl.n	8004d24 <_printf_i+0x1c0>
 8004d20:	6019      	str	r1, [r3, #0]
 8004d22:	e002      	b.n	8004d2a <_printf_i+0x1c6>
 8004d24:	0668      	lsls	r0, r5, #25
 8004d26:	d5fb      	bpl.n	8004d20 <_printf_i+0x1bc>
 8004d28:	8019      	strh	r1, [r3, #0]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6123      	str	r3, [r4, #16]
 8004d2e:	4616      	mov	r6, r2
 8004d30:	e7bc      	b.n	8004cac <_printf_i+0x148>
 8004d32:	6833      	ldr	r3, [r6, #0]
 8004d34:	1d1a      	adds	r2, r3, #4
 8004d36:	6032      	str	r2, [r6, #0]
 8004d38:	681e      	ldr	r6, [r3, #0]
 8004d3a:	6862      	ldr	r2, [r4, #4]
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	f7fb fa76 	bl	8000230 <memchr>
 8004d44:	b108      	cbz	r0, 8004d4a <_printf_i+0x1e6>
 8004d46:	1b80      	subs	r0, r0, r6
 8004d48:	6060      	str	r0, [r4, #4]
 8004d4a:	6863      	ldr	r3, [r4, #4]
 8004d4c:	6123      	str	r3, [r4, #16]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d54:	e7aa      	b.n	8004cac <_printf_i+0x148>
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	4632      	mov	r2, r6
 8004d5a:	4649      	mov	r1, r9
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	47d0      	blx	sl
 8004d60:	3001      	adds	r0, #1
 8004d62:	d0ad      	beq.n	8004cc0 <_printf_i+0x15c>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	079b      	lsls	r3, r3, #30
 8004d68:	d413      	bmi.n	8004d92 <_printf_i+0x22e>
 8004d6a:	68e0      	ldr	r0, [r4, #12]
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	bfb8      	it	lt
 8004d72:	4618      	movlt	r0, r3
 8004d74:	e7a6      	b.n	8004cc4 <_printf_i+0x160>
 8004d76:	2301      	movs	r3, #1
 8004d78:	4632      	mov	r2, r6
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	47d0      	blx	sl
 8004d80:	3001      	adds	r0, #1
 8004d82:	d09d      	beq.n	8004cc0 <_printf_i+0x15c>
 8004d84:	3501      	adds	r5, #1
 8004d86:	68e3      	ldr	r3, [r4, #12]
 8004d88:	9903      	ldr	r1, [sp, #12]
 8004d8a:	1a5b      	subs	r3, r3, r1
 8004d8c:	42ab      	cmp	r3, r5
 8004d8e:	dcf2      	bgt.n	8004d76 <_printf_i+0x212>
 8004d90:	e7eb      	b.n	8004d6a <_printf_i+0x206>
 8004d92:	2500      	movs	r5, #0
 8004d94:	f104 0619 	add.w	r6, r4, #25
 8004d98:	e7f5      	b.n	8004d86 <_printf_i+0x222>
 8004d9a:	bf00      	nop
 8004d9c:	08004f09 	.word	0x08004f09
 8004da0:	08004f1a 	.word	0x08004f1a

08004da4 <memmove>:
 8004da4:	4288      	cmp	r0, r1
 8004da6:	b510      	push	{r4, lr}
 8004da8:	eb01 0402 	add.w	r4, r1, r2
 8004dac:	d902      	bls.n	8004db4 <memmove+0x10>
 8004dae:	4284      	cmp	r4, r0
 8004db0:	4623      	mov	r3, r4
 8004db2:	d807      	bhi.n	8004dc4 <memmove+0x20>
 8004db4:	1e43      	subs	r3, r0, #1
 8004db6:	42a1      	cmp	r1, r4
 8004db8:	d008      	beq.n	8004dcc <memmove+0x28>
 8004dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dc2:	e7f8      	b.n	8004db6 <memmove+0x12>
 8004dc4:	4402      	add	r2, r0
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	d100      	bne.n	8004dce <memmove+0x2a>
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd6:	e7f7      	b.n	8004dc8 <memmove+0x24>

08004dd8 <_sbrk_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4d06      	ldr	r5, [pc, #24]	@ (8004df4 <_sbrk_r+0x1c>)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	f7fc fa58 	bl	8001298 <_sbrk>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_sbrk_r+0x1a>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_sbrk_r+0x1a>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	20000338 	.word	0x20000338

08004df8 <memcpy>:
 8004df8:	440a      	add	r2, r1
 8004dfa:	4291      	cmp	r1, r2
 8004dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e00:	d100      	bne.n	8004e04 <memcpy+0xc>
 8004e02:	4770      	bx	lr
 8004e04:	b510      	push	{r4, lr}
 8004e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e0e:	4291      	cmp	r1, r2
 8004e10:	d1f9      	bne.n	8004e06 <memcpy+0xe>
 8004e12:	bd10      	pop	{r4, pc}

08004e14 <_realloc_r>:
 8004e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e18:	4680      	mov	r8, r0
 8004e1a:	4615      	mov	r5, r2
 8004e1c:	460c      	mov	r4, r1
 8004e1e:	b921      	cbnz	r1, 8004e2a <_realloc_r+0x16>
 8004e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e24:	4611      	mov	r1, r2
 8004e26:	f7ff bc4b 	b.w	80046c0 <_malloc_r>
 8004e2a:	b92a      	cbnz	r2, 8004e38 <_realloc_r+0x24>
 8004e2c:	f7ff fbdc 	bl	80045e8 <_free_r>
 8004e30:	2400      	movs	r4, #0
 8004e32:	4620      	mov	r0, r4
 8004e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e38:	f000 f81a 	bl	8004e70 <_malloc_usable_size_r>
 8004e3c:	4285      	cmp	r5, r0
 8004e3e:	4606      	mov	r6, r0
 8004e40:	d802      	bhi.n	8004e48 <_realloc_r+0x34>
 8004e42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e46:	d8f4      	bhi.n	8004e32 <_realloc_r+0x1e>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f7ff fc38 	bl	80046c0 <_malloc_r>
 8004e50:	4607      	mov	r7, r0
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0ec      	beq.n	8004e30 <_realloc_r+0x1c>
 8004e56:	42b5      	cmp	r5, r6
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	bf28      	it	cs
 8004e5e:	4632      	movcs	r2, r6
 8004e60:	f7ff ffca 	bl	8004df8 <memcpy>
 8004e64:	4621      	mov	r1, r4
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7ff fbbe 	bl	80045e8 <_free_r>
 8004e6c:	463c      	mov	r4, r7
 8004e6e:	e7e0      	b.n	8004e32 <_realloc_r+0x1e>

08004e70 <_malloc_usable_size_r>:
 8004e70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e74:	1f18      	subs	r0, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bfbc      	itt	lt
 8004e7a:	580b      	ldrlt	r3, [r1, r0]
 8004e7c:	18c0      	addlt	r0, r0, r3
 8004e7e:	4770      	bx	lr

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
